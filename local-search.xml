<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS61A-Reference</title>
    <link href="/2023-07-19/CS61A-Reference/"/>
    <url>/2023-07-19/CS61A-Reference/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>Composing Programs by <a href="http://www.denero.org/">John DeNero</a>, based on the textbook <a href="http://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a> by Harold Abelson and Gerald Jay Sussman, is licensed under a <a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</p>          </div><h1 id="Chapter-1-Building-Abstractions-with-Functions"><a href="#Chapter-1-Building-Abstractions-with-Functions" class="headerlink" title="Chapter 1: Building Abstractions with Functions"></a>Chapter 1: Building Abstractions with Functions</h1><h2 id="1-1-Getting-Started"><a href="#1-1-Getting-Started" class="headerlink" title="1.1  Getting Started"></a>1.1  Getting Started</h2><p>Computer science is a tremendously broad academic discipline. The areas of globally distributed systems, artificial intelligence, robotics, graphics, security, scientific computing, computer architecture, and dozens of emerging sub-fields all expand with new techniques and discoveries every year. The rapid progress of computer science has left few aspects of human life unaffected. Commerce, communication, science, art, leisure, and politics have all been reinvented as computational domains.</p><p>The high productivity of computer science is only possible because the discipline is built upon an elegant and powerful set of fundamental ideas. All computing begins with representing information, specifying logic to process it, and designing abstractions that manage the complexity of that logic. Mastering these fundamentals will require us to understand precisely how computers interpret computer programs and carry out computational processes.</p><p>These fundamental ideas have long been taught using the classic textbook <em>Structure and Interpretation of Computer Programs</em> (<a href="http://mitpress.mit.edu/sicp">SICP</a>) by Harold Abelson and Gerald Jay Sussman with Julie Sussman. This text borrows heavily from that textbook, which the original authors have kindly licensed for adaptation and reuse under a Creative Commons license. These notes are published under the <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US">Creative Commons attribution non-commericial share-alike license version 3</a>.</p><h3 id="1-1-1-Programming-in-Python"><a href="#1-1-1-Programming-in-Python" class="headerlink" title="1.1.1  Programming in Python"></a>1.1.1  Programming in Python</h3><blockquote><p>A language isn’t something you learn so much as something you join.</p><p>—<a href="http://arikaokrent.com/">Arika Okrent</a></p></blockquote><p>In order to define computational processes, we need a programming language; preferably one that many humans and a great variety of computers can all understand. In this text, we will work primarily with the <a href="http://docs.python.org/py3k/">Python</a> language.</p><p>Python is a widely used programming language that has recruited enthusiasts from many professions: web programmers, game engineers, scientists, academics, and even designers of new programming languages. When you learn Python, you join a million-person-strong community of developers. Developer communities are tremendously important institutions: members help each other solve problems, share their projects and experiences, and collectively develop software and tools. Dedicated members often achieve celebrity and widespread esteem for their contributions.</p><p>The Python language itself is the product of a <a href="http://www.python.org/psf/members/">large volunteer community</a> that prides itself on the <a href="http://python.org/community/diversity/">diversity</a> of its contributors. The language was conceived and first implemented by <a href="http://en.wikipedia.org/wiki/Guido_van_Rossum">Guido van Rossum</a> in the late 1980’s. The first chapter of his <a href="http://docs.python.org/py3k/tutorial/appetite.html">Python 3 Tutorial</a> explains why Python is so popular, among the many languages available today.</p><p>Python excels as an instructional language because, throughout its history, Python’s developers have emphasized the human interpretability of Python code, reinforced by the <a href="http://www.python.org/dev/peps/pep-0020/">Zen of Python</a> guiding principles of beauty, simplicity, and readability. Python is particularly appropriate for this text because its broad set of features support a variety of different programming styles, which we will explore. While there is no single way to program in Python, there are a set of conventions shared across the developer community that facilitate reading, understanding, and extending existing programs. Python’s combination of great flexibility and accessibility allows students to explore many programming paradigms, and then apply their newly acquired knowledge to thousands of <a href="http://pypi.python.org/pypi">ongoing projects</a>.</p><p>These notes maintain the spirit of <a href="http://mitpress.mit.edu/sicp">SICP</a> by introducing the features of Python in step with techniques for abstraction and a rigorous model of computation. In addition, these notes provide a practical introduction to Python programming, including some advanced language features and illustrative examples. Increasing your facility with Python should come naturally as you progress through the text.</p><p>The best way to get started programming in Python is to interact with the interpreter directly. This section describes how to install Python 3, initiate an interactive session with the interpreter, and start programming.</p><h3 id="1-1-2-Installing-Python-3"><a href="#1-1-2-Installing-Python-3" class="headerlink" title="1.1.2  Installing Python 3"></a>1.1.2  Installing Python 3</h3><p>As with all great software, Python has many versions. This text will use the most recent stable version of Python 3. Many computers have older versions of Python installed already, such as Python 2.7, but those will not match the descriptions in this text. You should be able to use any computer, but expect to install Python 3. (Don’t worry, Python is free.)</p><p>You can download Python 3 from the Python downloads page by clicking on the version that begins with 3 (not 2). Follow the instructions of the installer to complete installation.</p><p>For further guidance, try these video tutorials on <a href="http://www.youtube.com/watch?v=54-wuFsPi0w">Windows installation</a> and <a href="http://www.youtube.com/watch?v=smHuBHxJdK8">Mac installation</a> of Python 3, created by Julia Oh.</p><h3 id="1-1-3-Interactive-Sessions"><a href="#1-1-3-Interactive-Sessions" class="headerlink" title="1.1.3  Interactive Sessions"></a>1.1.3  Interactive Sessions</h3><p>In an interactive Python session, you type some Python <em>code</em> after the <em>prompt</em>, <code>&gt;&gt;&gt;</code>. The Python <em>interpreter</em> reads and executes what you type, carrying out your various commands.</p><p>To start an interactive session, run the Python 3 application. Type <code>python3</code> at a terminal prompt (Mac&#x2F;Unix&#x2F;Linux) or open the Python 3 application in Windows.</p><p>If you see the Python prompt, <code>&gt;&gt;&gt;</code>, then you have successfully started an interactive session. These notes depict example interactions using the prompt, followed by some input.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">2</span> + <span class="hljs-number">2</span></span>4</code></pre></div><p><strong>Interactive controls.</strong> Each session keeps a history of what you have typed. To access that history, press <code>&lt;Control&gt;-P</code> (previous) and <code>&lt;Control&gt;-N</code> (next). <code>&lt;Control&gt;-D</code> exits a session, which discards this history. Up and down arrows also cycle through history on some systems.</p><h3 id="1-1-4-First-Example"><a href="#1-1-4-First-Example" class="headerlink" title="1.1.4  First Example"></a>1.1.4  First Example</h3><blockquote><p>And, as imagination bodies forth</p><p>The forms of things to unknown, and the poet’s pen</p><p>Turns them to shapes, and gives to airy nothing</p><p>A local habitation and a name.</p><p>—William Shakespeare, A Midsummer-Night’s Dream</p></blockquote><p>To give Python a proper introduction, we will begin with an example that uses several language features. In the next section, we will start from scratch and build up the language piece by piece. Think of this section as a sneak preview of features to come.</p><p>Python has built-in support for a wide range of common programming activities, such as manipulating text, displaying graphics, and communicating over the Internet. The line of Python code</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen</span></code></pre></div><p>is an <code>import</code> statement that loads functionality for accessing data on the Internet. In particular, it makes available a function called <code>urlopen</code>, which can access the content at a uniform resource locator (URL), a location of something on the Internet.</p><p><strong>Statements &amp; Expressions</strong>. Python code consists of expressions and statements. Broadly, computer programs consist of instructions to either</p><ol><li>Compute some value</li><li>Carry out some action</li></ol><p>Statements typically describe actions. When the Python interpreter executes a statement, it carries out the corresponding action. On the other hand, expressions typically describe computations. When Python evaluates an expression, it computes the value of that expression. This chapter introduces several types of statements and expressions.</p><p>The assignment statement</p><div class="code-wrapper"><pre><code class="hljs isbl">&gt;&gt;&gt; <span class="hljs-variable">shakespeare</span> = <span class="hljs-function"><span class="hljs-title">urlopen</span>(<span class="hljs-string">&#x27;http://composingprograms.com/shakespeare.txt&#x27;</span>)</span></code></pre></div><p>associates the name <code>shakespeare</code> with the value of the expression that follows <code>=</code>. That expression applies the <code>urlopen</code> function to a URL that contains the complete text of William Shakespeare’s 37 plays, all in a single text document.</p><p><strong>Functions</strong>. Functions encapsulate logic that manipulates data. <code>urlopen</code> is a function. A web address is a piece of data, and the text of Shakespeare’s plays is another. The process by which the former leads to the latter may be complex, but we can apply that process using only a simple expression because that complexity is tucked away within a function. Functions are the primary topic of this chapter.</p><p>Another assignment statement</p><div class="code-wrapper"><pre><code class="hljs lisp">&gt;&gt;&gt; words = set(<span class="hljs-name">shakespeare</span>.read().decode().split())</code></pre></div><p>associates the name <code>words</code> to the set of all unique words that appear in Shakespeare’s plays, all 33,721 of them. The chain of commands to <code>read</code>, <code>decode</code>, and <code>split</code>, each operate on an intermediate computational entity: we <code>read</code> the data from the opened URL, then <code>decode</code> the data into text, and finally <code>split</code> the text into words. All of those words are placed in a <code>set</code>.</p><p><strong>Objects</strong>. A <code>set</code> is a type of object, one that supports set operations like computing intersections and membership. An object seamlessly bundles together data and the logic that manipulates that data, in a way that manages the complexity of both. Objects are the primary topic of Chapter 2. Finally, the expression</p><div class="code-wrapper"><pre><code class="hljs prolog">&gt;&gt;&gt; &#123;w for w in words if len(w) == <span class="hljs-number">6</span> and w[::-<span class="hljs-number">1</span>] in words&#125;&#123;<span class="hljs-string">&#x27;redder&#x27;</span>, <span class="hljs-string">&#x27;drawer&#x27;</span>, <span class="hljs-string">&#x27;reward&#x27;</span>, <span class="hljs-string">&#x27;diaper&#x27;</span>, <span class="hljs-string">&#x27;repaid&#x27;</span>&#125;</code></pre></div><p>is a compound expression that evaluates to the set of all Shakespearian words that are simultaneously a word spelled in reverse. The cryptic notation <code>w[::-1]</code> enumerates each letter in a word, but the <code>-1</code> dictates to step backwards. When you enter an expression in an interactive session, Python prints its value on the following line.</p><p><strong>Interpreters</strong>. Evaluating compound expressions requires a precise procedure that interprets code in a predictable way. A program that implements such a procedure, evaluating compound expressions, is called an interpreter. The design and implementation of interpreters is the primary topic of Chapter 3.</p><p>When compared with other computer programs, interpreters for programming languages are unique in their generality. Python was not designed with Shakespeare in mind. However, its great flexibility allowed us to process a large amount of text with only a few statements and expressions.</p><p>In the end, we will find that all of these core concepts are closely related: functions are objects, objects are functions, and interpreters are instances of both. However, developing a clear understanding of each of these concepts and their role in organizing code is critical to mastering the art of programming.</p><h3 id="1-1-5-Errors"><a href="#1-1-5-Errors" class="headerlink" title="1.1.5  Errors"></a>1.1.5  Errors</h3><p>Python is waiting for your command. You are encouraged to experiment with the language, even though you may not yet know its full vocabulary and structure. However, be prepared for errors. While computers are tremendously fast and flexible, they are also extremely rigid. The nature of computers is described in <a href="http://web.stanford.edu/class/cs101/code-1-introduction.html">Stanford’s introductory course</a> as</p><blockquote><p>The fundamental equation of computers is:</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">computer</span> = powerful + stupid</code></pre></div><p>Computers are very powerful, looking at volumes of data very quickly. Computers can perform billions of operations per second, where each operation is pretty simple.</p><p>Computers are also shockingly stupid and fragile. The operations that they can do are extremely rigid, simple, and mechanical. The computer lacks anything like real insight … it’s nothing like the HAL 9000 from the movies. If nothing else, you should not be intimidated by the computer as if it’s some sort of brain. It’s very mechanical underneath it all.</p><p>Programming is about a person using their real insight to build something useful, constructed out of these teeny, simple little operations that the computer can do.</p><p>—Francisco Cai and Nick Parlante, Stanford CS101</p></blockquote><p>The rigidity of computers will immediately become apparent as you experiment with the Python interpreter: even the smallest spelling and formatting changes will cause unexpected output and errors.</p><p>Learning to interpret errors and diagnose the cause of unexpected errors is called <em>debugging</em>. Some guiding principles of debugging are:</p><ol><li><strong>Test incrementally</strong>: Every well-written program is composed of small, modular components that can be tested individually. Try out everything you write as soon as possible to identify problems early and gain confidence in your components.</li><li><strong>Isolate errors</strong>: An error in the output of a statement can typically be attributed to a particular modular component. When trying to diagnose a problem, trace the error to the smallest fragment of code you can before trying to correct it.</li><li><strong>Check your assumptions</strong>: Interpreters do carry out your instructions to the letter — no more and no less. Their output is unexpected when the behavior of some code does not match what the programmer believes (or assumes) that behavior to be. Know your assumptions, then focus your debugging effort on verifying that your assumptions actually hold.</li><li><strong>Consult others</strong>: You are not alone! If you don’t understand an error message, ask a friend, instructor, or search engine. If you have isolated an error, but can’t figure out how to correct it, ask someone else to take a look. A lot of valuable programming knowledge is shared in the process of group problem solving.</li></ol><p>Incremental testing, modular design, precise assumptions, and teamwork are themes that persist throughout this text. Hopefully, they will also persist throughout your computer science career.</p><h2 id="1-2-Elements-of-Programming"><a href="#1-2-Elements-of-Programming" class="headerlink" title="1.2  Elements of Programming"></a>1.2  Elements of Programming</h2><p>A programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about computational processes. Programs serve to communicate those ideas among the members of a programming community. Thus, programs must be written for people to read, and only incidentally for machines to execute.</p><p>When we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three such mechanisms:</p><ul><li><strong>primitive expressions and statements</strong>, which represent the simplest building blocks that the language provides,</li><li><strong>means of combination</strong>, by which compound elements are built from simpler ones, and</li><li><strong>means of abstraction</strong>, by which compound elements can be named and manipulated as units.</li></ul><p>In programming, we deal with two kinds of elements: functions and data. (Soon we will discover that they are really not so distinct.) Informally, data is stuff that we want to manipulate, and functions describe the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive functions, as well as have some methods for combining and abstracting both functions and data.</p><h3 id="1-2-1-Expressions"><a href="#1-2-1-Expressions" class="headerlink" title="1.2.1  Expressions"></a>1.2.1  Expressions</h3><p>Having experimented with the full Python interpreter in the previous section, we now start anew, methodically developing the Python language element by element. Be patient if the examples seem simplistic — more exciting material is soon to come.</p><p>We begin with primitive expressions. One kind of primitive expression is a number. More precisely, the expression that you type consists of the numerals that represent the number in base 10.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">42</span></span>42</code></pre></div><p>Expressions representing numbers may be combined with mathematical operators to form a compound expression, which the interpreter will evaluate:</p><div class="code-wrapper"><pre><code class="hljs awk">&gt;&gt;&gt; -<span class="hljs-number">1</span> - -<span class="hljs-number">1</span><span class="hljs-number">0</span>&gt;&gt;&gt; <span class="hljs-number">1</span><span class="hljs-regexp">/2 + 1/</span><span class="hljs-number">4</span> + <span class="hljs-number">1</span><span class="hljs-regexp">/8 + 1/</span><span class="hljs-number">16</span> + <span class="hljs-number">1</span><span class="hljs-regexp">/32 + 1/</span><span class="hljs-number">64</span> + <span class="hljs-number">1</span>/<span class="hljs-number">128</span><span class="hljs-number">0.9921875</span></code></pre></div><p>These mathematical expressions use <em>infix</em> notation, where the <em>operator</em> (e.g., <code>+</code>, <code>-</code>, <code>*</code>, or <code>/</code>) appears in between the <em>operands</em> (numbers). Python includes many ways to form compound expressions. Rather than attempt to enumerate them all immediately, we will introduce new expression forms as we go, along with the language features that they support.</p><h3 id="1-2-2-Call-Expressions"><a href="#1-2-2-Call-Expressions" class="headerlink" title="1.2.2  Call Expressions"></a>1.2.2  Call Expressions</h3><p>The most important kind of compound expression is a <em>call expression</em>, which applies a function to some arguments. Recall from algebra that the mathematical notion of a function is a mapping from some input arguments to an output value. For instance, the <code>max</code> function maps its inputs to a single output, which is the largest of the inputs. The way in which Python expresses function application is the same as in conventional mathematics.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">max</span>(<span class="hljs-number">7.5</span>, <span class="hljs-number">9.5</span>)</span>9.5</code></pre></div><p>This call expression has subexpressions: the <em>operator</em> is an expression that precedes parentheses, which enclose a comma-delimited list of <em>operand</em> expressions.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191721562.png"></p><p>The operator specifies a <em>function</em>. When this call expression is evaluated, we say that the function <code>max</code> is <em>called</em> with <em>arguments</em> 7.5 and 9.5, and <em>returns</em> a <em>value</em> of 9.5.</p><p>The order of the arguments in a call expression matters. For instance, the function <code>pow</code> raises its first argument to the power of its second argument.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">pow</span>(<span class="hljs-number">100</span>, <span class="hljs-number">2</span>)</span>10000<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>)</span>1267650600228229401496703205376</code></pre></div><p>Function notation has three principal advantages over the mathematical convention of infix notation. First, functions may take an arbitrary number of arguments:</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">4</span>)</span>3</code></pre></div><p>No ambiguity can arise, because the function name always precedes its arguments.</p><p>Second, function notation extends in a straightforward way to <em>nested</em> expressions, where the elements are themselves compound expressions. In nested call expressions, unlike compound infix expressions, the structure of the nesting is entirely explicit in the parentheses.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">max</span>(<span class="hljs-built_in">min</span>(<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>), <span class="hljs-built_in">min</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), -<span class="hljs-number">4</span>))</span>-2</code></pre></div><p>There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Python interpreter can evaluate. However, humans quickly get confused by multi-level nesting. An important role for you as a programmer is to structure expressions so that they remain interpretable by yourself, your programming partners, and other people who may read your expressions in the future.</p><p>Third, mathematical notation has a great variety of forms: multiplication appears between terms, exponents appear as superscripts, division as a horizontal bar, and a square root as a roof with slanted siding. Some of this notation is very hard to type! However, all of this complexity can be unified via the notation of call expressions. While Python supports common mathematical operators using infix notation (like <code>+</code> and <code>-</code>), any operator can be expressed as a function with a name.</p><h3 id="1-2-3-Importing-Library-Functions"><a href="#1-2-3-Importing-Library-Functions" class="headerlink" title="1.2.3  Importing Library Functions"></a>1.2.3  Importing Library Functions</h3><p>Python defines a very large number of functions, including the operator functions mentioned in the preceding section, but does not make all of their names available by default. Instead, it organizes the functions and other quantities that it knows about into modules, which together comprise the Python Library. To use these elements, one imports them. For example, the <code>math</code> module provides a variety of familiar mathematical functions:</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">sqrt(<span class="hljs-number">256</span>)</span>16.0</code></pre></div><p>and the <code>operator</code> module provides access to functions corresponding to infix operators:</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> add, sub, mul</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">add(<span class="hljs-number">14</span>, <span class="hljs-number">28</span>)</span>42<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">sub(<span class="hljs-number">100</span>, mul(<span class="hljs-number">7</span>, add(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>)))</span>16</code></pre></div><p>An <code>import</code> statement designates a module name (e.g., <code>operator</code> or <code>math</code>), and then lists the named attributes of that module to import (e.g., <code>sqrt</code>). Once a function is imported, it can be called multiple times.</p><p>There is no difference between using these operator functions (e.g., <code>add</code>) and the operator symbols themselves (e.g., <code>+</code>). Conventionally, most programmers use symbols and infix notation to express simple arithmetic.</p><p>The <a href="http://docs.python.org/py3k/library/index.html">Python 3 Library Docs</a> list the functions defined by each module, such as the <a href="http://docs.python.org/py3k/library/math.html">math module</a>. However, this documentation is written for developers who know the whole language well. For now, you may find that experimenting with a function tells you more about its behavior than reading the documentation. As you become familiar with the Python language and vocabulary, this documentation will become a valuable reference source.</p><h3 id="1-2-4-Names-and-the-Environment"><a href="#1-2-4-Names-and-the-Environment" class="headerlink" title="1.2.4  Names and the Environment"></a>1.2.4  Names and the Environment</h3><p>A critical aspect of a programming language is the means it provides for using names to refer to computational objects. If a value has been given a name, we say that the name <em>binds</em> to the value.</p><p>In Python, we can establish new bindings using the assignment statement, which contains a name to the left of <code>=</code> and a value to the right:</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">radius = <span class="hljs-number">10</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">radius</span>10<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">2</span> * radius</span>20</code></pre></div><p>Names are also bound via <code>import</code> statements.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">pi * <span class="hljs-number">71</span> / <span class="hljs-number">223</span></span>1.0002380197528042</code></pre></div><p>The <code>=</code> symbol is called the <em>assignment</em> operator in Python (and many other languages). Assignment is our simplest means of <em>abstraction</em>, for it allows us to use simple names to refer to the results of compound operations, such as the <code>area</code> computed above. In this way, complex programs are constructed by building, step by step, computational objects of increasing complexity.</p><p>The possibility of binding names to values and later retrieving those values by name means that the interpreter must maintain some sort of memory that keeps track of the names, values, and bindings. This memory is called an <em>environment</em>.</p><p>Names can also be bound to functions. For instance, the name <code>max</code> is bound to the max function we have been using. Functions, unlike numbers, are tricky to render as text, so Python prints an identifying description instead, when asked to describe a function:</p><div class="code-wrapper"><pre><code class="hljs fortran">&gt;&gt;&gt; <span class="hljs-built_in">max</span>&lt;built-<span class="hljs-keyword">in</span> <span class="hljs-function"><span class="hljs-keyword">function</span></span> <span class="hljs-built_in">max</span>&gt;</code></pre></div><p>We can use assignment statements to give new names to existing functions.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">f = <span class="hljs-built_in">max</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">f</span>&lt;built-in function max&gt;<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">f(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span>4</code></pre></div><p>And successive assignment statements can rebind a name to a new value.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">f = <span class="hljs-number">2</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">f</span>2</code></pre></div><p>In Python, names are often called <em>variable names</em> or <em>variables</em> because they can be bound to different values in the course of executing a program. When a name is bound to a new value through assignment, it is no longer bound to any previous value. One can even bind built-in names to new values.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">max</span> = <span class="hljs-number">5</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">max</span></span>5</code></pre></div><p>After assigning <code>max</code> to 5, the name <code>max</code> is no longer bound to a function, and so attempting to call <code>max(2, 3, 4)</code> will cause an error.</p><p>When executing an assignment statement, Python evaluates the expression to the right of <code>=</code> before changing the binding to the name on the left. Therefore, one can refer to a name in right-side expression, even if it is the name to be bound by the assignment statement.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x = <span class="hljs-number">2</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x = x + <span class="hljs-number">1</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x</span>3</code></pre></div><p>We can also assign multiple values to multiple names in a single statement, where names on the left of <code>=</code> and expressions on the right of <code>=</code> are separated by commas.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">area, circumference = pi * radius * radius, <span class="hljs-number">2</span> * pi * radius</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">area</span>314.1592653589793<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">circumference</span>62.83185307179586</code></pre></div><p>Changing the value of one name does not affect other names. Below, even though the name <code>area</code> was bound to a value defined originally in terms of <code>radius</code>, the value of <code>area</code> has not changed. Updating the value of <code>area</code> requires another assignment statement.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">radius = <span class="hljs-number">11</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">area</span>314.1592653589793<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">area = pi * radius * radius</span>380.132711084365</code></pre></div><p>With multiple assignment, <em>all</em> expressions to the right of <code>=</code> are evaluated before <em>any</em> names to the left are bound to those values. As a result of this rule, swapping the values bound to two names can be performed in a single statement.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x, y = <span class="hljs-number">3</span>, <span class="hljs-number">4.5</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">y, x = x, y</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x</span>4.5<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">y</span>3</code></pre></div><h3 id="1-2-5-Evaluating-Nested-Expressions"><a href="#1-2-5-Evaluating-Nested-Expressions" class="headerlink" title="1.2.5  Evaluating Nested Expressions"></a>1.2.5  Evaluating Nested Expressions</h3><p>One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating nested call expressions, the interpreter is itself following a procedure.</p><p>To evaluate a call expression, Python will do the following:</p><ol><li>Evaluate the operator and operand subexpressions, then</li><li>Apply the function that is the value of the operator subexpression to the arguments that are the values of the operand subexpressions.</li></ol><p>Even this simple procedure illustrates some important points about processes in general. The first step dictates that in order to accomplish the evaluation process for a call expression we must first evaluate other expressions. Thus, the evaluation procedure is <em>recursive</em> in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.</p><p>For example, evaluating</p><div class="code-wrapper"><pre><code class="hljs lisp">&gt;&gt;&gt; sub(<span class="hljs-name">pow</span>(<span class="hljs-number">2</span>, add(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)), pow(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<span class="hljs-number">2016</span></code></pre></div><p>requires that this evaluation procedure be applied four times. If we draw each expression that we evaluate, we can visualize the hierarchical structure of this process.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191722041.png"></p><p>This illustration is called an <em>expression tree</em>. In computer science, trees conventionally grow from the top down. The objects at each point in a tree are called nodes; in this case, they are expressions paired with their values.</p><p>Evaluating its root, the full expression at the top, requires first evaluating the branches that are its subexpressions. The leaf expressions (that is, nodes with no branches stemming from them) represent either functions or numbers. The interior nodes have two parts: the call expression to which our evaluation rule is applied, and the result of that expression. Viewing evaluation in terms of this tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels.</p><p>Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not call expressions, but primitive expressions such as numerals (e.g., 2) and names (e.g., <code>add</code>). We take care of the primitive cases by stipulating that</p><ul><li>A numeral evaluates to the number it names,</li><li>A name evaluates to the value associated with that name in the current environment.</li></ul><p>Notice the important role of an environment in determining the meaning of the symbols in expressions. In Python, it is meaningless to speak of the value of an expression such as</p><div class="code-wrapper"><pre><code class="hljs llvm">&gt;&gt;&gt; <span class="hljs-keyword">add</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span>)</code></pre></div><p>without specifying any information about the environment that would provide a meaning for the name <code>x</code> (or even for the name <code>add</code>). Environments provide the context in which evaluation takes place, which plays an important role in our understanding of program execution.</p><p>This evaluation procedure does not suffice to evaluate all Python code, only call expressions, numerals, and names. For instance, it does not handle assignment statements. Executing</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x = <span class="hljs-number">3</span></span></code></pre></div><p>does not return a value nor evaluate a function on some arguments, since the purpose of assignment is instead to bind a name to a value. In general, statements are not evaluated but <em>executed</em>; they do not produce a value but instead make some change. Each type of expression or statement has its own evaluation or execution procedure.</p><p>A pedantic note: when we say that “a numeral evaluates to a number,” we actually mean that the Python interpreter evaluates a numeral to a number. It is the interpreter which endows meaning to the programming language. Given that the interpreter is a fixed program that always behaves consistently, we can say that numerals (and expressions) themselves evaluate to values in the context of Python programs.</p><h3 id="1-2-6-The-Non-Pure-Print-Function"><a href="#1-2-6-The-Non-Pure-Print-Function" class="headerlink" title="1.2.6  The Non-Pure Print Function"></a>1.2.6  The Non-Pure Print Function</h3><p>Throughout this text, we will distinguish between two types of functions.</p><p><strong>Pure functions.</strong> Functions have some input (their arguments) and return some output (the result of applying them). The built-in function</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">abs</span>(-<span class="hljs-number">2</span>)</span>2</code></pre></div><p>can be depicted as a small machine that takes input and produces output.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191722109.png"></p><p>The function <code>abs</code> is <em>pure</em>. Pure functions have the property that applying them has no effects beyond returning a value. Moreover, a pure function must always return the same value when called twice with the same arguments.</p><p><strong>Non-pure functions.</strong> In addition to returning a value, applying a non-pure function can generate <em>side effects</em>, which make some change to the state of the interpreter or computer. A common side effect is to generate additional output beyond the return value, using the <code>print</code> function.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span>1 2 3</code></pre></div><p>While <code>print</code> and <code>abs</code> may appear to be similar in these examples, they work in fundamentally different ways. The value that <code>print</code> returns is always <code>None</code>, a special Python value that represents nothing. The interactive Python interpreter does not automatically print the value <code>None</code>. In the case of <code>print</code>, the function itself is printing output as a side effect of being called.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191723757.png"></p><p>A nested expression of calls to <code>print</code> highlights the non-pure character of the function.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>))<span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-literal">None</span> <span class="hljs-literal">None</span></code></pre></div><p>If you find this output to be unexpected, draw an expression tree to clarify why evaluating this expression produces this peculiar output.</p><p>Be careful with <code>print</code>! The fact that it returns <code>None</code> means that it <em>should not</em> be the expression in an assignment statement.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">two = <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)</span>2<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(two)</span>None</code></pre></div><p>Pure functions are restricted in that they cannot have side effects or change behavior over time. Imposing these restrictions yields substantial benefits. First, pure functions can be composed more reliably into compound call expressions. We can see in the non-pure function example above that <code>print</code> does not return a useful result when used in an operand expression. On the other hand, we have seen that functions such as <code>max</code>, <code>pow</code> and <code>sqrt</code> can be used effectively in nested expressions.</p><p>Second, pure functions tend to be simpler to test. A list of arguments will always lead to the same return value, which can be compared to the expected return value. Testing is discussed in more detail later in this chapter.</p><p>Third, Chapter 4 will illustrate that pure functions are essential for writing <em>concurrent</em> programs, in which multiple call expressions may be evaluated simultaneously.</p><p>By contrast, Chapter 2 investigates a range of non-pure functions and describes their uses.</p><p>For these reasons, we concentrate heavily on creating and using pure functions in the remainder of this chapter. The <code>print</code> function is only used so that we can see the intermediate results of computations.</p><h2 id="1-3-Defining-New-Functions"><a href="#1-3-Defining-New-Functions" class="headerlink" title="1.3  Defining New Functions"></a>1.3  Defining New Functions</h2><p>We have identified in Python some of the elements that must appear in any powerful programming language:</p><ol><li>Numbers and arithmetic operations are <em>primitive</em> built-in data values and functions.</li><li>Nested function application provides a means of <em>combining</em> operations.</li><li>Binding names to values provides a limited means of <em>abstraction</em>.</li></ol><p>Now we will learn about <em>function definitions</em>, a much more powerful abstraction technique by which a name can be bound to compound operation, which can then be referred to as a unit.</p><p>We begin by examining how to express the idea of <em>squaring</em>. We might say, “To square something, multiply it by itself.” This is expressed in Python as</p><div class="code-wrapper"><pre><code class="hljs llvm">&gt;&gt;&gt; def square(<span class="hljs-keyword">x</span>):        return <span class="hljs-keyword">mul</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>)</code></pre></div><p>which defines a new function that has been given the name <code>square</code>. This user-defined function is not built into the interpreter. It represents the compound operation of multiplying something by itself. The <code>x</code> in this definition is called a <em>formal parameter</em>, which provides a name for the thing to be multiplied. The definition creates this user-defined function and associates it with the name <code>square</code>.</p><p><strong>How to define a function.</strong> Function definitions consist of a <code>def</code> statement that indicates a <code>&lt;name&gt;</code> and a comma-separated list of named <code>&lt;formal parameters&gt;</code>, then a <code>return</code> statement, called the function body, that specifies the <code>&lt;return expression&gt;</code> of the function, which is an expression to be evaluated whenever the function is applied:</p><div class="code-wrapper"><pre><code class="hljs kotlin">def &lt;name&gt;(&lt;formal parameters&gt;):    <span class="hljs-keyword">return</span> &lt;<span class="hljs-keyword">return</span> expression&gt;</code></pre></div><p>The second line <em>must</em> be indented — most programmers use four spaces to indent. The return expression is not evaluated right away; it is stored as part of the newly defined function and evaluated only when the function is eventually applied.</p><p>Having defined <code>square</code>, we can apply it with a call expression:</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">square(<span class="hljs-number">21</span>)</span>441<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">square(add(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))</span>49<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">square(square(<span class="hljs-number">3</span>))</span>81</code></pre></div><p>We can also use <code>square</code> as a building block in defining other functions. For example, we can easily define a function <code>sum_squares</code> that, given any two numbers as arguments, returns the sum of their squares:</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_squares</span>(<span class="hljs-params">x, y</span>):</span>        return add(square(x), square(y))<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">sum_squares(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span>25</code></pre></div><p>User-defined functions are used in exactly the same way as built-in functions. Indeed, one cannot tell from the definition of <code>sum_squares</code> whether <code>square</code> is built into the interpreter, imported from a module, or defined by the user.</p><p>Both <code>def</code> statements and assignment statements bind names to values, and any existing bindings are lost. For example, <code>g</code> below first refers to a function of no arguments, then a number, and then a different function of two arguments.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>():</span>        return 1<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">g()</span>1<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">g = <span class="hljs-number">2</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">g</span>2<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">h, i</span>):</span>        return h + i<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">g(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span>3</code></pre></div><h3 id="1-3-1-Environments"><a href="#1-3-1-Environments" class="headerlink" title="1.3.1  Environments"></a>1.3.1  Environments</h3><p>Our subset of Python is now complex enough that the meaning of programs is non-obvious. What if a formal parameter has the same name as a built-in function? Can two functions share names without confusion? To resolve such questions, we must describe environments in more detail.</p><p>An environment in which an expression is evaluated consists of a sequence of <em>frames</em>, depicted as boxes. Each frame contains <em>bindings</em>, each of which associates a name with its corresponding value. There is a single <em>global</em> frame. Assignment and import statements add entries to the first frame of the current environment. So far, our environment consists only of the global frame.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191735278.png"></p><p>This <em>environment diagram</em> shows the bindings of the current environment, along with the values to which names are bound. The environment diagrams in this text are interactive: you can step through the lines of the small program on the left to see the state of the environment evolve on the right. You can also click on the “Edit code in Online Python Tutor” link to load the example into the <a href="http://composingprograms.com/tutor.html">Online Python Tutor</a>, a tool created by <a href="http://www.pgbovine.net/">Philip Guo</a> for generating these environment diagrams. You are encouraged to create examples yourself and study the resulting environment diagrams.</p><p>Functions appear in environment diagrams as well. An <code>import</code> statement binds a name to a built-in function. A <code>def</code> statement binds a name to a user-defined function created by the definition. The resulting environment after importing <code>mul</code> and defining <code>square</code> appears below:</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191755574.png"></p><p>Each function is a line that starts with <code>func</code>, followed by the function name and formal parameters. Built-in functions such as <code>mul</code> do not have formal parameter names, and so <code>...</code> is always used instead.</p><p>The name of a function is repeated twice, once in the frame and again as part of the function itself. The name appearing in the function is called the <em>intrinsic name</em>. The name in a frame is a <em>bound name</em>. There is a difference between the two: different names may refer to the same function, but that function itself has only one intrinsic name.</p><p>The name bound to a function in a frame is the one used during evaluation. The intrinsic name of a function does not play a role in evaluation. Step through the example below using the <em>Forward</em> button to see that once the name <code>max</code> is bound to the value 3, it can no longer be used as a function.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191809648.png"></p><p>The error message <code>TypeError: &#39;int&#39; object is not callable</code> is reporting that the name <code>max</code> (currently bound to the number 3) is an integer and not a function. Therefore, it cannot be used as the operator in a call expression.</p><p><strong>Function Signatures.</strong> Functions differ in the number of arguments that they are allowed to take. To track these requirements, we draw each function in a way that shows the function name and its formal parameters. The user-defined function <code>square</code> takes only <code>x</code>; providing more or fewer arguments will result in an error. A description of the formal parameters of a function is called the function’s signature.</p><p>The function <code>max</code> can take an arbitrary number of arguments. It is rendered as <code>max(...)</code>. Regardless of the number of arguments taken, all built-in functions will be rendered as <code>&lt;name&gt;(...)</code>, because these primitive functions were never explicitly defined.</p><h3 id="1-3-2-Calling-User-Defined-Functions"><a href="#1-3-2-Calling-User-Defined-Functions" class="headerlink" title="1.3.2  Calling User-Defined Functions"></a>1.3.2  Calling User-Defined Functions</h3><p>To evaluate a call expression whose operator names a user-defined function, the Python interpreter follows a computational process. As with any call expression, the interpreter evaluates the operator and operand expressions, and then applies the named function to the resulting arguments.</p><p>Applying a user-defined function introduces a second <em>local</em> frame, which is only accessible to that function. To apply a user-defined function to some arguments:</p><ol><li>Bind the arguments to the names of the function’s formal parameters in a new <em>local</em> frame.</li><li>Execute the body of the function in the environment that starts with this frame.</li></ol><p>The environment in which the body is evaluated consists of two frames: first the local frame that contains formal parameter bindings, then the global frame that contains everything else. Each instance of a function application has its own independent local frame.</p><p>To illustrate an example in detail, several steps of the environment diagram for the same example are depicted below. After executing the first import statement, only the name <code>mul</code> is bound in the global frame.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191809993.png"></p><p>First, the definition statement for the function <code>square</code> is executed. Notice that the entire <code>def</code> statement is processed in a single step. The body of a function is not executed until the function is called (not when it is defined).</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191809942.png"></p><p>Next, The <code>square</code> function is called with the argument <code>-2</code>, and so a new frame is created with the formal parameter <code>x</code> bound to the value <code>-2</code>.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191810817.png"></p><p>Then, the name <code>x</code> is looked up in the current environment, which consists of the two frames shown. In both occurrences, <code>x</code> evaluates to <code>-2</code>, and so the <code>square</code> function returns 4.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191810068.png"></p><p>The “Return value” in the <code>square()</code> frame is not a name binding; instead it indicates the value returned by the function call that created the frame.</p><p>Even in this simple example, two different environments are used. The top-level expression <code>square(-2)</code> is evaluated in the global environment, while the return expression <code>mul(x, x)</code> is evaluated in the environment created for by calling <code>square</code>. Both <code>x</code> and <code>mul</code> are bound in this environment, but in different frames.</p><p>The order of frames in an environment affects the value returned by looking up a name in an expression. We stated previously that a name is evaluated to the value associated with that name in the current environment. We can now be more precise:</p><p><strong>Name Evaluation.</strong> A name evaluates to the value bound to that name in the earliest frame of the current environment in which that name is found.</p><p>Our conceptual framework of environments, names, and functions constitutes a <em>model of evaluation</em>; while some mechanical details are still unspecified (e.g., how a binding is implemented), our model does precisely and correctly describe how the interpreter evaluates call expressions. In Chapter 3 we will see how this model can serve as a blueprint for implementing a working interpreter for a programming language.</p><h3 id="1-3-3-Example-Calling-a-User-Defined-Function"><a href="#1-3-3-Example-Calling-a-User-Defined-Function" class="headerlink" title="1.3.3  Example: Calling a User-Defined Function"></a>1.3.3  Example: Calling a User-Defined Function</h3><p>Let us again consider our two simple function definitions and illustrate the process that evaluates a call expression for a user-defined function.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191811298.png"></p><p>Python first evaluates the name <code>sum_squares</code>, which is bound to a user-defined function in the global frame. The primitive numeric expressions 5 and 12 evaluate to the numbers they represent.</p><p>Next, Python applies <code>sum_squares</code>, which introduces a local frame that binds x to 5 and y to 12.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191811729.png"></p><p>The body of <code>sum_squares</code> contains this call expression:</p><div class="code-wrapper"><pre><code class="hljs markdown">  add     (  square(x)  ,  square(y)  )<span class="hljs-strong">____</span><span class="hljs-strong">____</span>     <span class="hljs-strong">____</span><span class="hljs-strong">____</span>_     <span class="hljs-strong">____</span><span class="hljs-strong">____</span>_operator     operand 0     operand 1</code></pre></div><p>All three subexpressions are evaluated in the current environment, which begins with the frame labeled <code>sum_squares()</code>. The operator subexpression <code>add</code> is a name found in the global frame, bound to the built-in function for addition. The two operand subexpressions must be evaluated in turn, before addition is applied. Both operands are evaluated in the current environment beginning with the frame labeled <code>sum_squares</code>.</p><p>In <code>operand 0</code>, <code>square</code> names a user-defined function in the global frame, while <code>x</code> names the number 5 in the local frame. Python applies <code>square</code> to 5 by introducing yet another local frame that binds x to 5.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191812314.png"></p><p>Using this environment, the expression <code>mul(x, x)</code> evaluates to 25.</p><p>Our evaluation procedure now turns to <code>operand 1</code>, for which <code>y</code> names the number 12. Python evaluates the body of <code>square</code> again, this time introducing yet another local frame that binds <code>x</code> to 12. Hence, <code>operand 1</code> evaluates to 144.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191812403.png"></p><p>Finally, applying addition to the arguments 25 and 144 yields a final return value for <code>sum_squares</code>: 169.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191812870.png"></p><p>This example illustrates many of the fundamental ideas we have developed so far. Names are bound to values, which are distributed across many independent local frames, along with a single global frame that contains shared names. A new local frame is introduced every time a function is called, even if the same function is called twice.</p><p>All of this machinery exists to ensure that names resolve to the correct values at the correct times during program execution. This example illustrates why our model requires the complexity that we have introduced. All three local frames contain a binding for the name <code>x</code>, but that name is bound to different values in different frames. Local frames keep these names separate.</p><h3 id="1-3-4-Local-Names"><a href="#1-3-4-Local-Names" class="headerlink" title="1.3.4  Local Names"></a>1.3.4  Local Names</h3><p>One detail of a function’s implementation that should not affect the function’s behavior is the implementer’s choice of names for the function’s formal parameters. Thus, the following functions should provide the same behavior:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):        <span class="hljs-keyword">return</span> mul(x, x)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">y</span>):        <span class="hljs-keyword">return</span> mul(y, y)</code></pre></div><p>This principle – that the meaning of a function should be independent of the parameter names chosen by its author – has important consequences for programming languages. The simplest consequence is that the parameter names of a function must remain local to the body of the function.</p><p>If the parameters were not local to the bodies of their respective functions, then the parameter <code>x</code> in <code>square</code> could be confused with the parameter <code>x</code> in <code>sum_squares</code>. Critically, this is not the case: the binding for <code>x</code> in different local frames are unrelated. The model of computation is carefully designed to ensure this independence.</p><p>We say that the <em>scope</em> of a local name is limited to the body of the user-defined function that defines it. When a name is no longer accessible, it is out of scope. This scoping behavior isn’t a new fact about our model; it is a consequence of the way environments work.</p><h3 id="1-3-5-Choosing-Names"><a href="#1-3-5-Choosing-Names" class="headerlink" title="1.3.5  Choosing Names"></a>1.3.5  Choosing Names</h3><p>The interchangeability of names does not imply that formal parameter names do not matter at all. On the contrary, well-chosen function and parameter names are essential for the human interpretability of function definitions!</p><p>The following guidelines are adapted from the <a href="http://www.python.org/dev/peps/pep-0008">style guide for Python code</a>, which serves as a guide for all (non-rebellious) Python programmers. A shared set of conventions smooths communication among members of a developer community. As a side effect of following these conventions, you will find that your code becomes more internally consistent.</p><ol><li>Function names are lowercase, with words separated by underscores. Descriptive names are encouraged.</li><li>Function names typically evoke operations applied to arguments by the interpreter (e.g., <code>print</code>, <code>add</code>, <code>square</code>) or the name of the quantity that results (e.g., <code>max</code>, <code>abs</code>, <code>sum</code>).</li><li>Parameter names are lowercase, with words separated by underscores. Single-word names are preferred.</li><li>Parameter names should evoke the role of the parameter in the function, not just the kind of argument that is allowed.</li><li>Single letter parameter names are acceptable when their role is obvious, but avoid “l” (lowercase ell), “O” (capital oh), or “I” (capital i) to avoid confusion with numerals.</li></ol><p>There are many exceptions to these guidelines, even in the Python standard library. Like the vocabulary of the English language, Python has inherited words from a variety of contributors, and the result is not always consistent.</p><h3 id="1-3-6-Functions-as-Abstractions"><a href="#1-3-6-Functions-as-Abstractions" class="headerlink" title="1.3.6  Functions as Abstractions"></a>1.3.6  Functions as Abstractions</h3><p>Though it is very simple, <code>sum_squares</code> exemplifies the most powerful property of user-defined functions. The function <code>sum_squares</code> is defined in terms of the function <code>square</code>, but relies only on the relationship that <code>square</code> defines between its input arguments and its output values.</p><p>We can write <code>sum_squares</code> without concerning ourselves with <em>how</em> to square a number. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as <code>sum_squares</code> is concerned, <code>square</code> is not a particular function body, but rather an abstraction of a function, a so-called functional abstraction. At this level of abstraction, any function that computes the square is equally good.</p><p>Thus, considering only the values they return, the following two functions for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.</p><div class="code-wrapper"><pre><code class="hljs llvm">&gt;&gt;&gt; def square(<span class="hljs-keyword">x</span>):        return <span class="hljs-keyword">mul</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>)&gt;&gt;&gt; def square(<span class="hljs-keyword">x</span>):        return <span class="hljs-keyword">mul</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">-1</span>) + <span class="hljs-keyword">x</span></code></pre></div><p>In other words, a function definition should be able to suppress details. The users of the function may not have written the function themselves, but may have obtained it from another programmer as a “black box”. A programmer should not need to know how the function is implemented in order to use it. The Python Library has this property. Many developers use the functions defined there, but few ever inspect their implementation.</p><p><strong>Aspects of a functional abstraction.</strong> To master the use of a functional abstraction, it is often useful to consider its three core attributes. The <em>domain</em> of a function is the set of arguments it can take. The <em>range</em> of a function is the set of values it can return. The <em>intent</em> of a function is the relationship it computes between inputs and output (as well as any side effects it might generate). Understanding functional abstractions via their domain, range, and intent is critical to using them correctly in a complex program.</p><p>For example, any <code>square</code> function that we use to implement <code>sum_squares</code> should have these attributes:</p><ul><li>The <em>domain</em> is any single real number.</li><li>The <em>range</em> is any non-negative real number.</li><li>The <em>intent</em> is that the output is the square of the input.</li></ul><p>These attributes do not specify how the intent is carried out; that detail is abstracted away.</p><h3 id="1-3-7-Operators"><a href="#1-3-7-Operators" class="headerlink" title="1.3.7  Operators"></a>1.3.7  Operators</h3><p>Mathematical operators (such as <code>+</code> and <code>-</code>) provided our first example of a method of combination, but we have yet to define an evaluation procedure for expressions that contain these operators.</p><p>Python expressions with infix operators each have their own evaluation procedures, but you can often think of them as short-hand for call expressions. When you see</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">2</span> + <span class="hljs-number">3</span></span>5</code></pre></div><p>simply consider it to be short-hand for</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span>5</code></pre></div><p>Infix notation can be nested, just like call expressions. Python applies the normal mathematical rules of operator precedence, which dictate how to interpret a compound expression with multiple operators.</p><div class="code-wrapper"><pre><code class="hljs tap">&gt;&gt;&gt;<span class="hljs-number"> 2 </span>+<span class="hljs-number"> 3 </span>*<span class="hljs-number"> 4 </span>+ 519</code></pre></div><p>evaluates to the same result as</p><div class="code-wrapper"><pre><code class="hljs routeros">&gt;&gt;&gt; <span class="hljs-built_in">add</span>(<span class="hljs-built_in">add</span>(2, mul(3, 4)), 5)19</code></pre></div><p>The nesting in the call expression is more explicit than the operator version, but also harder to read. Python also allows subexpression grouping with parentheses, to override the normal precedence rules or make the nested structure of an expression more explicit.</p><div class="code-wrapper"><pre><code class="hljs gcode">&gt;&gt;&gt; <span class="hljs-comment">(2 + 3)</span> * <span class="hljs-comment">(4 + 5)</span><span class="hljs-number">45</span></code></pre></div><p>evaluates to the same result as</p><div class="code-wrapper"><pre><code class="hljs routeros">&gt;&gt;&gt; mul(<span class="hljs-built_in">add</span>(2, 3), <span class="hljs-built_in">add</span>(4, 5))45</code></pre></div><p>When it comes to division, Python provides two infix operators: <code>/</code> and <code>//</code>. The former is normal division, so that it results in a <em>floating point</em>, or decimal value, even if the divisor evenly divides the dividend:</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">5</span> / <span class="hljs-number">4</span></span>1.25<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">8</span> / <span class="hljs-number">4</span></span>2.0</code></pre></div><p>The <code>//</code> operator, on the other hand, rounds the result down to an integer:</p><div class="code-wrapper"><pre><code class="hljs awk">&gt;&gt;&gt; <span class="hljs-number">5</span> <span class="hljs-regexp">//</span> <span class="hljs-number">4</span><span class="hljs-number">1</span>&gt;&gt;&gt; -<span class="hljs-number">5</span> <span class="hljs-regexp">//</span> <span class="hljs-number">4</span>-<span class="hljs-number">2</span></code></pre></div><p>These two operators are shorthand for the <code>truediv</code> and <code>floordiv</code> functions.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> truediv, floordiv</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">truediv(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>)</span>1.25<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">floordiv(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>)</span>1</code></pre></div><p>You should feel free to use infix operators and parentheses in your programs. Idiomatic Python prefers operators over call expressions for simple mathematical operations.</p><h2 id="1-4-Designing-Functions"><a href="#1-4-Designing-Functions" class="headerlink" title="1.4  Designing Functions"></a>1.4  Designing Functions</h2><p>Functions are an essential ingredient of all programs, large and small, and serve as our primary medium to express computational processes in a programming language. So far, we have discussed the formal properties of functions and how they are applied. We now turn to the topic of what makes a good function. Fundamentally, the qualities of good functions all reinforce the idea that functions are abstractions.</p><ul><li>Each function should have exactly one job. That job should be identifiable with a short name and characterizable in a single line of text. Functions that perform multiple jobs in sequence should be divided into multiple functions.</li><li><em>Don’t repeat yourself</em> is a central tenet of software engineering. The so-called DRY principle states that multiple fragments of code should not describe redundant logic. Instead, that logic should be implemented once, given a name, and applied multiple times. If you find yourself copying and pasting a block of code, you have probably found an opportunity for functional abstraction.</li><li>Functions should be defined generally. Squaring is not in the Python Library precisely because it is a special case of the <code>pow</code> function, which raises numbers to arbitrary powers.</li></ul><p>These guidelines improve the readability of code, reduce the number of errors, and often minimize the total amount of code written. Decomposing a complex task into concise functions is a skill that takes experience to master. Fortunately, Python provides several features to support your efforts.</p><h3 id="1-4-1-Documentation"><a href="#1-4-1-Documentation" class="headerlink" title="1.4.1  Documentation"></a>1.4.1  Documentation</h3><p>A function definition will often include documentation describing the function, called a <em>docstring</em>, which must be indented along with the function body. Docstrings are conventionally triple quoted. The first line describes the job of the function in one line. The following lines can describe arguments and clarify the behavior of the function:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">pressure</span>(<span class="hljs-params">v, t, n</span>):        <span class="hljs-string">&quot;&quot;&quot;Compute the pressure in pascals of an ideal gas.</span><span class="hljs-string"></span><span class="hljs-string">        Applies the ideal gas law: http://en.wikipedia.org/wiki/Ideal_gas_law</span><span class="hljs-string"></span><span class="hljs-string">        v -- volume of gas, in cubic meters</span><span class="hljs-string">        t -- absolute temperature in degrees kelvin</span><span class="hljs-string">        n -- particles of gas</span><span class="hljs-string">        &quot;&quot;&quot;</span>        k = <span class="hljs-number">1.38e-23</span>  <span class="hljs-comment"># Boltzmann&#x27;s constant</span>        <span class="hljs-keyword">return</span> n * k * t / v</code></pre></div><p>When you call <code>help</code> with the name of a function as an argument, you see its docstring (type <code>q</code> to quit Python help).</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">help</span>(pressure)</span></code></pre></div><p>When writing Python programs, include docstrings for all but the simplest functions. Remember, code is written only once, but often read many times. The Python docs include <a href="http://www.python.org/dev/peps/pep-0257/">docstring guidelines</a> that maintain consistency across different Python projects.</p><p><strong>Comments</strong>. Comments in Python can be attached to the end of a line following the <code>#</code> symbol. For example, the comment <code>Boltzmann&#39;s constant</code> above describes <code>k</code>. These comments don’t ever appear in Python’s <code>help</code>, and they are ignored by the interpreter. They exist for humans alone.</p><h3 id="1-4-2-Default-Argument-Values"><a href="#1-4-2-Default-Argument-Values" class="headerlink" title="1.4.2  Default Argument Values"></a>1.4.2  Default Argument Values</h3><p>A consequence of defining general functions is the introduction of additional arguments. Functions with many arguments can be awkward to call and difficult to read.</p><p>In Python, we can provide default values for the arguments of a function. When calling that function, arguments with default values are optional. If they are not provided, then the default value is bound to the formal parameter name instead. For instance, if an application commonly computes pressure for one mole of particles, this value can be provided as a default:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">pressure</span>(<span class="hljs-params">v, t, n=<span class="hljs-number">6.022e23</span></span>):        <span class="hljs-string">&quot;&quot;&quot;Compute the pressure in pascals of an ideal gas.</span><span class="hljs-string"></span><span class="hljs-string">        v -- volume of gas, in cubic meters</span><span class="hljs-string">        t -- absolute temperature in degrees kelvin</span><span class="hljs-string">        n -- particles of gas (default: one mole)</span><span class="hljs-string">        &quot;&quot;&quot;</span>        k = <span class="hljs-number">1.38e-23</span>  <span class="hljs-comment"># Boltzmann&#x27;s constant</span>        <span class="hljs-keyword">return</span> n * k * t / v</code></pre></div><p>The <code>=</code> symbol means two different things in this example, depending on the context in which it is used. In the <code>def</code> statement header, <code>=</code> does not perform assignment, but instead indicates a default value to use when the <code>pressure</code> function is called. By contrast, the assignment statement to <code>k</code> in the body of the function binds the name <code>k</code> to an approximation of Boltzmann’s constant.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">pressure(<span class="hljs-number">1</span>, <span class="hljs-number">273.15</span>)</span>2269.974834<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">pressure(<span class="hljs-number">1</span>, <span class="hljs-number">273.15</span>, <span class="hljs-number">3</span> * <span class="hljs-number">6.022e23</span>)</span>6809.924502</code></pre></div><p>The <code>pressure</code> function is defined to take three arguments, but only two are provided in the first call expression above. In this case, the value for <code>n</code> is taken from the <code>def</code> statement default. If a third argument is provided, the default is ignored.</p><p>As a guideline, most data values used in a function’s body should be expressed as default values to named arguments, so that they are easy to inspect and can be changed by the function caller. Some values that never change, such as the fundamental constant <code>k</code>, can be bound in the function body or in the global frame.</p><h2 id="1-5-Control"><a href="#1-5-Control" class="headerlink" title="1.5  Control"></a>1.5  Control</h2><p>The expressive power of the functions that we can define at this point is very limited, because we have not introduced a way to make comparisons and to perform different operations depending on the result of a comparison. <em>Control statements</em> will give us this ability. They are statements that control the flow of a program’s execution based on the results of logical comparisons.</p><p>Statements differ fundamentally from the expressions that we have studied so far. They have no value. Instead of computing something, executing a control statement determines what the interpreter should do next.</p><h3 id="1-5-1-Statements"><a href="#1-5-1-Statements" class="headerlink" title="1.5.1  Statements"></a>1.5.1  Statements</h3><p>So far, we have primarily considered how to evaluate expressions. However, we have seen three kinds of statements already: assignment, <code>def</code>, and <code>return</code> statements. These lines of Python code are not themselves expressions, although they all contain expressions as components.</p><p>Rather than being evaluated, statements are <em>executed</em>. Each statement describes some change to the interpreter state, and executing a statement applies that change. As we have seen for <code>return</code> and assignment statements, executing statements can involve evaluating subexpressions contained within them.</p><p>Expressions can also be executed as statements, in which case they are evaluated, but their value is discarded. Executing a pure function has no effect, but executing a non-pure function can cause effects as a consequence of function application.</p><p>Consider, for instance,</p><div class="code-wrapper"><pre><code class="hljs llvm">&gt;&gt;&gt; def square(<span class="hljs-keyword">x</span>):        <span class="hljs-keyword">mul</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>) # Watch out! This <span class="hljs-keyword">call</span> doesn&#x27;t return a value.</code></pre></div><p>This example is valid Python, but probably not what was intended. The body of the function consists of an expression. An expression by itself is a valid statement, but the effect of the statement is that the <code>mul</code> function is called, and the result is discarded. If you want to do something with the result of an expression, you need to say so: you might store it with an assignment statement or return it with a return statement:</p><div class="code-wrapper"><pre><code class="hljs llvm">&gt;&gt;&gt; def square(<span class="hljs-keyword">x</span>):        return <span class="hljs-keyword">mul</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>)</code></pre></div><p>Sometimes it does make sense to have a function whose body is an expression, when a non-pure function like <code>print</code> is called.</p><div class="code-wrapper"><pre><code class="hljs isbl">&gt;&gt;&gt; <span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">print_square</span>(<span class="hljs-variable">x</span>):</span><span class="hljs-function">        <span class="hljs-title">print</span>(<span class="hljs-title">square</span>(<span class="hljs-variable">x</span>))</span></code></pre></div><p>At its highest level, the Python interpreter’s job is to execute programs, composed of statements. However, much of the interesting work of computation comes from evaluating expressions. Statements govern the relationship among different expressions in a program and what happens to their results.</p><h3 id="1-5-2-Compound-Statements"><a href="#1-5-2-Compound-Statements" class="headerlink" title="1.5.2  Compound Statements"></a>1.5.2  Compound Statements</h3><p>In general, Python code is a sequence of statements. A simple statement is a single line that doesn’t end in a colon. A compound statement is so called because it is composed of other statements (simple and compound). Compound statements typically span multiple lines and start with a one-line header ending in a colon, which identifies the type of statement. Together, a header and an indented suite of statements is called a clause. A compound statement consists of one or more clauses:</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>:    <span class="hljs-tag">&lt;<span class="hljs-name">statement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">statement</span>&gt;</span>    ...<span class="hljs-tag">&lt;<span class="hljs-name">separating</span> <span class="hljs-attr">header</span>&gt;</span>:    <span class="hljs-tag">&lt;<span class="hljs-name">statement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">statement</span>&gt;</span>    ......</code></pre></div><p>We can understand the statements we have already introduced in these terms.</p><ul><li>Expressions, return statements, and assignment statements are simple statements.</li><li>A <code>def</code> statement is a compound statement. The suite that follows the <code>def</code> header defines the function body.</li></ul><p>Specialized evaluation rules for each kind of header dictate when and if the statements in its suite are executed. We say that the header controls its suite. For example, in the case of <code>def</code> statements, we saw that the return expression is not evaluated immediately, but instead stored for later use when the defined function is eventually called.</p><p>We can also understand multi-line programs now.</p><ul><li>To execute a sequence of statements, execute the first statement. If that statement does not redirect control, then proceed to execute the rest of the sequence of statements, if any remain.</li></ul><p>This definition exposes the essential structure of a recursively defined <em>sequence</em>: a sequence can be decomposed into its first element and the rest of its elements. The “rest” of a sequence of statements is itself a sequence of statements! Thus, we can recursively apply this execution rule. This view of sequences as recursive data structures will appear again in later chapters.</p><p>The important consequence of this rule is that statements are executed in order, but later statements may never be reached, because of redirected control.</p><p><strong>Practical Guidance.</strong> When indenting a suite, all lines must be indented the same amount and in the same way (use spaces, not tabs). Any variation in indentation will cause an error.</p><h3 id="1-5-3-Defining-Functions-II-Local-Assignment"><a href="#1-5-3-Defining-Functions-II-Local-Assignment" class="headerlink" title="1.5.3  Defining Functions II: Local Assignment"></a>1.5.3  Defining Functions II: Local Assignment</h3><p>Originally, we stated that the body of a user-defined function consisted only of a <code>return</code> statement with a single return expression. In fact, functions can define a sequence of operations that extends beyond a single expression.</p><p>Whenever a user-defined function is applied, the sequence of clauses in the suite of its definition is executed in a local environment — an environment starting with a local frame created by calling that function. A <code>return</code> statement redirects control: the process of function application terminates whenever the first <code>return</code> statement is executed, and the value of the <code>return</code> expression is the returned value of the function being applied.</p><p>Assignment statements can appear within a function body. For instance, this function returns the absolute difference between two quantities as a percentage of the first, using a two-step calculation:</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191817447.png"></p><p>The effect of an assignment statement is to bind a name to a value in the <em>first</em> frame of the current environment. As a consequence, assignment statements within a function body cannot affect the global frame. The fact that functions can only manipulate their local environment is critical to creating <em>modular</em> programs, in which pure functions interact only via the values they take and return.</p><p>Of course, the <code>percent_difference</code> function could be written as a single expression, as shown below, but the return expression is more complex.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">percent_difference</span>(<span class="hljs-params">x, y</span>):        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span> * <span class="hljs-built_in">abs</span>(x-y) / x<span class="hljs-meta">&gt;&gt;&gt; </span>percent_difference(<span class="hljs-number">40</span>, <span class="hljs-number">50</span>)<span class="hljs-number">25.0</span></code></pre></div><p>So far, local assignment hasn’t increased the expressive power of our function definitions. It will do so, when combined with other control statements. In addition, local assignment also plays a critical role in clarifying the meaning of complex expressions by assigning names to intermediate quantities.</p><h3 id="1-5-4-Conditional-Statements"><a href="#1-5-4-Conditional-Statements" class="headerlink" title="1.5.4  Conditional Statements"></a>1.5.4  Conditional Statements</h3><p>Python has a built-in function for computing absolute values.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">abs</span>(-<span class="hljs-number">2</span>)</span>2</code></pre></div><p>We would like to be able to implement such a function ourselves, but we have no obvious way to define a function that has a comparison and a choice. We would like to express that if <code>x</code> is positive, <code>abs(x)</code> returns <code>x</code>. Furthermore, if <code>x</code> is 0, <code>abs(x)</code> returns 0. Otherwise, <code>abs(x)</code> returns <code>-x</code>. In Python, we can express this choice with a conditional statement.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191818095.png"></p><p>This implementation of <code>absolute_value</code> raises several important issues:</p><p><strong>Conditional statements</strong>. A conditional statement in Python consists of a series of headers and suites: a required <code>if</code> clause, an optional sequence of <code>elif</code> clauses, and finally an optional <code>else</code> clause:</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">if</span> <span class="hljs-symbol">&lt;expression&gt;</span>:    <span class="hljs-symbol">&lt;suite&gt;</span>elif <span class="hljs-symbol">&lt;expression&gt;</span>:    <span class="hljs-symbol">&lt;suite&gt;</span><span class="hljs-keyword">else</span>:    <span class="hljs-symbol">&lt;suite&gt;</span></code></pre></div><p>When executing a conditional statement, each clause is considered in order. The computational process of executing a conditional clause follows.</p><ol><li>Evaluate the header’s expression.</li><li>If it is a true value, execute the suite. Then, skip over all subsequent clauses in the conditional statement.</li></ol><p>If the <code>else</code> clause is reached (which only happens if all <code>if</code> and <code>elif</code> expressions evaluate to false values), its suite is executed.</p><p><strong>Boolean contexts</strong>. Above, the execution procedures mention “a false value” and “a true value.” The expressions inside the header statements of conditional blocks are said to be in <em>boolean contexts</em>: their truth values matter to control flow, but otherwise their values are not assigned or returned. Python includes several false values, including 0, <code>None</code>, and the <em>boolean</em> value <code>False</code>. All other numbers are true values. In Chapter 2, we will see that every built-in kind of data in Python has both true and false values.</p><p><strong>Boolean values</strong>. Python has two boolean values, called <code>True</code> and <code>False</code>. Boolean values represent truth values in logical expressions. The built-in comparison operations, <code>&gt;, &lt;, &gt;=, &lt;=, ==, !=</code>, return these values.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">4</span> &lt; <span class="hljs-number">2</span><span class="hljs-literal">False</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5</span> &gt;= <span class="hljs-number">5</span><span class="hljs-literal">True</span></code></pre></div><p>This second example reads “5 is greater than or equal to 5”, and corresponds to the function <code>ge</code> in the <code>operator</code> module.</p><div class="code-wrapper"><pre><code class="hljs abnf">&gt;&gt;&gt; <span class="hljs-number">0</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> -<span class="hljs-number">0</span>True</code></pre></div><p>This final example reads “0 equals -0”, and corresponds to <code>eq</code> in the <code>operator</code> module. Notice that Python distinguishes assignment (<code>=</code>) from equality comparison (<code>==</code>), a convention shared across many programming languages.</p><p><strong>Boolean operators</strong>. Three basic logical operators are also built into Python:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">False</span><span class="hljs-literal">False</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-literal">True</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">False</span><span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><span class="hljs-literal">True</span></code></pre></div><p>Logical expressions have corresponding evaluation procedures. These procedures exploit the fact that the truth value of a logical expression can sometimes be determined without evaluating all of its subexpressions, a feature called <em>short-circuiting</em>.</p><p>To evaluate the expression <code>&lt;left&gt; and &lt;right&gt;</code>:</p><ol><li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li><li>If the result is a false value <code>v</code>, then the expression evaluates to <code>v</code>.</li><li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li></ol><p>To evaluate the expression <code>&lt;left&gt; or &lt;right&gt;</code>:</p><ol><li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li><li>If the result is a true value <code>v</code>, then the expression evaluates to <code>v</code>.</li><li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li></ol><p>To evaluate the expression <code>not &lt;exp&gt;</code>:</p><ol><li>Evaluate <code>&lt;exp&gt;</code>; The value is <code>True</code> if the result is a false value, and <code>False</code> otherwise.</li></ol><p>These values, rules, and operators provide us with a way to combine the results of comparisons. Functions that perform comparisons and return boolean values typically begin with <code>is</code>, not followed by an underscore (e.g., <code>isfinite</code>, <code>isdigit</code>, <code>isinstance</code>, etc.).</p><h3 id="1-5-5-Iteration"><a href="#1-5-5-Iteration" class="headerlink" title="1.5.5  Iteration"></a>1.5.5  Iteration</h3><p>In addition to selecting which statements to execute, control statements are used to express repetition. If each line of code we wrote were only executed once, programming would be a very unproductive exercise. Only through repeated execution of statements do we unlock the full potential of computers. We have already seen one form of repetition: a function can be applied many times, although it is only defined once. Iterative control structures are another mechanism for executing the same statements many times.</p><p>Consider the sequence of Fibonacci numbers, in which each number is the sum of the preceding two:</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, ...</code></pre></div><p>Each value is constructed by repeatedly applying the sum-previous-two rule. The first and second are fixed to 0 and 1. For instance, the eighth Fibonacci number is 13.</p><p>We can use a <code>while</code> statement to enumerate <code>n</code> Fibonacci numbers. We need to track how many values we’ve created (<code>k</code>), along with the kth value (<code>curr</code>) and its predecessor (<code>pred</code>). Step through this function and observe how the Fibonacci numbers evolve one by one, bound to <code>curr</code>.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191818999.png"></p><p>Remember that commas seperate multiple names and values in an assignment statement. The line:</p><div class="code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">pred</span>, curr = curr, <span class="hljs-built_in">pred</span> + curr</code></pre></div><p>has the effect of rebinding the name <code>pred</code> to the value of <code>curr</code>, and simultanously rebinding <code>curr</code> to the value of <code>pred + curr</code>. All of the expressions to the right of <code>=</code> are evaluated before any rebinding takes place.</p><p>This order of events – evaluating everything on the right of <code>=</code> before updating any bindings on the left – is essential for correctness of this function.</p><p>A <code>while</code> clause contains a header expression followed by a suite:</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">while</span> <span class="hljs-symbol">&lt;expression&gt;</span>:    <span class="hljs-symbol">&lt;suite&gt;</span></code></pre></div><p>To execute a <code>while</code> clause:</p><ol><li>Evaluate the header’s expression.</li><li>If it is a true value, execute the suite, then return to step 1.</li></ol><p>In step 2, the entire suite of the <code>while</code> clause is executed before the header expression is evaluated again.</p><p>In order to prevent the suite of a <code>while</code> clause from being executed indefinitely, the suite should always change some binding in each pass.</p><p>A <code>while</code> statement that does not terminate is called an infinite loop. Press <code>&lt;Control&gt;-C</code> to force Python to stop looping.</p><h3 id="1-5-6-Testing"><a href="#1-5-6-Testing" class="headerlink" title="1.5.6  Testing"></a>1.5.6  Testing</h3><p><em>Testing</em> a function is the act of verifying that the function’s behavior matches expectations. Our language of functions is now sufficiently complex that we need to start testing our implementations.</p><p>A <em>test</em> is a mechanism for systematically performing this verification. Tests typically take the form of another function that contains one or more sample calls to the function being tested. The returned value is then verified against an expected result. Unlike most functions, which are meant to be general, tests involve selecting and validating calls with specific argument values. Tests also serve as documentation: they demonstrate how to call a function and what argument values are appropriate.</p><p><strong>Assertions.</strong> Programmers use <code>assert</code> statements to verify expectations, such as the output of a function being tested. An <code>assert</code> statement has an expression in a boolean context, followed by a quoted line of text (single or double quotes are both fine, but be consistent) that will be displayed if the expression evaluates to a false value.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">assert</span> fib(<span class="hljs-number">8</span>) == <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;The 8th Fibonacci number should be 13&#x27;</span></span></code></pre></div><p>When the expression being asserted evaluates to a true value, executing an assert statement has no effect. When it is a false value, <code>assert</code> causes an error that halts execution.</p><p>A test function for <code>fib</code> should test several arguments, including extreme values of <code>n</code>.</p><div class="code-wrapper"><pre><code class="hljs java">&gt;&gt;&gt; def <span class="hljs-title function_">fib_test</span><span class="hljs-params">()</span>:        <span class="hljs-keyword">assert</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span> == <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;The 2nd Fibonacci number should be 1&#x27;</span>        <span class="hljs-keyword">assert</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span> == <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;The 3rd Fibonacci number should be 1&#x27;</span>        <span class="hljs-keyword">assert</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-number">50</span>)</span> == <span class="hljs-number">7778742049</span>, <span class="hljs-string">&#x27;Error at the 50th Fibonacci number&#x27;</span></code></pre></div><p>When writing Python in files, rather than directly into the interpreter, tests are typically written in the same file or a neighboring file with the suffix <code>_test.py</code>.</p><p><strong>Doctests.</strong> Python provides a convenient method for placing simple tests directly in the docstring of a function. The first line of a docstring should contain a one-line description of the function, followed by a blank line. A detailed description of arguments and behavior may follow. In addition, the docstring may include a sample interactive session that calls the function:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_naturals</span>(<span class="hljs-params">n</span>):        <span class="hljs-string">&quot;&quot;&quot;Return the sum of the first n natural numbers.</span><span class="hljs-string"></span><span class="hljs-string">        &gt;&gt;&gt; sum_naturals(10)</span><span class="hljs-string">        55</span><span class="hljs-string">        &gt;&gt;&gt; sum_naturals(100)</span><span class="hljs-string">        5050</span><span class="hljs-string">        &quot;&quot;&quot;</span>        total, k = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> k &lt;= n:            total, k = total + k, k + <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> total</code></pre></div><p>Then, the interaction can be verified via the <a href="http://docs.python.org/py3k/library/doctest.html">doctest module</a>. Below, the <code>globals</code> function returns a representation of the global environment, which the interpreter needs in order to evaluate expressions.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> doctest <span class="hljs-keyword">import</span> testmod</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">testmod()</span>TestResults(failed=0, attempted=2)</code></pre></div><p>To verify the doctest interactions for only a single function, we use a <code>doctest</code> function called <code>run_docstring_examples</code>. This function is (unfortunately) a bit complicated to call. Its first argument is the function to test. The second should always be the result of the expression <code>globals()</code>, a built-in function that returns the global environment. The third argument is <code>True</code> to indicate that we would like “verbose” output: a catalog of all tests run.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> doctest <span class="hljs-keyword">import</span> run_docstring_examples</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">run_docstring_examples(sum_naturals, <span class="hljs-built_in">globals</span>(), <span class="hljs-literal">True</span>)</span>Finding tests in NoNameTrying:    sum_naturals(10)Expecting:    55okTrying:    sum_naturals(100)Expecting:    5050ok</code></pre></div><p>When the return value of a function does not match the expected result, the <code>run_docstring_examples</code> function will report this problem as a test failure.</p><p>When writing Python in files, all doctests in a file can be run by starting Python with the doctest command line option:</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> -<span class="hljs-keyword">m</span> doctest <span class="hljs-symbol">&lt;python_source_file&gt;</span></code></pre></div><p>The key to effective testing is to write (and run) tests immediately after implementing new functions. It is even good practice to write some tests before you implement, in order to have some example inputs and outputs in your mind. A test that applies a single function is called a <em>unit test</em>. Exhaustive unit testing is a hallmark of good program design.</p><h2 id="1-6-Higher-Order-Functions"><a href="#1-6-Higher-Order-Functions" class="headerlink" title="1.6  Higher-Order Functions"></a>1.6  Higher-Order Functions</h2><p>We have seen that functions are a method of abstraction that describe compound operations independent of the particular values of their arguments. That is, in <code>square</code>,</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):        <span class="hljs-keyword">return</span> x * x</code></pre></div><p>we are not talking about the square of a particular number, but rather about a method for obtaining the square of any number. Of course, we could get along without ever defining this function, by always writing expressions such as</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">3</span> * <span class="hljs-number">3</span></span>9<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">5</span> * <span class="hljs-number">5</span></span>25</code></pre></div><p>and never mentioning <code>square</code> explicitly. This practice would suffice for simple computations such as <code>square</code>, but would become arduous for more complex examples such as <code>abs</code> or <code>fib</code>. In general, lacking function definition would put us at the disadvantage of forcing us to work always at the level of the particular operations that happen to be primitives in the language (multiplication, in this case) rather than in terms of higher-level operations. Our programs would be able to compute squares, but our language would lack the ability to express the concept of squaring.</p><p>One of the things we should demand from a powerful programming language is the ability to build abstractions by assigning names to common patterns and then to work in terms of the names directly. Functions provide this ability. As we will see in the following examples, there are common programming patterns that recur in code, but are used with a number of different functions. These patterns can also be abstracted, by giving them names.</p><p>To express certain general patterns as named concepts, we will need to construct functions that can accept other functions as arguments or return functions as values. Functions that manipulate functions are called higher-order functions. This section shows how higher-order functions can serve as powerful abstraction mechanisms, vastly increasing the expressive power of our language.</p><h3 id="1-6-1-Functions-as-Arguments"><a href="#1-6-1-Functions-as-Arguments" class="headerlink" title="1.6.1  Functions as Arguments"></a>1.6.1  Functions as Arguments</h3><p>Consider the following three functions, which all compute summations. The first, <code>sum_naturals</code>, computes the sum of natural numbers up to <code>n</code>:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_naturals</span>(<span class="hljs-params">n</span>):        total, k = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> k &lt;= n:            total, k = total + k, k + <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> total<span class="hljs-meta">&gt;&gt;&gt; </span>sum_naturals(<span class="hljs-number">100</span>)<span class="hljs-number">5050</span></code></pre></div><p>The second, <code>sum_cubes</code>, computes the sum of the cubes of natural numbers up to <code>n</code>.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_cubes</span>(<span class="hljs-params">n</span>):        total, k = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> k &lt;= n:            total, k = total + k*k*k, k + <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> total<span class="hljs-meta">&gt;&gt;&gt; </span>sum_cubes(<span class="hljs-number">100</span>)<span class="hljs-number">25502500</span></code></pre></div><p>The third, <code>pi_sum</code>, computes the sum of terms in the series</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191819153.png"></p><p>which converges to pi very slowly.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">pi_sum</span>(<span class="hljs-params">n</span>):        total, k = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> k &lt;= n:            total, k = total + <span class="hljs-number">8</span> / ((<span class="hljs-number">4</span>*k-<span class="hljs-number">3</span>) * (<span class="hljs-number">4</span>*k-<span class="hljs-number">1</span>)), k + <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> total<span class="hljs-meta">&gt;&gt;&gt; </span>pi_sum(<span class="hljs-number">100</span>)<span class="hljs-number">3.1365926848388144</span></code></pre></div><p>These three functions clearly share a common underlying pattern. They are for the most part identical, differing only in name and the function of <code>k</code> used to compute the term to be added. We could generate each of the functions by filling in slots in the same template:</p><div class="code-wrapper"><pre><code class="hljs stata">def &lt;name&gt;(<span class="hljs-keyword">n</span>):    <span class="hljs-keyword">total</span>, k = 0, 1    <span class="hljs-keyword">while</span> k &lt;= <span class="hljs-keyword">n</span>:        <span class="hljs-keyword">total</span>, k = <span class="hljs-keyword">total</span> + &lt;term&gt;(k), k + 1    <span class="hljs-keyword">return</span> <span class="hljs-keyword">total</span></code></pre></div><p>The presence of such a common pattern is strong evidence that there is a useful abstraction waiting to be brought to the surface. Each of these functions is a summation of terms. As program designers, we would like our language to be powerful enough so that we can write a function that expresses the concept of summation itself rather than only functions that compute particular sums. We can do so readily in Python by taking the common template shown above and transforming the “slots” into formal parameters:</p><p>In the example below, <code>summation</code> takes as its two arguments the upper bound <code>n</code> together with the function <code>term</code> that computes the kth term. We can use <code>summation</code> just as we would any function, and it expresses summations succinctly. Take the time to step through this example, and notice how binding <code>cube</code> to the local names <code>term</code> ensures that the result <code>1*1*1 + 2*2*2 + 3*3*3 = 36</code> is computed correctly. In this example, frames which are no longer needed are removed to save space.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191819820.png"></p><p>Using an <code>identity</code> function that returns its argument, we can also sum natural numbers using exactly the same <code>summation</code> function.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">summation</span>(<span class="hljs-params">n, term</span>):        total, k = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> k &lt;= n:            total, k = total + term(k), k + <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> total<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">identity</span>(<span class="hljs-params">x</span>):        <span class="hljs-keyword">return</span> x<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_naturals</span>(<span class="hljs-params">n</span>):        <span class="hljs-keyword">return</span> summation(n, identity)<span class="hljs-meta">&gt;&gt;&gt; </span>sum_naturals(<span class="hljs-number">10</span>)<span class="hljs-number">55</span></code></pre></div><p>The <code>summation</code> function can also be called directly, without definining another function for a specific sequence.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">summation(<span class="hljs-number">10</span>, square)</span>385</code></pre></div><p>We can define <code>pi_sum</code> using our <code>summation</code> abstraction by defining a function <code>pi_term</code> to compute each term. We pass the argument <code>1e6</code>, a shorthand for <code>1 * 10^6 = 1000000</code>, to generate a close approximation to pi.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pi_term</span>(<span class="hljs-params">x</span>):</span>        return 8 / ((4*x-3) * (4*x-1))<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pi_sum</span>(<span class="hljs-params">n</span>):</span>        return summation(n, pi_term)<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">pi_sum(<span class="hljs-number">1e6</span>)</span>3.141592153589902</code></pre></div><h3 id="1-6-2-Functions-as-General-Methods"><a href="#1-6-2-Functions-as-General-Methods" class="headerlink" title="1.6.2  Functions as General Methods"></a>1.6.2  Functions as General Methods</h3><p>We introduced user-defined functions as a mechanism for abstracting patterns of numerical operations so as to make them independent of the particular numbers involved. With higher-order functions, we begin to see a more powerful kind of abstraction: some functions express general methods of computation, independent of the particular functions they call.</p><p>Despite this conceptual extension of what a function means, our environment model of how to evaluate a call expression extends gracefully to the case of higher-order functions, without change. When a user-defined function is applied to some arguments, the formal parameters are bound to the values of those arguments (which may be functions) in a new local frame.</p><p>Consider the following example, which implements a general method for iterative improvement and uses it to compute the <a href="http://www.geom.uiuc.edu/~demo5337/s97b/art.htm">golden ratio</a>. The golden ratio, often called “phi”, is a number near 1.6 that appears frequently in nature, art, and architecture.</p><p>An iterative improvement algorithm begins with a <code>guess</code> of a solution to an equation. It repeatedly applies an <code>update</code> function to improve that guess, and applies a <code>close</code> comparison to check whether the current <code>guess</code> is “close enough” to be considered correct.</p><div class="code-wrapper"><pre><code class="hljs pgsql">&gt;&gt;&gt; def improve(<span class="hljs-keyword">update</span>, <span class="hljs-keyword">close</span>, guess=<span class="hljs-number">1</span>):        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">close</span>(guess):            guess = <span class="hljs-keyword">update</span>(guess)        <span class="hljs-keyword">return</span> guess</code></pre></div><p>This <code>improve</code> function is a general expression of repetitive refinement. It doesn’t specify what problem is being solved: those details are left to the <code>update</code> and <code>close</code> functions passed in as arguments.</p><p>Among the well-known properties of the golden ratio are that it can be computed by repeatedly summing the inverse of any positive number with 1, and that it is one less than its square. We can express these properties as functions to be used with <code>improve</code>.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">golden_update</span>(<span class="hljs-params">guess</span>):        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>/guess + <span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_close_to_successor</span>(<span class="hljs-params">guess</span>):        <span class="hljs-keyword">return</span> approx_eq(guess * guess, guess + <span class="hljs-number">1</span>)</code></pre></div><p>Above, we introduce a call to <code>approx_eq</code> that is meant to return <code>True</code> if its arguments are approximately equal to each other. To implement, <code>approx_eq</code>, we can compare the absolute value of the difference between two numbers to a small tolerance value.</p><div class="code-wrapper"><pre><code class="hljs perl">&gt;&gt;&gt; def approx_e<span class="hljs-string">q(x, y, tolerance=1e-15)</span>:        <span class="hljs-keyword">return</span> <span class="hljs-keyword">abs</span>(<span class="hljs-keyword">x</span> - <span class="hljs-keyword">y</span>) &lt; tolerance</code></pre></div><p>Calling <code>improve</code> with the arguments <code>golden_update</code> and <code>square_close_to_successor</code> will compute a finite approximation to the golden ratio.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">improve(golden_update, square_close_to_successor)</span>1.6180339887498951</code></pre></div><p>By tracing through the steps of evaluation, we can see how this result is computed. First, a local frame for <code>improve</code> is constructed with bindings for <code>update</code>, <code>close</code>, and <code>guess</code>. In the body of <code>improve</code>, the name <code>close</code> is bound to <code>square_close_to_successor</code>, which is called on the initial value of <code>guess</code>. Trace through the rest of the steps to see the computational process that evolves to compute the golden ratio.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191820732.png"></p><p>This example illustrates two related big ideas in computer science. First, naming and functions allow us to abstract away a vast amount of complexity. While each function definition has been trivial, the computational process set in motion by our evaluation procedure is quite intricate. Second, it is only by virtue of the fact that we have an extremely general evaluation procedure for the Python language that small components can be composed into complex processes. Understanding the procedure of interpreting programs allows us to validate and inspect the process we have created.</p><p>As always, our new general method <code>improve</code> needs a test to check its correctness. The golden ratio can provide such a test, because it also has an exact closed-form solution, which we can compare to this iterative result.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">phi = <span class="hljs-number">1</span>/<span class="hljs-number">2</span> + sqrt(<span class="hljs-number">5</span>)/<span class="hljs-number">2</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">improve_test</span>():</span>        approx_phi = improve(golden_update, square_close_to_successor)        assert approx_eq(phi, approx_phi), &#x27;phi differs from its approximation&#x27;<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">improve_test()</span></code></pre></div><p>For this test, no news is good news: <code>improve_test</code> returns <code>None</code> after its <code>assert</code> statement is executed successfully.</p><h3 id="1-6-3-Defining-Functions-III-Nested-Definitions"><a href="#1-6-3-Defining-Functions-III-Nested-Definitions" class="headerlink" title="1.6.3  Defining Functions III: Nested Definitions"></a>1.6.3  Defining Functions III: Nested Definitions</h3><p>The above examples demonstrate how the ability to pass functions as arguments significantly enhances the expressive power of our programming language. Each general concept or equation maps onto its own short function. One negative consequence of this approach is that the global frame becomes cluttered with names of small functions, which must all be unique. Another problem is that we are constrained by particular function signatures: the <code>update</code> argument to <code>improve</code> must take exactly one argument. Nested function definitions address both of these problems, but require us to enrich our environment model.</p><p>Let’s consider a new problem: computing the square root of a number. In programming languages, “square root” is often abbreviated as <code>sqrt</code>. Repeated application of the following update converges to the square root of <code>a</code>:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">average</span>(<span class="hljs-params">x, y</span>):        <span class="hljs-keyword">return</span> (x + y)/<span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqrt_update</span>(<span class="hljs-params">x, a</span>):        <span class="hljs-keyword">return</span> average(x, a/x)</code></pre></div><p>This two-argument update function is incompatible with <code>improve</code> (it takes two arguments, not one), and it provides only a single update, while we really care about taking square roots by repeated updates. The solution to both of these issues is to place function definitions inside the body of other definitions.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqrt</span>(<span class="hljs-params">a</span>):        <span class="hljs-keyword">def</span> <span class="hljs-title function_">sqrt_update</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">return</span> average(x, a/x)        <span class="hljs-keyword">def</span> <span class="hljs-title function_">sqrt_close</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">return</span> approx_eq(x * x, a)        <span class="hljs-keyword">return</span> improve(sqrt_update, sqrt_close)</code></pre></div><p>Like local assignment, local <code>def</code> statements only affect the current local frame. These functions are only in scope while <code>sqrt</code> is being evaluated. Consistent with our evaluation procedure, these local <code>def</code> statements don’t even get evaluated until <code>sqrt</code> is called.</p><p><strong>Lexical scope.</strong> Locally defined functions also have access to the name bindings in the scope in which they are defined. In this example, <code>sqrt_update</code> refers to the name <code>a</code>, which is a formal parameter of its enclosing function <code>sqrt</code>. This discipline of sharing names among nested definitions is called <em>lexical scoping</em>. Critically, the inner functions have access to the names in the environment where they are defined (not where they are called).</p><p>We require two extensions to our environment model to enable lexical scoping.</p><ol><li>Each user-defined function has a parent environment: the environment in which it was defined.</li><li>When a user-defined function is called, its local frame extends its parent environment.</li></ol><p>Previous to <code>sqrt</code>, all functions were defined in the global environment, and so they all had the same parent: the global environment. By contrast, when Python evaluates the first two clauses of <code>sqrt</code>, it create functions that are associated with a local environment. In the call</p><div class="code-wrapper"><pre><code class="hljs isbl">&gt;&gt;&gt; <span class="hljs-function"><span class="hljs-title">sqrt</span>(<span class="hljs-number">256</span>)</span><span class="hljs-number">16.0</span></code></pre></div><p>the environment first adds a local frame for <code>sqrt</code> and evaluates the <code>def</code> statements for <code>sqrt_update</code> and <code>sqrt_close</code>.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191820683.png"></p><p>Function values each have a new annotation that we will include in environment diagrams from now on, a <em>parent</em>. The parent of a function value is the first frame of the environment in which that function was defined. Functions without parent annotations were defined in the global environment. When a user-defined function is called, the frame created has the same parent as that function.</p><p>Subsequently, the name <code>sqrt_update</code> resolves to this newly defined function, which is passed as an argument to <code>improve</code>. Within the body of <code>improve</code>, we must apply our <code>update</code> function (bound to <code>sqrt_update</code>) to the initial guess <code>x</code> of 1. This final application creates an environment for <code>sqrt_update</code> that begins with a local frame containing only <code>x</code>, but with the parent frame <code>sqrt</code> still containing a binding for <code>a</code>.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191821208.png"></p><p>The most critical part of this evaluation procedure is the transfer of the parent for <code>sqrt_update</code> to the frame created by calling <code>sqrt_update</code>. This frame is also annotated with <code>[parent=f1]</code>.</p><p><strong>Extended Environments</strong>. An environment can consist of an arbitrarily long chain of frames, which always concludes with the global frame. Previous to this <code>sqrt</code> example, environments had at most two frames: a local frame and the global frame. By calling functions that were defined within other functions, via nested <code>def</code> statements, we can create longer chains. The environment for this call to <code>sqrt_update</code> consists of three frames: the local <code>sqrt_update</code> frame, the <code>sqrt</code> frame in which <code>sqrt_update</code> was defined (labeled <code>f1</code>), and the global frame.</p><p>The return expression in the body of <code>sqrt_update</code> can resolve a value for <code>a</code> by following this chain of frames. Looking up a name finds the first value bound to that name in the current environment. Python checks first in the <code>sqrt_update</code> frame – no <code>a</code> exists. Python checks next in the parent frame, <code>f1</code>, and finds a binding for <code>a</code> to 256.</p><p>Hence, we realize two key advantages of lexical scoping in Python.</p><ul><li>The names of a local function do not interfere with names external to the function in which it is defined, because the local function name will be bound in the current local environment in which it was defined, rather than the global environment.</li><li>A local function can access the environment of the enclosing function, because the body of the local function is evaluated in an environment that extends the evaluation environment in which it was defined.</li></ul><p>The <code>sqrt_update</code> function carries with it some data: the value for <code>a</code> referenced in the environment in which it was defined. Because they “enclose” information in this way, locally defined functions are often called <em>closures</em>.</p><h3 id="1-6-4-Functions-as-Returned-Values"><a href="#1-6-4-Functions-as-Returned-Values" class="headerlink" title="1.6.4  Functions as Returned Values"></a>1.6.4  Functions as Returned Values</h3><p>We can achieve even more expressive power in our programs by creating functions whose returned values are themselves functions. An important feature of lexically scoped programming languages is that locally defined functions maintain their parent environment when they are returned. The following example illustrates the utility of this feature.</p><p>Once many simple functions are defined, function <em>composition</em> is a natural method of combination to include in our programming language. That is, given two functions <code>f(x)</code> and <code>g(x)</code>, we might want to define <code>h(x) = f(g(x))</code>. We can define function composition using our existing tools:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">compose1</span>(<span class="hljs-params">f, g</span>):        <span class="hljs-keyword">def</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">return</span> f(g(x))        <span class="hljs-keyword">return</span> h</code></pre></div><p>The environment diagram for this example shows how the names <code>f</code> and <code>g</code> are resolved correctly, even in the presence of conflicting names.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191821735.png"></p><p>The 1 in <code>compose1</code> is meant to signify that the composed functions all take a single argument. This naming convention is not enforced by the interpreter; the 1 is just part of the function name.</p><p>At this point, we begin to observe the benefits of our effort to define precisely the environment model of computation. No modification to our environment model is required to explain our ability to return functions in this way.</p><h3 id="1-6-5-Example-Newton’s-Method"><a href="#1-6-5-Example-Newton’s-Method" class="headerlink" title="1.6.5  Example: Newton’s Method"></a>1.6.5  Example: Newton’s Method</h3><p>This extended example shows how function return values and local definitions can work together to express general ideas concisely. We will implement an algorithm that is used broadly in machine learning, scientific computing, hardware design, and optimization.</p><p>Newton’s method is a classic iterative approach to finding the arguments of a mathematical function that yield a return value of 0. These values are called the <em>zeros</em> of the function. Finding a zero of a function is often equivalent to solving some other problem of interest, such as computing a square root.</p><p>A motivating comment before we proceed: it is easy to take for granted the fact that we know how to compute square roots. Not just Python, but your phone, web browser, or pocket calculator can do so for you. However, part of learning computer science is understanding how quantities like these can be computed, and the general approach presented here is applicable to solving a large class of equations beyond those built into Python.</p><p>Newton’s method is an iterative improvement algorithm: it improves a guess of the zero for any function that is <em>differentiable</em>, which means that it can be approximated by a straight line at any point. Newton’s method follows these linear approximations to find function zeros.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191843146.png"></p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191822519.png" alt="img"></p><p>A <code>newton_update</code> expresses the computational process of following this tangent line to 0, for a function <code>f</code> and its derivative <code>df</code>.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">newton_update</span>(<span class="hljs-params">f, df</span>):        <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">return</span> x - f(x) / df(x)        <span class="hljs-keyword">return</span> update</code></pre></div><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191843782.png"></p><div class="code-wrapper"><pre><code class="hljs reasonml">&gt;&gt;&gt; def find<span class="hljs-constructor">_zero(<span class="hljs-params">f</span>, <span class="hljs-params">df</span>)</span>:        def near<span class="hljs-constructor">_zero(<span class="hljs-params">x</span>)</span>:            return approx<span class="hljs-constructor">_eq(<span class="hljs-params">f</span>(<span class="hljs-params">x</span>)</span>, <span class="hljs-number">0</span>)        return improve(newton<span class="hljs-constructor">_update(<span class="hljs-params">f</span>, <span class="hljs-params">df</span>)</span>, near_zero)</code></pre></div><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191842997.png"></p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191822805.png"></p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191842811.png"></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_root_newton</span>(<span class="hljs-params">a</span>):        <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">return</span> x * x - a        <span class="hljs-keyword">def</span> <span class="hljs-title function_">df</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x        <span class="hljs-keyword">return</span> find_zero(f, df)<span class="hljs-meta">&gt;&gt;&gt; </span>square_root_newton(<span class="hljs-number">64</span>)<span class="hljs-number">8.0</span></code></pre></div><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191841110.png"></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">power</span>(<span class="hljs-params">x, n</span>):        <span class="hljs-string">&quot;&quot;&quot;Return x * x * x * ... * x for x repeated n times.&quot;&quot;&quot;</span>        product, k = <span class="hljs-number">1</span>, <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> k &lt; n:            product, k = product * x, k + <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> product<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">nth_root_of_a</span>(<span class="hljs-params">n, a</span>):        <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">return</span> power(x, n) - a        <span class="hljs-keyword">def</span> <span class="hljs-title function_">df</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">return</span> n * power(x, n-<span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> find_zero(f, df)<span class="hljs-meta">&gt;&gt;&gt; </span>nth_root_of_a(<span class="hljs-number">2</span>, <span class="hljs-number">64</span>)<span class="hljs-number">8.0</span><span class="hljs-meta">&gt;&gt;&gt; </span>nth_root_of_a(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>)<span class="hljs-number">4.0</span><span class="hljs-meta">&gt;&gt;&gt; </span>nth_root_of_a(<span class="hljs-number">6</span>, <span class="hljs-number">64</span>)<span class="hljs-number">2.0</span></code></pre></div><p>The approximation error in all of these computations can be reduced by changing the <code>tolerance</code> in <code>approx_eq</code> to a smaller number.</p><p>As you experiment with Newton’s method, be aware that it will not always converge. The initial guess of <code>improve</code> must be sufficiently close to the zero, and various conditions about the function must be met. Despite this shortcoming, Newton’s method is a powerful general computational method for solving differentiable equations. Very fast algorithms for logarithms and large integer division employ variants of the technique in modern computers.</p><h3 id="1-6-6-Currying"><a href="#1-6-6-Currying" class="headerlink" title="1.6.6  Currying"></a>1.6.6  Currying</h3><p>We can use higher-order functions to convert a function that takes multiple arguments into a chain of functions that each take a single argument. More specifically, given a function <code>f(x, y)</code>, we can define a function <code>g</code> such that <code>g(x)(y)</code> is equivalent to <code>f(x, y)</code>. Here, <code>g</code> is a higher-order function that takes in a single argument <code>x</code> and returns another function that takes in a single argument <code>y</code>. This transformation is called <em>currying</em>.</p><p>As an example, we can define a curried version of the <code>pow</code> function:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">curried_pow</span>(<span class="hljs-params">x</span>):        <span class="hljs-keyword">def</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">y</span>):            <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(x, y)        <span class="hljs-keyword">return</span> h<span class="hljs-meta">&gt;&gt;&gt; </span>curried_pow(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)<span class="hljs-number">8</span></code></pre></div><p>Some programming languages, such as Haskell, only allow functions that take a single argument, so the programmer must curry all multi-argument procedures. In more general languages such as Python, currying is useful when we require a function that takes in only a single argument. For example, the <em>map</em> pattern applies a single-argument function to a sequence of values. In later chapters, we will see more general examples of the map pattern, but for now, we can implement the pattern in a function:</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">&gt;&gt;&gt; def map_to_range(<span class="hljs-built_in">start</span>, <span class="hljs-keyword">end</span>, f):        <span class="hljs-keyword">while</span> <span class="hljs-built_in">start</span> &lt; <span class="hljs-keyword">end</span>:            print(f(<span class="hljs-built_in">start</span>))            <span class="hljs-built_in">start</span> = <span class="hljs-built_in">start</span> + <span class="hljs-number">1</span></code></pre></div><p>We can use <code>map_to_range</code> and <code>curried_pow</code> to compute the first ten powers of two, rather than specifically writing a function to do so:</p><div class="code-wrapper"><pre><code class="hljs lisp">&gt;&gt;&gt; map_to_range(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, curried_pow(<span class="hljs-number">2</span>))<span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">4</span><span class="hljs-number">8</span><span class="hljs-number">16</span><span class="hljs-number">32</span><span class="hljs-number">64</span><span class="hljs-number">128</span><span class="hljs-number">256</span><span class="hljs-number">512</span></code></pre></div><p>We can similarly use the same two functions to compute powers of other numbers. Currying allows us to do so without writing a specific function for each number whose powers we wish to compute.</p><p>In the above examples, we manually performed the currying transformation on the <code>pow</code> function to obtain <code>curried_pow</code>. Instead, we can define functions to automate currying, as well as the inverse <em>uncurrying</em> transformation:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">curry2</span>(<span class="hljs-params">f</span>):        <span class="hljs-string">&quot;&quot;&quot;Return a curried version of the given two-argument function.&quot;&quot;&quot;</span>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">x</span>):            <span class="hljs-keyword">def</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">y</span>):                <span class="hljs-keyword">return</span> f(x, y)            <span class="hljs-keyword">return</span> h        <span class="hljs-keyword">return</span> g<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">uncurry2</span>(<span class="hljs-params">g</span>):        <span class="hljs-string">&quot;&quot;&quot;Return a two-argument version of the given curried function.&quot;&quot;&quot;</span>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x, y</span>):            <span class="hljs-keyword">return</span> g(x)(y)        <span class="hljs-keyword">return</span> f<span class="hljs-meta">&gt;&gt;&gt; </span>pow_curried = curry2(<span class="hljs-built_in">pow</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>pow_curried(<span class="hljs-number">2</span>)(<span class="hljs-number">5</span>)<span class="hljs-number">32</span><span class="hljs-meta">&gt;&gt;&gt; </span>map_to_range(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, pow_curried(<span class="hljs-number">2</span>))<span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">4</span><span class="hljs-number">8</span><span class="hljs-number">16</span><span class="hljs-number">32</span><span class="hljs-number">64</span><span class="hljs-number">128</span><span class="hljs-number">256</span><span class="hljs-number">512</span></code></pre></div><p>The <code>curry2</code> function takes in a two-argument function <code>f</code> and returns a single-argument function <code>g</code>. When <code>g</code> is applied to an argument <code>x</code>, it returns a single-argument function <code>h</code>. When <code>h</code> is applied to <code>y</code>, it calls <code>f(x, y)</code>. Thus, <code>curry2(f)(x)(y)</code> is equivalent to <code>f(x, y)</code>. The <code>uncurry2</code> function reverses the currying transformation, so that <code>uncurry2(curry2(f))</code> is equivalent to <code>f</code>.</p><div class="code-wrapper"><pre><code class="hljs gcode">&gt;&gt;&gt; u<span class="hljs-symbol">ncurry2</span><span class="hljs-comment">(pow_curried)</span><span class="hljs-comment">(2, 5)</span><span class="hljs-number">32</span></code></pre></div><h3 id="1-6-7-Lambda-Expressions"><a href="#1-6-7-Lambda-Expressions" class="headerlink" title="1.6.7  Lambda Expressions"></a>1.6.7  Lambda Expressions</h3><p>So far, each time we have wanted to define a new function, we needed to give it a name. But for other types of expressions, we don’t need to associate intermediate values with a name. That is, we can compute <code>a*b + c*d</code> without having to name the subexpressions <code>a*b</code> or <code>c*d</code>, or the full expression. In Python, we can create function values on the fly using <code>lambda</code> expressions, which evaluate to unnamed functions. A lambda expression evaluates to a function that has a single return expression as its body. Assignment and control statements are not allowed.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">compose1</span>(<span class="hljs-params">f, g</span>):        <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> x: f(g(x))</code></pre></div><p>We can understand the structure of a <code>lambda</code> expression by constructing a corresponding English sentence:</p><div class="code-wrapper"><pre><code class="hljs isbl">     <span class="hljs-variable">lambda</span>            <span class="hljs-variable">x</span>            :          <span class="hljs-function"><span class="hljs-title">f</span>(<span class="hljs-title">g</span>(<span class="hljs-variable">x</span>))</span><span class="hljs-string">&quot;A function that    takes x    and returns     f(g(x))&quot;</span></code></pre></div><p>The result of a lambda expression is called a lambda function. It has no intrinsic name (and so Python prints <code>&lt;lambda&gt;</code> for the name), but otherwise it behaves like any other function.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s = <span class="hljs-keyword">lambda</span> x: x * x</span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s</span>&lt;function &lt;lambda&gt; at 0xf3f490&gt;<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s(<span class="hljs-number">12</span>)</span>144</code></pre></div><p>In an environment diagram, the result of a lambda expression is a function as well, named with the greek letter λ (lambda). Our compose example can be expressed quite compactly with lambda expressions.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191822583.png"></p><p>Some programmers find that using unnamed functions from lambda expressions to be shorter and more direct. However, compound <code>lambda</code> expressions are notoriously illegible, despite their brevity. The following definition is correct, but many programmers have trouble understanding it quickly.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">compose1 = <span class="hljs-keyword">lambda</span> f,g: <span class="hljs-keyword">lambda</span> x: f(g(x))</span></code></pre></div><p>In general, Python style prefers explicit <code>def</code> statements to lambda expressions, but allows them in cases where a simple function is needed as an argument or return value.</p><p>Such stylistic rules are merely guidelines; you can program any way you wish. However, as you write programs, think about the audience of people who might read your program one day. When you can make your program easier to understand, you do those people a favor.</p><p>The term <em>lambda</em> is a historical accident resulting from the incompatibility of written mathematical notation and the constraints of early type-setting systems.</p><blockquote><p>It may seem perverse to use lambda to introduce a procedure&#x2F;function. The notation goes back to Alonzo Church, who in the 1930’s started with a “hat” symbol; he wrote the square function as “ŷ . y × y”. But frustrated typographers moved the hat to the left of the parameter and changed it to a capital lambda: “Λy . y × y”; from there the capital lambda was changed to lowercase, and now we see “λy . y × y” in math books and <code>(lambda (y) (* y y))</code> in Lisp.</p><p>—Peter Norvig (norvig.com&#x2F;lispy2.html)</p></blockquote><p>Despite their unusual etymology, <code>lambda</code> expressions and the corresponding formal language for function application, the <em>lambda calculus</em>, are fundamental computer science concepts shared far beyond the Python programming community. We will revisit this topic when we study the design of interpreters in Chapter 3.</p><h3 id="1-6-8-Abstractions-and-First-Class-Functions"><a href="#1-6-8-Abstractions-and-First-Class-Functions" class="headerlink" title="1.6.8  Abstractions and First-Class Functions"></a>1.6.8  Abstractions and First-Class Functions</h3><p>We began this section with the observation that user-defined functions are a crucial abstraction mechanism, because they permit us to express general methods of computing as explicit elements in our programming language. Now we’ve seen how higher-order functions permit us to manipulate these general methods to create further abstractions.</p><p>As programmers, we should be alert to opportunities to identify the underlying abstractions in our programs, build upon them, and generalize them to create more powerful abstractions. This is not to say that one should always write programs in the most abstract way possible; expert programmers know how to choose the level of abstraction appropriate to their task. But it is important to be able to think in terms of these abstractions, so that we can be ready to apply them in new contexts. The significance of higher-order functions is that they enable us to represent these abstractions explicitly as elements in our programming language, so that they can be handled just like other computational elements.</p><p>In general, programming languages impose restrictions on the ways in which computational elements can be manipulated. Elements with the fewest restrictions are said to have first-class status. Some of the “rights and privileges” of first-class elements are:</p><ol><li>They may be bound to names.</li><li>They may be passed as arguments to functions.</li><li>They may be returned as the results of functions.</li><li>They may be included in data structures.</li></ol><p>Python awards functions full first-class status, and the resulting gain in expressive power is enormous.</p><h3 id="1-6-9-Function-Decorators"><a href="#1-6-9-Function-Decorators" class="headerlink" title="1.6.9  Function Decorators"></a>1.6.9  Function Decorators</h3><p>Python provides special syntax to apply higher-order functions as part of executing a <code>def</code> statement, called a decorator. Perhaps the most common example is a trace.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">trace</span>(<span class="hljs-params">fn</span>):        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped</span>(<span class="hljs-params">x</span>):            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&gt; &#x27;</span>, fn, <span class="hljs-string">&#x27;(&#x27;</span>, x, <span class="hljs-string">&#x27;)&#x27;</span>)            <span class="hljs-keyword">return</span> fn(x)        <span class="hljs-keyword">return</span> wrapped<span class="hljs-meta">&gt;&gt;&gt; </span>@trace    <span class="hljs-keyword">def</span> <span class="hljs-title function_">triple</span>(<span class="hljs-params">x</span>):        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x<span class="hljs-meta">&gt;&gt;&gt; </span>triple(<span class="hljs-number">12</span>)-&gt;  &lt;function triple at <span class="hljs-number">0x102a39848</span>&gt; ( <span class="hljs-number">12</span> )<span class="hljs-number">36</span></code></pre></div><p>In this example, A higher-order function <code>trace</code> is defined, which returns a function that precedes a call to its argument with a <code>print</code> statement that outputs the argument. The <code>def</code> statement for <code>triple</code> has an annotation, <code>@trace</code>, which affects the execution rule for <code>def</code>. As usual, the function <code>triple</code> is created. However, the name <code>triple</code> is not bound to this function. Instead, the name <code>triple</code> is bound to the returned function value of calling <code>trace</code> on the newly defined <code>triple</code> function. In code, this decorator is equivalent to:</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">triple</span>(<span class="hljs-params">x</span>):</span>        return 3 * x<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">triple = trace(triple)</span></code></pre></div><p>In the projects associated with this text, decorators are used for tracing, as well as selecting which functions to call when a program is run from the command line.</p><p><strong>Extra for experts.</strong> The decorator symbol <code>@</code> may also be followed by a call expression. The expression following <code>@</code> is evaluated first (just as the name <code>trace</code> was evaluated above), the <code>def</code> statement second, and finally the result of evaluating the decorator expression is applied to the newly defined function, and the result is bound to the name in the <code>def</code> statement. A <a href="http://programmingbits.pythonblogs.com/27_programmingbits/archive/50_function_decorators.html">short tutorial on decorators</a> by Ariel Ortiz gives further examples for interested students.</p><h2 id="1-7-Recursive-Functions"><a href="#1-7-Recursive-Functions" class="headerlink" title="1.7  Recursive Functions"></a>1.7  Recursive Functions</h2><p>A function is called <em>recursive</em> if the body of the function calls the function itself, either directly or indirectly. That is, the process of executing the body of a recursive function may in turn require applying that function again. Recursive functions do not use any special syntax in Python, but they do require some effort to understand and create.</p><p>We’ll begin with an example problem: write a function that sums the digits of a natural number. When designing recursive functions, we look for ways in which a problem can be broken down into simpler problems. In this case, the operators <code>%</code> and <code>//</code> can be used to separate a number into two parts: its last digit and all but its last digit.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">18117</span> % <span class="hljs-number">10</span></span>7<span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">18117</span> // <span class="hljs-number">10</span></span>1811</code></pre></div><p>The sum of the digits of 18117 is <code>1+8+1+1+7 = 18</code>. Just as we can separate the number, we can separate this sum into the last digit, 7, and the sum of all but the last digit, <code>1+8+1+1 = 11</code>. This separation gives us an algorithm: to sum the digits of a number <code>n</code>, add its last digit <code>n % 10</code> to the sum of the digits of <code>n // 10</code>. There’s one special case: if a number has only one digit, then the sum of its digits is itself. This algorithm can be implemented as a recursive function.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_digits</span>(<span class="hljs-params">n</span>):        <span class="hljs-string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.&quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span>:            <span class="hljs-keyword">return</span> n        <span class="hljs-keyword">else</span>:            all_but_last, last = n // <span class="hljs-number">10</span>, n % <span class="hljs-number">10</span>            <span class="hljs-keyword">return</span> sum_digits(all_but_last) + last</code></pre></div><p>This definition of <code>sum_digits</code> is both complete and correct, even though the <code>sum_digits</code> function is called within its own body. The problem of summing the digits of a number is broken down into two steps: summing all but the last digit, then adding the last digit. Both of these steps are simpler than the original problem. The function is recursive because the first step is the same kind of problem as the original problem. That is, <code>sum_digits</code> is exactly the function we need in order to implement <code>sum_digits</code>.</p><div class="code-wrapper"><pre><code class="hljs isbl">&gt;&gt;&gt; <span class="hljs-function"><span class="hljs-title">sum_digits</span>(<span class="hljs-number">9</span>)</span><span class="hljs-number">9</span>&gt;&gt;&gt; <span class="hljs-function"><span class="hljs-title">sum_digits</span>(<span class="hljs-number">18117</span>)</span><span class="hljs-number">18</span>&gt;&gt;&gt; <span class="hljs-function"><span class="hljs-title">sum_digits</span>(<span class="hljs-number">9437184</span>)</span><span class="hljs-number">36</span>&gt;&gt;&gt; <span class="hljs-function"><span class="hljs-title">sum_digits</span>(<span class="hljs-number">11408855402054064613470328848384</span>)</span><span class="hljs-number">126</span></code></pre></div><p>We can understand precisely how this recursive function applies successfully using our environment model of computation. No new rules are required.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191845912.png"></p><p>When the <code>def</code> statement is executed, the name <code>sum_digits</code> is bound to a new function, but the body of that function is not yet executed. Therefore, the circular nature of <code>sum_digits</code> is not a problem yet. Then, <code>sum_digits</code> is called on 738:</p><ol><li><p>A local frame for <code>sum_digits</code> with <code>n</code> bound to 738 is created, and the body of <code>sum_digits</code> is executed in the environment that starts with that frame.</p></li><li><p>Since 738 is not less than 10, the assignment statement on line 4 is executed, splitting 738 into 73 and 8.</p></li><li><p>In the following return statement, <code>sum_digits</code> is called on 73, the value of <code>all_but_last</code> in the current environment.</p></li><li><p>Another local frame for <code>sum_digits</code> is created, this time with <code>n</code> bound to 73. The body of <code>sum_digits</code> is again executed in the new environment that starts with this frame.</p></li><li><p>Since 73 is also not less than 10, 73 is split into 7 and 3 and <code>sum_digits</code> is called on 7, the value of <code>all_but_last</code> evaluated in this frame.</p></li><li><p>A third local frame for <code>sum_digits</code> is created, with <code>n</code> bound to 7.</p></li><li><p>In the environment starting with this frame, it is true that <code>n &lt; 10</code>, and therefore 7 is returned.</p></li><li><p>In the second local frame, this return value 7 is summed with 3, the value of <code>last</code>, to return 10.</p></li><li><p>In the first local frame, this return value 10 is summed with 8, the value of <code>last</code>, to return 18.</p></li></ol><p>This recursive function applies correctly, despite its circular character, because it is applied twice, but with a different argument each time. Moreover, the second application was a simpler instance of the digit summing problem than the first. Generate the environment diagram for the call <code>sum_digits(18117)</code> to see that each successive call to <code>sum_digits</code> takes a smaller argument than the last, until eventually a single-digit input is reached.</p><p>This example also illustrates how functions with simple bodies can evolve complex computational processes by using recursion.</p><h3 id="1-7-1-The-Anatomy-of-Recursive-Functions"><a href="#1-7-1-The-Anatomy-of-Recursive-Functions" class="headerlink" title="1.7.1  The Anatomy of Recursive Functions"></a>1.7.1  The Anatomy of Recursive Functions</h3><p>A common pattern can be found in the body of many recursive functions. The body begins with a <em>base case</em>, a conditional statement that defines the behavior of the function for the inputs that are simplest to process. In the case of <code>sum_digits</code>, the base case is any single-digit argument, and we simply return that argument. Some recursive functions will have multiple base cases.</p><p>The base cases are then followed by one or more <em>recursive calls</em>. Recursive calls always have a certain character: they simplify the original problem. Recursive functions express computation by simplifying problems incrementally. For example, summing the digits of 7 is simpler than summing the digits of 73, which in turn is simpler than summing the digits of 738. For each subsequent call, there is less work left to be done.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191846494.png"></p><p>A natural implementation using a <code>while</code> statement accumulates the total by multiplying together each positive integer up to <code>n</code>.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">fact_iter</span>(<span class="hljs-params">n</span>):        total, k = <span class="hljs-number">1</span>, <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> k &lt;= n:            total, k = total * k, k + <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> total<span class="hljs-meta">&gt;&gt;&gt; </span>fact_iter(<span class="hljs-number">4</span>)<span class="hljs-number">24</span></code></pre></div><p>On the other hand, a recursive implementation of factorial can express <code>fact(n)</code> in terms of <code>fact(n-1)</code>, a simpler problem. The base case of the recursion is the simplest form of the problem: <code>fact(1)</code> is 1.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191846347.png"></p><p>These two factorial functions differ conceptually. The iterative function constructs the result from the base case of 1 to the final total by successively multiplying in each term. The recursive function, on the other hand, constructs the result directly from the final term, <code>n</code>, and the result of the simpler problem, <code>fact(n-1)</code>.</p><p>As the recursion “unwinds” through successive applications of the <em>fact</em> function to simpler and simpler problem instances, the result is eventually built starting from the base case. The recursion ends by passing the argument 1 to <code>fact</code>; the result of each call depends on the next until the base case is reached.</p><p>The correctness of this recursive function is easy to verify from the standard definition of the mathematical function for factorial:</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191846534.png"></p><p>While we can unwind the recursion using our model of computation, it is often clearer to think about recursive calls as functional abstractions. That is, we should not care about how <code>fact(n-1)</code> is implemented in the body of <code>fact</code>; we should simply trust that it computes the factorial of <code>n-1</code>. Treating a recursive call as a functional abstraction has been called a <em>recursive leap of faith</em>. We define a function in terms of itself, but simply trust that the simpler cases will work correctly when verifying the correctness of the function. In this example, we trust that <code>fact(n-1)</code> will correctly compute <code>(n-1)!</code>; we must only check that <code>n!</code> is computed correctly if this assumption holds. In this way, verifying the correctness of a recursive function is a form of proof by induction.</p><p>The functions <em>fact_iter</em> and <em>fact</em> also differ because the former must introduce two additional names, <code>total</code> and <code>k</code>, that are not required in the recursive implementation. In general, iterative functions must maintain some local state that changes throughout the course of computation. At any point in the iteration, that state characterizes the result of completed work and the amount of work remaining. For example, when <code>k</code> is 3 and total is 2, there are still two terms remaining to be processed, 3 and 4. On the other hand, <em>fact</em> is characterized by its single argument <code>n</code>. The state of the computation is entirely contained within the structure of the environment, which has return values that take the role of <code>total</code>, and binds <code>n</code> to different values in different frames rather than explicitly tracking <code>k</code>.</p><p>Recursive functions leverage the rules of evaluating call expressions to bind names to values, often avoiding the nuisance of correctly assigning local names during iteration. For this reason, recursive functions can be easier to define correctly. However, learning to recognize the computational processes evolved by recursive functions certainly requires practice.</p><h3 id="1-7-2-Mutual-Recursion"><a href="#1-7-2-Mutual-Recursion" class="headerlink" title="1.7.2  Mutual Recursion"></a>1.7.2  Mutual Recursion</h3><p>When a recursive procedure is divided among two functions that call each other, the functions are said to be <em>mutually recursive</em>. As an example, consider the following definition of even and odd for non-negative integers:</p><ul><li>a number is even if it is one more than an odd number</li><li>a number is odd if it is one more than an even number</li><li>0 is even</li></ul><p>Using this definition, we can implement mutually recursive functions to determine whether a number is even or odd:</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191847202.png"></p><p>Mutually recursive functions can be turned into a single recursive function by breaking the abstraction boundary between the two functions. In this example, the body of <code>is_odd</code> can be incorporated into that of <code>is_even</code>, making sure to replace <code>n</code> with <code>n-1</code> in the body of <code>is_odd</code> to reflect the argument passed into it:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_even</span>(<span class="hljs-params">n</span>):        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">if</span> (n-<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span> is_even((n-<span class="hljs-number">1</span>)-<span class="hljs-number">1</span>)</code></pre></div><p>As such, mutual recursion is no more mysterious or powerful than simple recursion, and it provides a mechanism for maintaining abstraction within a complicated recursive program.</p><h3 id="1-7-3-Printing-in-Recursive-Functions"><a href="#1-7-3-Printing-in-Recursive-Functions" class="headerlink" title="1.7.3  Printing in Recursive Functions"></a>1.7.3  Printing in Recursive Functions</h3><p>The computational process evolved by a recursive function can often be visualized using calls to <code>print</code>. As an example, we will implement a function <code>cascade</code> that prints all prefixes of a number from largest to smallest to largest.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">cascade</span>(<span class="hljs-params">n</span>):        <span class="hljs-string">&quot;&quot;&quot;Print a cascade of prefixes of n.&quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span>:            <span class="hljs-built_in">print</span>(n)        <span class="hljs-keyword">else</span>:            <span class="hljs-built_in">print</span>(n)            cascade(n//<span class="hljs-number">10</span>)            <span class="hljs-built_in">print</span>(n)<span class="hljs-meta">&gt;&gt;&gt; </span>cascade(<span class="hljs-number">2013</span>)<span class="hljs-number">2013</span><span class="hljs-number">201</span><span class="hljs-number">20</span><span class="hljs-number">2</span><span class="hljs-number">20</span><span class="hljs-number">201</span><span class="hljs-number">2013</span></code></pre></div><p>In this recursive function, the base case is a single-digit number, which is printed. Otherwise, a recursive call is placed between two calls to <code>print</code>.</p><p>It is not a rigid requirement that base cases be expressed before recursive calls. In fact, this function can be expressed more compactly by observing that <code>print(n)</code> is repeated in both clauses of the conditional statement, and therefore can precede it.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">cascade</span>(<span class="hljs-params">n</span>):        <span class="hljs-string">&quot;&quot;&quot;Print a cascade of prefixes of n.&quot;&quot;&quot;</span>        <span class="hljs-built_in">print</span>(n)        <span class="hljs-keyword">if</span> n &gt;= <span class="hljs-number">10</span>:            cascade(n//<span class="hljs-number">10</span>)            <span class="hljs-built_in">print</span>(n)</code></pre></div><p>As another example of mutual recursion, consider a two-player game in which there are <code>n</code> initial pebbles on a table. The players take turns, removing either one or two pebbles from the table, and the player who removes the final pebble wins. Suppose that Alice and Bob play this game, each using a simple strategy:</p><ul><li>Alice always removes a single pebble</li><li>Bob removes two pebbles if an even number of pebbles is on the table, and one otherwise</li></ul><p>Given <code>n</code> initial pebbles and Alice starting, who wins the game?</p><p>A natural decomposition of this problem is to encapsulate each strategy in its own function. This allows us to modify one strategy without affecting the other, maintaining the abstraction barrier between the two. In order to incorporate the turn-by-turn nature of the game, these two functions call each other at the end of each turn.</p><div class="code-wrapper"><pre><code class="hljs isbl">&gt;&gt;&gt; <span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">play_alice</span>(<span class="hljs-variable">n</span>):</span><span class="hljs-function">        <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">n</span> == <span class="hljs-number">0</span>:</span><span class="hljs-function">            <span class="hljs-title">print</span>(<span class="hljs-string">&quot;Bob wins!&quot;</span>)</span>        <span class="hljs-variable"><span class="hljs-keyword">else</span></span>:            <span class="hljs-function"><span class="hljs-title">play_bob</span>(<span class="hljs-variable">n</span>-<span class="hljs-number">1</span>)</span>&gt;&gt;&gt; <span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">play_bob</span>(<span class="hljs-variable">n</span>):</span><span class="hljs-function">        <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">n</span> == <span class="hljs-number">0</span>:</span><span class="hljs-function">            <span class="hljs-title">print</span>(<span class="hljs-string">&quot;Alice wins!&quot;</span>)</span>        <span class="hljs-variable">elif</span> <span class="hljs-function"><span class="hljs-title">is_even</span>(<span class="hljs-variable">n</span>):</span><span class="hljs-function">            <span class="hljs-title">play_alice</span>(<span class="hljs-variable">n</span>-<span class="hljs-number">2</span>)</span>        <span class="hljs-variable"><span class="hljs-keyword">else</span></span>:            <span class="hljs-function"><span class="hljs-title">play_alice</span>(<span class="hljs-variable">n</span>-<span class="hljs-number">1</span>)</span>&gt;&gt;&gt; <span class="hljs-function"><span class="hljs-title">play_alice</span>(<span class="hljs-number">20</span>)</span><span class="hljs-variable">Bob</span> <span class="hljs-variable">wins</span><span class="hljs-variable">!</span></code></pre></div><p>In <code>play_bob</code>, we see that multiple recursive calls may appear in the body of a function. However, in this example, each call to <code>play_bob</code> calls <code>play_alice</code> at most once. In the next section, we consider what happens when a single function call makes multiple direct recursive calls.</p><h3 id="1-7-4-Tree-Recursion"><a href="#1-7-4-Tree-Recursion" class="headerlink" title="1.7.4  Tree Recursion"></a>1.7.4  Tree Recursion</h3><p>Another common pattern of computation is called tree recursion, in which a function calls itself more than once. As an example, consider computing the sequence of Fibonacci numbers, in which each number is the sum of the preceding two.</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307191848392.png"></p><p>This recursive definition is tremendously appealing relative to our previous attempts: it exactly mirrors the familiar definition of Fibonacci numbers. A function with multiple recursive calls is said to be <em>tree recursive</em> because each call branches into multiple smaller calls, each of which branches into yet smaller calls, just as the branches of a tree become smaller but more numerous as they extend from the trunk.</p><p>We were already able to define a function to compute Fibonacci numbers without tree recursion. In fact, our previous attempts were more efficient, a topic discussed later in the text. Next, we consider a problem for which the tree recursive solution is substantially simpler than any iterative alternative.</p><h3 id="1-7-5-Example-Partitions"><a href="#1-7-5-Example-Partitions" class="headerlink" title="1.7.5  Example: Partitions"></a>1.7.5  Example: Partitions</h3><p>The number of partitions of a positive integer <code>n</code>, using parts up to size <code>m</code>, is the number of ways in which <code>n</code> can be expressed as the sum of positive integer parts up to <code>m</code> in increasing order. For example, the number of partitions of 6 using parts up to 4 is 9.</p><ol><li><code>6 = 2 + 4</code></li><li><code>6 = 1 + 1 + 4</code></li><li><code>6 = 3 + 3</code></li><li><code>6 = 1 + 2 + 3</code></li><li><code>6 = 1 + 1 + 1 + 3</code></li><li><code>6 = 2 + 2 + 2</code></li><li><code>6 = 1 + 1 + 2 + 2</code></li><li><code>6 = 1 + 1 + 1 + 1 + 2</code></li><li><code>6 = 1 + 1 + 1 + 1 + 1 + 1</code></li></ol><p>We will define a function <code>count_partitions(n, m)</code> that returns the number of different partitions of <code>n</code> using parts up to <code>m</code>. This function has a simple solution as a tree-recursive function, based on the following observation:</p><p>The number of ways to partition <code>n</code> using integers up to <code>m</code> equals</p><ol><li>the number of ways to partition <code>n-m</code> using integers up to <code>m</code>, and</li><li>the number of ways to partition <code>n</code> using integers up to <code>m-1</code>.</li></ol><p>To see why this is true, observe that all the ways of partitioning <code>n</code> can be divided into two groups: those that include at least one <code>m</code> and those that do not. Moreover, each partition in the first group is a partition of <code>n-m</code>, followed by <code>m</code> added at the end. In the example above, the first two partitions contain 4, and the rest do not.</p><p>Therefore, we can recursively reduce the problem of partitioning <code>n</code> using integers up to <code>m</code> into two simpler problems: (1) partition a smaller number <code>n-m</code>, and (2) partition with smaller components up to <code>m-1</code>.</p><p>To complete the implementation, we need to specify the following base cases:</p><ol><li>There is one way to partition 0: include no parts.</li><li>There are 0 ways to partition a negative <code>n</code>.</li><li>There are 0 ways to partition any <code>n</code> greater than 0 using parts of size 0 or less.</li></ol><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_partitions</span>(<span class="hljs-params">n, m</span>):        <span class="hljs-string">&quot;&quot;&quot;Count the ways to partition n using parts up to m.&quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> n &lt; <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> m == <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> count_partitions(n-m, m) + count_partitions(n, m-<span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>count_partitions(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>)<span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span>count_partitions(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>)<span class="hljs-number">7</span><span class="hljs-meta">&gt;&gt;&gt; </span>count_partitions(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<span class="hljs-number">42</span><span class="hljs-meta">&gt;&gt;&gt; </span>count_partitions(<span class="hljs-number">15</span>, <span class="hljs-number">15</span>)<span class="hljs-number">176</span><span class="hljs-meta">&gt;&gt;&gt; </span>count_partitions(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>)<span class="hljs-number">627</span></code></pre></div><p>We can think of a tree-recursive function as exploring different possibilities. In this case, we explore the possibility that we use a part of size <code>m</code> and the possibility that we do not. The first and second recursive calls correspond to these possibilities.</p><p>Implementing this function without recursion would be substantially more involved. Interested readers are encouraged to try.</p>]]></content>
    
    
    <categories>
      
      <category>Major</category>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS61A</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟的山河大学与真实的教育困境</title>
    <link href="/2023-07-16/%E8%99%9A%E6%8B%9F%E7%9A%84%E5%B1%B1%E6%B2%B3%E5%A4%A7%E5%AD%A6%E4%B8%8E%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%99%E8%82%B2%E5%9B%B0%E5%A2%83/"/>
    <url>/2023-07-16/%E8%99%9A%E6%8B%9F%E7%9A%84%E5%B1%B1%E6%B2%B3%E5%A4%A7%E5%AD%A6%E4%B8%8E%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%99%E8%82%B2%E5%9B%B0%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p class='note note-success'>本文转载自虎嗅年轻内容公众号“那個NG”（ID：huxiu4youth)。</p><p>七月是高考的回响。<br>这个夏天，一座虚拟的大学在互联网世界拔地而起，这座学校名叫“山河大学”，只收留心碎的“山河四省”考生。<br>寒门、普通家庭、教育资源、分配公平。当山河大学的玩笑被互联网遗忘之后，那些心酸的个体，继续用一生消化高考的梦魇。</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307162037969.jpeg"></p><p>山河大学，顾名思义是山河四省的大学，由河北、河南、山东和山西的考生共同在互联网拟建而成。这所虚拟大学只招收山河四省的考生。原因很简单，作为高考大省，他们的教育资源却匮乏得可怜。以2023年的数据为例，河北、河南、山东和山西的高考报名人数分别为83万、131万、80万和33.7万人，合计327.7万人，约占全国考生人数的25%。</p><p>在四省范围内，只有4所211高校、2所985高校（且唯二的985高校都位于山东)。河南、河北、山西三省总人口约2亿，却无一所985院校。河南仅有一所211高校郑州大学，已经是许多留在省内的河南考生能够触及的天花板。</p><p>华南师范大学教授林勇通过整理2018年各省份录取数据后，以清华北大的录取率来看，靠前的是：北京（0.603%）、天津（0.135%）、上海（0.098%），排名最后五位的省份里，河北（0.016%）、河南（0.014%）均榜上有名。</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307162037063.jpeg" alt="7月6日，教育部回应“山河大学”"></p><p>于是这些曾经淋过雨的年轻人大胆设想，我们是不是能为后来人撑伞——如果四省考生每人出资1000元，就能筹集三十多亿的资金，可以建立一所位于四省交界处的综合性大学。</p><p>号召一出，一呼百应，那些已经毕业的山河四省考生，甚至是外省的路人，都愿意为这所根本不存在的大学众筹捐款。于是，“上午看到了想法，中午看到了方案，下午看到了校徽，晚上看到了宿舍。”</p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307162045402.jpeg" alt="山河大学的“官网”页面"></p><p> 选址就在四省的交界处，官网、校徽、校训、校歌、录取通知书、校园平面图在几天之内迅速落地。甚至他们还建立了山河大学的社群，组建起了研究生院、文学院、艺术学院、法学院、材料学院等等。除了认领各院院长的职位，甚至还有人竞聘宿管和保安。这些散落全国各地的山河四省学子们，陷入一个明知是梦的梦：解救和自己一样受困于教育资源的年轻人，打捞那个苦读十年却仍然追不上别人起点的自己。</p><p> 至于山河大学的校长为什么是杜甫，或许是因为“国破山河在”恰好有“山河”二字；但另一个原因更让人信服。杜甫写过那句“安得广厦千万间，大庇天下寒士俱欢颜”。这座虚拟大学，变成了山河四省“高考弃儿”们的应许之地。</p><p>它的简介朴素而有力：让每一个山河四省的学子都“有学上”。他们在学校简介上勾勒着一个理想大学：宿舍有空调、上床下桌、独立卫浴、食堂低价美味、专业有趣、师资雄厚。现实中确实存在这样的大学，但对于普通的山河四省考生来说，想要进入这样的大学，必须以外省人想象不到的难度，扒几层皮去攀爬应试教育的金字塔尖。</p><p> 进入大学之前，我以为我为了应试教育付出的前18年已经够悲苦了。直到我遇到了来自山东与河南的同班同学。他们的分数比我高几十分，但我们坐在同一间教室、同一间宿舍。因为大部分学校的招生计划都会优先面向省内，所以其他省份的招生名额更少。所以山河四省的学子要出省上大学，就必须考取比本地学生更高的分数。与此同时，班里也有来自北京与天津的同学。不能否认他们也很努力，但童年付出的劳累与代价，是无法和来自山河四省的同学相提并论的。这就像“辛苦”与“痛苦”的差别，中国孩子都苦，但程度不同。所以在招生简章里，你能看到山河四省的学子们积压已久的愤懑：山河四省考生可直接报名，除四省以外其他省考生需高考达到700分。这是一种对过往不公的回击，哪怕只是在精神层面上的回击。</p><p>教育资源优渥地区的考生，无法理解什么叫“夺命21次模考”，无法理解衡水模式会给一个人带来一生的阴影，也无法理解什么叫“一分恨不得掰成三分去报志愿”。 我认识一位衡水一中的毕业生，十年前她高考，省排名在50名左右，但在班里，连前10名都没挤进去。残酷如斯。这些来自应试教育和大逃杀模式的疤痕，即便到了30岁，仍然摸上去新鲜滚烫，让他们即便步入社会，也活得像一只全身紧绷的猫，总是夜半梦回跑操背书的凌晨5点。这是教育资源的天堑，只能由这亿万个个体慢慢消化。“小明用了2小时走到少年宫，而我用了18年。”</p><p> 张雪峰和山河大学，就像一个杨桃的两个切面，尝起来都是同样的苦涩。正是有了教育资源分配不公，才有了民间的“志愿圣人”张雪峰。<br> 一句“理科590分学新闻就把他打晕”把张雪峰送上了高考后的第一波热搜。</p><p>而这句话引起的波澜更有趣。在一则十几秒的视频里，一位大学生拿出自己的学生证，大喊一声：“不要听张雪峰那小子的话啊！”新闻学卓越人才实验班，五院四系，华东政法大学，毕业后直接“黄袍加身”送外卖，就业率“百分之百”。到此为止，到底要不要学新闻的争议，才完成了完美的闭环。</p><p> <img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307162038769.jpeg" alt="图源：B站"></p><p> 太多人争论人文社科到底是不是无用学科。但我更在意“不要学新闻”背后的半句话—— <strong>“如果家境优渥，选择更多，不存在错不错的问题。但是大多数家庭，条件没有那么好，选专业就要选适合自己的，能让自己吃上饭的。”</strong></p><p> <img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307162039623.jpeg" alt="图源：微博"></p><p> 问题争议不在于专业本身，而是张雪峰的受众群体，是广大普通家庭的普通考生。有人调侃道，你猜国家电网的家长会不会去挤张雪峰的直播间？ 当知识分子指责张雪峰市侩、势力、摧毁年轻人的理想主义的时候，我的建议是不妨去他的直播间里静坐一晚。 你自以为是常识的东西，放在大多数普通人身上，变成了一望无际的信息差。就像前几天流传的一则“感人视频”：一位甘肃白银的考生填志愿，父亲说，只要是带“人民”两个字的都报。</p><p> 他的建议虽然只是一家之言，不一定正确，不一定帮得了所有人，但或多或少能把许多缺乏基础认知的家庭从晃晃悠悠的钢丝上拽一把。一位母亲想让女儿当空姐，上来就问张雪峰，500分能不能报考“航空航天”的专业。张雪峰疑惑地盘问了半天，才听懂家长是想送孩子去当空姐。原因也很简单。空姐听上去体面，据说很赚钱。张雪峰直接把最难听甚至得罪人的话撂在台面上：你们家孩子有底线吗？<br> 因为让一个有底线的人变得没有底线很容易，而让一个没底线的人变得有底线很难。如果孩子是一个内向缺乏主见的人，为什么非要把她丢进一个更容易被环境影响的行业中去？“为什么在能够把握命运的时候，非要去做一个服务员呢？”</p><p> 张雪峰还能在最短时间内，给一个普通家庭传递行业内部信息。 一位母亲拿着孩子的成绩来咨询，张雪峰在一秒之内给出答案：去滨州学院学机务专业，毕业对口修飞机，就差把“毕业包分配”说出口了。而在连麦之前，家长根本不知道有这所学校、有这门职业。而这所学校一旦改名为山东航空学院后，考生的500分成绩就不一定能够得上了。</p><p> 许多曾经属于利益圈层内部交流的信息，被张雪峰拿在台面上“委婉地”说透了。一位家长想让孩子进入国家电网工作，张雪峰明确地给出一句话： 如果你家里不是国家电网的子弟，那你只能学电气专业才能进，其他任何专业都不行；如果你家里是国家电网的职工，那你学一些相关的边缘专业也能进。而中国烟草更不同了。一位家长连麦，想让孩子通过学烟草专业进入中国烟草就业。张雪峰听完都笑了：烟草专业和烟草公司完全是两码事。</p><p> 他也能在最短时间内叫醒一个飘在云端的年轻人。有人看完《我在故宫修文物》就想学考古；看完《法医秦明》就想学法医；看完《华尔街之狼》就想学金融；看完《催眠大师》就想学心理学。</p><p> <strong>张雪峰给年轻人的梦中专业狠狠祛魅。</strong>有人想学法医。张雪峰告诉家长：能不能在装满腐肉的缸里待半个小时？接受了这个再谈法医的事。想学金融？家里能给资源支持吗？女孩能喝酒吗？性格够外向吗？这些问题看上去非常冒犯。但如果你随机抽取一名踏入金融行业的普通毕业生，他&#x2F;她一定明白张雪峰为何这么问。别人搞金融是华尔街之狼，你搞金融是国贸之牛马。你以为金融就是每天晚上美酒雪茄德州扑克，结果现在收入打折还要连夜通读掼蛋教程。家长总以为，跟钱有关的职业就一定能带来钱。但事实是，只要你的父母能在银行存够2000万，不管你是什么专业都能进银行。还有一位考生一心想学哲学，规划自己一路硕博，最终进高校当老师的美好人生——说得就像出门买菜那么轻巧，其中的痛苦、竞争和漫长的等待都被他丝滑绕开。张雪峰只是淡淡地问了他一句：将来吃不饱饭怎么办？学生沉默半晌回答：哦，我觉得不会的。</p><p> 一位女生称自己想学心理学，未来成为一名心理医生，开一家自己的心理咨询所。张雪峰连续抛出几个致命问题：“如果找不到工作你还学吗？” “北师大心理学毕业的都开不了自己的心理诊所，你觉得你这个分数段行吗？” “大多数的人都没有钱买房，没有钱过好自己的生活，你觉得他会给心理医生多少钱？” 有的家庭认为孩子英语成绩不错，想要学语言专业，以后就能进外交部。 张雪峰反问：“你知道有个东西叫做科大讯飞吗？” 甚至连外语院校的学生也在评论区现身说法： 那些真正进入外交部的人，绝不是老百姓想象中的“英语好的孩子”那么简单。即便是在一群外语天才里，又有几个能成功进入外交部工作？</p><p> 有学生想走中外合作办学，以后出国留学。 张雪峰的建议是，把这40万现金取出来，放在面前看一个小时。用父母的血汗钱换留学，值得吗？ 说白了就是那句最朴素的话：“谁家挣钱都不容易”。 因为走这条路的，既有家里不差钱的人，也有砸锅卖铁也要供孩子读书的普通人。他劝的是后者。</p><p> 在他的直播间里，家长们的开场白总是会出现一句：孩子有主见，孩子有个性，孩子不听我的。 于是张雪峰成为中国家长的代理人，把真话用最难听的方式说给最不愿意听真话的18岁孩子。 一位家长连麦，孩子能考600分，想要选一个不脏不累还能挣钱的专业，比如金融，可惜家里没有资源支持。 张雪峰在推荐了一系列专业后，最后确定学口腔是这个分数的最优选。 家长却支支吾吾：“孩子对口腔比较排斥，她嫌脏。” 画面中的张雪峰激动起来。他捧起面前的零食开始往镜头前砸：让她想象这些都是money，你问问她：还脏吗？ 挣钱这件事就没有不脏不累的。只不过“脏”的程度，“脏”的地方不一样罢了。 <strong>人在18岁这个年纪总会这样想：那个“站着把钱挣了”的例外，凭什么不是我？</strong> <strong>到了28岁才会晃过神来：原来，跪着挣钱的坑位都不多了。</strong></p><p> 其实，张雪峰并没有像大众刻板印象中那样，挥舞实用主义的大棒打死所有人。 大家都说他站在理想主义的反面，但他偶尔也有眼神一亮的时刻。 一个能考650分的女孩告诉家长，未来想学量子力学。甚至想好了以后要去中科院读博。优秀如此，家长还是长吁短叹：“这可怎么办”“毕竟是女孩”，不想让她走上科研这条险途。 但张雪峰却一反常态支持了这个女孩的决定。原因很简单，有些人读物理学可能是出于功利性质，想靠冷门专业冲一冲名校；而这个女生的追求非常纯粹：“我做科研不是想挣多少钱，也不是想搞多大贡献，就是单纯想比别人走得更远。”</p><p>说到底，张雪峰的方法论其实没有多么高深，普通人甚至也可以拿着这套“八连问”去帮身边的考生做排除题。 所有考生在连麦的流水线上，在几分钟内被迅速归类为几个因子：家庭条件、文科理科、分数高低、图稳定还是求赚钱。虽然被许多教育专家诟病此法不通人性，但不得不承认这套战术（在现阶段）非常高效，让评论区的大学生都为之惊叹：我就是这个专业的，张雪峰是真懂。学医吗？推荐口腔医学和临床医学，偶尔推荐中医。学农吗？推荐动物医学，偶尔推荐茶学和烟草。当老师吗？推荐国家免费师范生，非定向不能直接就业师范类一般不推荐，分低的推荐学前教育。 学文理兼招吗？推荐法学，会计，审计，财务管理，汉语言文学，分低的推荐护理。学理工科（不带化学物理)吗？推荐数学，统计，计算机。 学带化学的吗？推荐药学。学力学吗？推荐航空航天，机械，分低推荐交通类。学电学吗？推荐电子信息，电气自动化。除了这些，求稳定可以考军校，警校。想考公，直接报计算机、法学、财会、汉语言文学。当条条大路通牛马的时候，张雪峰至少还帮你指了一条“能快速省力当上牛马”的道路。在他的视频弹幕与评论区里，最常看到的话是：如果当年有张雪峰骂醒我就好了。渡人，而且专渡没有资源没有信息渠道的普通人，放在哪个朝代看，都算是大善事。<strong>毕竟有钱人各显神通，早就坐着游轮渡河了。</strong> <strong>张雪峰只不过是让穷人的小筏子尽量别翻船，因为他知道，这一翻可能什么都没了。</strong></p><p> 曾经，我经手过一个“对谈策划”。一边是北京某著名中学的毕业生，一边是小镇做题家。北京某著名中学的毕业生告诉我，记忆中的高中生活由社团、电影节和舞会组成。而小镇做题家的阵营，是我和我的同事们：一群挤破脑袋，牺牲了整个青春期，最后终于获得给北京房东打工资格的年轻人。北京某著名中学的春季舞会和衡水一中的食堂苦读都是教育的切面，人生早就在我们懵懂的时刻分野。</p><p>抖音上的家境富裕的18岁少年晒出了“不用高考组合”的合影，身穿晚礼服的他们分别去了伦敦、纽约和洛杉矶；而另一边，张雪峰的直播间挤满了等待连麦的家长，为了“不耽误孩子”，这些家长不惜在志愿咨询上花费上万元。他们朴素地希望孩子考出的每一分，都不要浪费在一个有就业危机的专业上。从某种角度来看，张雪峰甚至在为普通家庭做公益。除了他，哪个好心人会出力不讨好地替一个孩子量身打造就业路线？他推荐的专业，最后指向的都是就业，甚至把一个孩子未来的五险一金和结婚嫁娶都纳入考量。而这样的职业规划指导，在我们目前的教育系统中是空白的。</p><p>11年前的夏天，我也正在填报高考志愿。<br>而我的高中班主任的办公室大门，只会向冲击清北复交的尖子生、以及能够花钱读联合办学的富裕家庭打开。普通家庭、普通成绩的我，获得的志愿咨询时间只有10秒，以及一句：还行，你随便报吧。 回到家，我和父母三个人大眼瞪小眼。不要指望一个从未进入社会的18岁高中生，在几天之内就能确认自己未来的职业方向；也不要指望没有读过大学的工人父母，能够眼光犀利地为你预判未来十年的行业趋势。这时我看到了父母在前18年都未曾显现过的迷茫和无助：父母倾尽全力能托举你的时刻，从今天起，到此为止了。11年前没有抖音，也没有志愿指导，只有门户网站以及一本厚厚的院校手册。拿着纸和笔，就这么一个一个专业划过去。然后一头撞进一个自己完全不了解的专业中去。至于未来是坑是平地还是山坡，近似于赌博。<strong>家庭资源充足的人，父辈的人脉和文化资本就是最好的指导，他们会按照指定好的路线，进入一个家族成员熟悉的行业中去。家庭资源匮乏的人，举目四望，想问都不知道该问谁。</strong>运气好的人，选对了专业混到一口饭吃；运气不好的家庭，稀里糊涂选了一个就业前景一片黯淡的专业。四年后站在人才市场的洪流之中，都不知道自己到底是哪一步出错了。</p><p> 如何看待张雪峰和山河大学，最终还是不可免俗地变成一个阶层问题。家境殷实的人，学了艺术出了国，回国后能办独立画展。你问ta，究竟是理想重要还是饭碗重要，ta大概率会回答你：是坚持理想才有了ta如今的成就。 那如果换成山区的孩子、农村的孩子、县城的孩子呢？ 理想是一小部分人用来点缀人生的奢侈品。这句话非常政治不正确，不好听，却是事实。中国的精英阶层脚不沾地太久，许多从未就业过的教授、专家与知识分子们，指责张雪峰“污染”了某个专业，“亵渎”了高等教育，“忽悠”了考生家长们，甚至还不忘教育“大学生选专业不要以赚钱为标准”。</p><p>事实上，高等教育走到今天，提升自我价值的部分逐渐萎缩，如今已经彻底变成了筛选人才的技术工具。这个时候，张雪峰告诉你如果巧妙地利用工具为自己谋利，其实就是在教你，如何在最大程度上保全普通家庭前18年付出的教育成本。当然，他的建议不适用于所有人，但总有人能被他“捞”一把。职业规划教育，填补了那些欠缺社会资源与文化资本的普通家庭的空白。也许它现在以“网红老师”的面目出现，还不够完美，但至少也比没有强。</p><p>如果我今年18岁，我一定会看不惯张雪峰，他就像是我父母请来的爹味代理人和帮凶，满嘴功利主义和稳定至上。而现在我快要30岁，我向张雪峰妥协了：如果考生没有想法，父母帮不上忙，不妨听听他的建议。也许他给你指的路很乏味，但是他真的想让你挣到钱，有份工作糊口。张雪峰的直播间，或许就是普通家庭在命运之锤砸下来之前，能做的最后一次主动闪避。中国人朴素地相信着“教育改变命运”的道理，农耕文明流淌在我们血液里的规则，就是一份耕耘换来一分收获。从山河大学到张雪峰，七月份的争辩，背后藏着中国人最质朴的期盼——好的教育，就是让人拥有平等的资格，只要努力就能换来体面的未来。</p>]]></content>
    
    
    <categories>
      
      <category>Daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎样系统地学习CS61A——以CS61A（Fa22）为例</title>
    <link href="/2023-07-14/%E6%80%8E%E6%A0%B7%E7%B3%BB%E7%BB%9F%E5%9C%B0%E5%AD%A6%E4%B9%A0CS61A%E2%80%94%E2%80%94%E4%BB%A5CS61A%EF%BC%88Fa22%EF%BC%89%E4%B8%BA%E4%BE%8B/"/>
    <url>/2023-07-14/%E6%80%8E%E6%A0%B7%E7%B3%BB%E7%BB%9F%E5%9C%B0%E5%AD%A6%E4%B9%A0CS61A%E2%80%94%E2%80%94%E4%BB%A5CS61A%EF%BC%88Fa22%EF%BC%89%E4%B8%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Major</category>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS61A</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-ChurchNumeral丘奇数</title>
    <link href="/2023-07-09/CS61A-ChurchNumeral%E4%B8%98%E5%A5%87%E6%95%B0/"/>
    <url>/2023-07-09/CS61A-ChurchNumeral%E4%B8%98%E5%A5%87%E6%95%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Major</category>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS61A</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华中科技大学物理实验报告</title>
    <link href="/2023-07-06/%E5%8D%8E%E4%B8%AD%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2023-07-06/%E5%8D%8E%E4%B8%AD%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="物理实验【一】"><a href="#物理实验【一】" class="headerlink" title="物理实验【一】"></a>物理实验【一】</h1><h2 id="密立根油滴"><a href="#密立根油滴" class="headerlink" title="密立根油滴"></a>密立根油滴</h2><p><a href="https://blog.csdn.net/lee1hong/article/details/111825258?spm=1001.2014.3001.5501">软件学院</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005676&amp;idx=1&amp;sn=545ea872b068b360bdca9a1329941d09&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="https://mp.weixin.qq.com/s/Fu1dgxkQULMBvJsALF0PWA">化学学院</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000067&amp;idx=3&amp;sn=bc2dd4bda2b1ed20fbadbe054c56069a&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=100003770&amp;idx=1&amp;sn=6a95b3476d4e8a14822b59d8b822c7bf&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506999&amp;idx=3&amp;sn=e96fe7a49bf8ab62d4c83d331f25c67c&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653754983&amp;idx=3&amp;sn=68d2ff1d3e66d4e18c03ea2ffc62a3c5&amp;scene=19#wechat_redirect">aia小灵通</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg5Mjc2ODc0NQ==&amp;mid=2247495827&amp;idx=7&amp;sn=c450fac7390e58a723b900305232e04c&amp;scene=19#wechat_redirect">青春计算机</a></p><h2 id="伏安特性"><a href="#伏安特性" class="headerlink" title="伏安特性"></a>伏安特性</h2><p><a href="https://blog.csdn.net/lee1hong/article/details/111824882?spm=1001.2014.3001.5501">软件学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005630&amp;idx=1&amp;sn=8f2a9841248ce8006109bffe572e4c19&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000067&amp;idx=8&amp;sn=c561b79e288801cceaf37ce033633f6c&amp;scene=19#wechat_redirect">化学学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000067&amp;idx=8&amp;sn=c561b79e288801cceaf37ce033633f6c&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=100003812&amp;idx=1&amp;sn=6e6b5570adb89bc3f17e794c13b70cd0&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506999&amp;idx=5&amp;sn=fa2e2e324d219064eaba0bd4ec6b59be&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653754929&amp;idx=2&amp;sn=ce4c4a0b86811f54f4dbcc1f91afb4b0&amp;scene=19#wechat_redirect">aia小灵通</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg5Mjc2ODc0NQ==&amp;mid=2247495827&amp;idx=2&amp;sn=b42b9db6035e4cced6387c65601b3c67&amp;scene=19#wechat_redirect">青春计算机</a></p><h2 id="多功能摆"><a href="#多功能摆" class="headerlink" title="多功能摆"></a>多功能摆</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005698&amp;idx=1&amp;sn=a871e583bc1969496050adf361754308&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000067&amp;idx=5&amp;sn=18079d69ab2e5cf36726f653f4faade9&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506999&amp;idx=2&amp;sn=4e9736271b168bdcdb6633fb06ed3246&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653754929&amp;idx=3&amp;sn=789fd1f2333f8c35cf62a4c8c106f059&amp;scene=19#wechat_redirect">aia小灵通</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg5Mjc2ODc0NQ==&amp;mid=2247495827&amp;idx=4&amp;sn=44cdf5258694a544fb0af929c2f19cdb&amp;scene=19#wechat_redirect">青春计算机</a></p><h2 id="组合光学"><a href="#组合光学" class="headerlink" title="组合光学"></a>组合光学</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005829&amp;idx=1&amp;sn=d7aceac199527379bcf78d7f4140f7b2&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000103&amp;idx=7&amp;sn=c2d07cbf5404e59b9c2d831bca2c0860&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=2247491880&amp;idx=1&amp;sn=30eecc6cf3a53b647c81b64f3b9c056b&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506999&amp;idx=6&amp;sn=ca3dff12c156b4c618205b22f55a8b36&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg5Mjc2ODc0NQ==&amp;mid=2247495827&amp;idx=1&amp;sn=4809be573a12a9a92465c7478cc4696f&amp;scene=19#wechat_redirect">青春计算机</a></p><h2 id="声速测量"><a href="#声速测量" class="headerlink" title="声速测量"></a>声速测量</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005640&amp;idx=1&amp;sn=7fddefcd59432a8d59597e008220446a&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000067&amp;idx=1&amp;sn=4bb60defd241b12eaf2f2593e2d386d6&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=100003761&amp;idx=1&amp;sn=47e27bd07adf657dcc76787e8807acde&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506999&amp;idx=4&amp;sn=be56c0fd62b4bfa02978155335bdc5fa&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653754929&amp;idx=1&amp;sn=7b5ea2513088161096241c08f3ef8668&amp;scene=19#wechat_redirect">aia小灵通</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg5Mjc2ODc0NQ==&amp;mid=2247495827&amp;idx=8&amp;sn=0b393e65403c0033cba82307f9c2d20f&amp;scene=19#wechat_redirect">青春计算机</a></p><h2 id="音叉振动"><a href="#音叉振动" class="headerlink" title="音叉振动"></a>音叉振动</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005715&amp;idx=1&amp;sn=1e22de4fabd373e90f6f98f5de9e9d40&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000103&amp;idx=6&amp;sn=91948e9d0607235219273f649dba55a7&amp;scene=19#wechat_redirect">机械学院</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=2247491882&amp;idx=1&amp;sn=f26d652a8393622a051f47c60cc69b59&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506999&amp;idx=7&amp;sn=ded9d0eba201ae4780081113439557e8&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653755082&amp;idx=7&amp;sn=791fabdcff3259afb18e14b2754b9bba&amp;scene=19#wechat_redirect">aia小灵通</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg5Mjc2ODc0NQ==&amp;mid=2247495827&amp;idx=5&amp;sn=5fb67f2242c88abd66228ecf3efc3030&amp;scene=19#wechat_redirect">青春计算机</a></p><h2 id="示波器的使用"><a href="#示波器的使用" class="headerlink" title="示波器的使用"></a>示波器的使用</h2><p><a href="https://blog.csdn.net/lee1hong/article/details/111825347?spm=1001.2014.3001.5501">软件学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005654&amp;idx=1&amp;sn=0f9142932968c54ec49457fa6f4006b6&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000067&amp;idx=6&amp;sn=5fd5255e7c8ee1493f221966863f8717&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=100003742&amp;idx=1&amp;sn=835a024c9ed6b9890e252c4ce8a937db&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506999&amp;idx=1&amp;sn=1e9302e58f2c30cc9f73ee8af76b504d&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653754983&amp;idx=4&amp;sn=d14f2fd825119e47725052a2c89fa09a&amp;scene=19#wechat_redirect">aia小灵通</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg5Mjc2ODc0NQ==&amp;mid=2247495827&amp;idx=6&amp;sn=61a85d2eda9da4a241078b384c41d53d&amp;scene=19#wechat_redirect">青春计算机</a></p><h2 id="分光计"><a href="#分光计" class="headerlink" title="分光计"></a>分光计</h2><p><a href="https://mp.weixin.qq.com/s/Lg-fbee41rn-4SyuQjIccQ">机械学院</a><br><a href="https://mp.weixin.qq.com/s/r9OlqEAMAFfUumh8AlwCUQ">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=100003516&amp;idx=1&amp;sn=a6bfb816092887bf48a4b885e7f3a69b&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653754983&amp;idx=1&amp;sn=4e0b110f03c8d79de04217a47d495069&amp;scene=19#wechat_redirect">aia小灵通</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg5Mjc2ODc0NQ==&amp;mid=2247495827&amp;idx=3&amp;sn=1cc5706873e559959a8dfbf108c5c906&amp;scene=19#wechat_redirect">青春计算机</a></p><h1 id="物理实验【二】"><a href="#物理实验【二】" class="headerlink" title="物理实验【二】"></a>物理实验【二】</h1><h2 id="RLC电路的暂态过程"><a href="#RLC电路的暂态过程" class="headerlink" title="RLC电路的暂态过程"></a>RLC电路的暂态过程</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005768&amp;idx=1&amp;sn=9eef4a993181fcba4837c98b0a6adf31&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506998&amp;idx=4&amp;sn=525285d85a30d532b28ec7aa995506b7&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000103&amp;idx=1&amp;sn=ce4104c0f67d6e1ec4ebf973ccfe252a&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=2247491887&amp;idx=1&amp;sn=2d81f5cc3b755dce71f591dbace8489d&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653755082&amp;idx=2&amp;sn=bf64dc1dc4f90ad4170eb8298e341ffc&amp;scene=19#wechat_redirect">aia小灵通</a></p><h2 id="霍尔效应"><a href="#霍尔效应" class="headerlink" title="霍尔效应"></a>霍尔效应</h2><p><a href="https://blog.csdn.net/lee1hong/article/details/111825385?spm=1001.2014.3001.5502">软件学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005619&amp;idx=1&amp;sn=eba9bcd3bb3adcb0ef82bb1c6943c865&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506998&amp;idx=7&amp;sn=f5af8cd0726140baf7926fac19a0f641&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000067&amp;idx=2&amp;sn=e249116da77d01f2df2a23d92731c926&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=100003750&amp;idx=1&amp;sn=49660cedbee59013925b1d40b63cbd44&amp;scene=19#wechat_redirect">网安学院</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU5Mjg2ODkxNg==&amp;mid=100001375&amp;idx=4&amp;sn=50a59e9fcb80be1aa419dacc44713071&amp;chksm=7e186504496fec128e8b73266e003bcf8b204df61a92fc8721f51688200e50ff73674cdd7dde&amp;mpshare=1&amp;scene=23&amp;srcid=0724krFS4nircvo6xkjgXfeR&amp;sharer_sharetime=1658592115438&amp;sharer_shareid=555b3bc50bfb7b5c8fe4ad35fe242d68#rd">化学学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653754983&amp;idx=2&amp;sn=16027172f5623400baa8e7182c495de1&amp;scene=19#wechat_redirect">aia小灵通</a></p><h2 id="偏振光"><a href="#偏振光" class="headerlink" title="偏振光"></a>偏振光</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005752&amp;idx=1&amp;sn=128dc87b4cc827cc8bb633333d179aca&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506998&amp;idx=3&amp;sn=304597f6f9ff308cec10efdcfcde978f&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000103&amp;idx=4&amp;sn=66e36556b4380930c08f70116c8ff2cb&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=2247491886&amp;idx=1&amp;sn=6929d031e9e5f3618d835f8e276992c2&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653755082&amp;idx=5&amp;sn=f77adc03594bbb3b591acb21472bf18a&amp;scene=19#wechat_redirect">aia小灵通</a></p><h2 id="液体的表面张力"><a href="#液体的表面张力" class="headerlink" title="液体的表面张力"></a>液体的表面张力</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005730&amp;idx=1&amp;sn=10268528250d29cf488c57bac99d51ac&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506998&amp;idx=2&amp;sn=360a805eac4b01ecd95a32726457e4d3&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000103&amp;idx=5&amp;sn=89d4d2dacc48c0735489170b30d97db9&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=2247491884&amp;idx=1&amp;sn=fab7018bcc86ce69e95d93cc51fddd93&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653755082&amp;idx=6&amp;sn=f15f377230263ead443cea0e7ea14962&amp;scene=19#wechat_redirect">aia小灵通</a></p><h2 id="导热系数的测量"><a href="#导热系数的测量" class="headerlink" title="导热系数的测量"></a>导热系数的测量</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005800&amp;idx=1&amp;sn=d2394a0fce4b12c566712a74ec1439c5&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506998&amp;idx=6&amp;sn=5643cd5fe27d628248965fdef88eb349&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000103&amp;idx=8&amp;sn=89d53a2952023c038d9030b1c6ebf44e&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=2247491885&amp;idx=1&amp;sn=1364d5e180abeae4b19170c67270b340&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653755082&amp;idx=3&amp;sn=0098aaa3edc8bfa9a7e20197ecdec555&amp;scene=19#wechat_redirect">aia小灵通</a></p><h2 id="转动惯量"><a href="#转动惯量" class="headerlink" title="转动惯量"></a>转动惯量</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005780&amp;idx=1&amp;sn=d80bcf536c1c31bf4f6427f043d97d0a&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506998&amp;idx=5&amp;sn=bce6a22196321cb92a211479590f5087&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000103&amp;idx=3&amp;sn=4baabc7c2884ed61837b0fc091fa4f86&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=2247491881&amp;idx=1&amp;sn=990626ba7cca6e6d56dd247ed5c4a1e1&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653755082&amp;idx=8&amp;sn=45dea80adffa6585b5a946f234d1eced&amp;scene=19#wechat_redirect">aia小灵通</a></p><h2 id="电桥实验"><a href="#电桥实验" class="headerlink" title="电桥实验"></a>电桥实验</h2><p><a href="https://blog.csdn.net/lee1hong/article/details/111825303?spm=1001.2014.3001.5502">软件学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4Mzg0MTMzMA==&amp;mid=100005600&amp;idx=1&amp;sn=bef88c38bb74bf146a0c01320ad9ad07&amp;scene=19#wechat_redirect">自动化学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4Nzc0NjY2OA==&amp;mid=2247506998&amp;idx=8&amp;sn=bee3cb29d942a65b2ce51a9ffc355072&amp;scene=19#wechat_redirect">电信学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU4OTYzNzIxMA==&amp;mid=100000067&amp;idx=4&amp;sn=752a43444bbb3d65eede6a0418cf6fd4&amp;scene=19#wechat_redirect">机械学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MTE2NzE5OA==&amp;mid=100003731&amp;idx=1&amp;sn=f1dbb6fff21d7ce1d3e4ca66cab682b4&amp;scene=19#wechat_redirect">网安学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5Mjg2ODkxNg==&amp;mid=100001375&amp;idx=2&amp;sn=5865d3172dcf8a9f641f1f9d35308408&amp;chksm=7e186504496fec12be06e466035cae87d1ee26fbf2f6653aa8fa28ccce5e837c67d3e677c34b&amp;mpshare=1&amp;scene=23&amp;srcid=0925d8QZCUiOoxNIcekLcjRm&amp;sharer_sharetime=1664096883957&amp;sharer_shareid=555b3bc50bfb7b5c8fe4ad35fe242d68#rd">化学学院</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MzIzOTQ5Mw==&amp;mid=2653754983&amp;idx=5&amp;sn=85ab163745bbe37404fe20f7bc11e2fb&amp;scene=19#wechat_redirect">aia小灵通</a></p><h2 id="迈克尔逊干涉"><a href="#迈克尔逊干涉" class="headerlink" title="迈克尔逊干涉"></a>迈克尔逊干涉</h2><p><a href="https://mp.weixin.qq.com/s/zGx8Diy7krWtVkmjAN5Xgg">自动化学院</a></p><div class="note note-success">            <p>整理自<a href="https://dekrt.cn/">dekrt’s blog</a>，版权归此作者所有。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>HUST</category>
      
      <category>Answer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Answer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华中科技大学军事理论线上作业</title>
    <link href="/2023-07-05/%E5%8D%8E%E4%B8%AD%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6%E5%86%9B%E4%BA%8B%E7%90%86%E8%AE%BA%E7%BA%BF%E4%B8%8A%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023-07-05/%E5%8D%8E%E4%B8%AD%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6%E5%86%9B%E4%BA%8B%E7%90%86%E8%AE%BA%E7%BA%BF%E4%B8%8A%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="华中科技大学军事理论线上答案"><a href="#华中科技大学军事理论线上答案" class="headerlink" title="华中科技大学军事理论线上答案"></a>华中科技大学军事理论线上答案</h1><h2 id="第一章答案"><a href="#第一章答案" class="headerlink" title="第一章答案"></a>第一章答案</h2><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">1</span>.西汉初期，实行征兵制，规定凡年满<span class="hljs-number">20</span>岁的男丁都要登记，从<span class="hljs-number">23</span>岁起，服兵役（）。<span class="hljs-selector-tag">A</span> .一年 <span class="hljs-selector-tag">B</span> .两年 C .三年 D .四年正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">2.</span>“天下虽安，忘战必危”出自于<span class="hljs-punctuation">(</span> <span class="hljs-punctuation">)</span>。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>《孙子兵法》 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>《孙膑兵法》 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>《战争论》 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>《司马法·仁本》正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">3.</span>下列哪个朝代对长城陆续加工增修并逐渐改建成最接近今天的面貌。<span class="hljs-punctuation">(</span> <span class="hljs-punctuation">)</span><span class="hljs-variable">A</span> <span class="hljs-operator">.</span>元朝 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>清朝 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>唐朝 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>明朝正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">4.</span>国防是随着<span class="hljs-punctuation">(</span> <span class="hljs-punctuation">)</span>的出现而产生的。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>阶级 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>军队 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>国家 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>社会正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">5</span>.下列哪个国家的国防类型是典型的中立型国防（ ）<span class="hljs-selector-tag">A</span> .瑞士 <span class="hljs-selector-tag">B</span> .韩国 C .朝鲜 D .中国正确答案：<span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">6</span>.“兵者，国之大事”是出自哪本兵书（ ）<span class="hljs-selector-tag">A</span> .《孙子兵法》 <span class="hljs-selector-tag">B</span> .《汉书》 C .《兵制》 D .《孙膑兵法》正确答案：<span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">7</span>.“足食，足兵，民信”是由谁提出（ ）<span class="hljs-selector-tag">A</span> .老子 <span class="hljs-selector-tag">B</span> .孔子 C .孙武 D .岳飞正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">8</span>.在中国东部沿海设置的卫、所等海防工程是在哪个朝代建立（ ）<span class="hljs-selector-tag">A</span> .宋朝 <span class="hljs-selector-tag">B</span> .明朝 C .清朝 D .元朝正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">9.</span>长城修筑的历史最早可上溯到（ ）时期<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>秦朝 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>明朝 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>春秋战国 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>西周正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">10.第二次鸦片战争爆发于（ ）A <span class="hljs-string">.1840</span>年 B <span class="hljs-string">.1841</span>年 C <span class="hljs-string">.1856</span>年 D <span class="hljs-string">.1860</span>年正确答案：C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">11</span>.国防建设是我国社会主义建设事业的重要组成部分，必须适应国家利益的需要，必须与经济建设协调发展，必须坚持以()为中心，必须遵循独立自主方针，必须由全国军民共同建设，必须进行全面深入改革。<span class="hljs-selector-tag">A</span> .四项基本原则 <span class="hljs-selector-tag">B</span> .现代化建设 C .富国强军 D .装备化建设正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">12.2013</span>年，中国共产党<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>决定对深化国防和军队改革，构建中国特色现代军事力量体系作出了明确部署。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>十八届一中全会 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>十八届二中全会 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>十八届三中全会 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>十八届四中全会正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">13</span>.我国坚持走和平发展的道路，坚定不移地奉行( )的国防政策。<span class="hljs-selector-tag">A</span> .防御性 <span class="hljs-selector-tag">B</span> .攻击性 C .半攻击半防御 D .中立性正确答案：<span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">14</span>.根据宪法制定并于<span class="hljs-number">1997</span>年通过的《中华人民共和国国防法》进一步明确规定：中华人民共和国的武装力量受( )领导。<span class="hljs-selector-tag">A</span> .全国人民 <span class="hljs-selector-tag">B</span> .中国共产党 C .工人阶级 D .中国共产党和其他民主党派正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">15</span>.()，作为军委主管国防动员和后备力量建设的职能部门——军委国防动员部成立。<span class="hljs-keyword">A</span> .<span class="hljs-number">2016年1月11</span>日 B .<span class="hljs-number">2016年8月1</span>日 C .<span class="hljs-number">2015年1月11</span>日 D .<span class="hljs-number">2015年8月1</span>日正确答案：<span class="hljs-keyword">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">16</span>.国防动员的内容十分丰富，其中()是核心。<span class="hljs-selector-tag">A</span> .武装力量动员 <span class="hljs-selector-tag">B</span> .国民经济动员 C .人民防空动员 D .交通运输动员正确答案：<span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">17.</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>，是为了应对战争、突发事件和紧急状态的需要，国家有计划、有组织地将交通运输设施、设备、工具和交通运输专业技术保障力量及其相应的体制，由平时状态转入战时<span class="hljs-punctuation">(</span>急时<span class="hljs-punctuation">)</span>状态所进行的一系列活动。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>武装力量动员 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>国民经济动员 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>人民防空动员 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>交通运输动员正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">18</span>.()，是国家有计划地组织各政党、各人民团体，以及工、农、商、学等社会各界，结成广泛的爱国统一战线，鼓励国内社会政治力量参与应对战争、突发事件和紧急状态所进行的一系列活动。<span class="hljs-selector-tag">A</span> .政治宣传和精神灌注 <span class="hljs-selector-tag">B</span> .国内社会政治力量动员 C .外交动员 D.国民经济动员正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">19.</span>健全战时<span class="hljs-punctuation">(</span>急时<span class="hljs-punctuation">)</span>国防动员体制，是军队和政府的共同职责。我国《国防法》明确规定：<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>动员准备和动员实施工作。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>国务院 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>中央军委 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>国防部 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>国务院和中央军委共同领导正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">20</span>.国防动员令是国家为了应对战争、突发事件和紧急状态的需要，由国家最高权力机关决定并依法下达的国防动员决定和国防动员实施命令，实际上是国家宣布进入战时(急时)状态的命令。我国《宪法》明确规定：()决定战争和和平的问题；()会决定战争状态的宣布，决定全国总动员或者局部动员；国家主席根据全国人民代表大会及常务委员会的决定，宣布战争状态，宣布进入紧急状态，发布动员令。<span class="hljs-selector-tag">A</span> .全国人民代表大会，全国人民代表大会<span class="hljs-selector-tag">B</span> .全国人民代表大会，全国人民代表大会常务委员C .全国人民代表大会常务委员，全国人民代表大会常务委员D .全国人民代表大会常务委员，全国人民代表大会正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">21.</span>全民国防教育日是（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>每年<span class="hljs-number">9</span>月的第三个星期五<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>每年<span class="hljs-number">10</span>月的第三个星期五<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>每年<span class="hljs-number">9</span>月的第三个星期六<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>每年<span class="hljs-number">10</span>月的第三个星期六正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">22.</span>按照《兵役法》规定我国公民的合法服兵役的最高年龄限制是<span class="hljs-punctuation">(</span> <span class="hljs-punctuation">)</span>岁。<span class="hljs-variable">A</span><span class="hljs-number">.18</span> <span class="hljs-variable">B</span><span class="hljs-number">.20</span> <span class="hljs-built_in">C</span><span class="hljs-number">.22</span> <span class="hljs-built_in">D</span><span class="hljs-number">.24</span>正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">23</span>.中国人民解放军的“三化”是指（ ）、现代化和 正规化。<span class="hljs-selector-tag">A</span> .革命化 <span class="hljs-selector-tag">B</span> .制度化 C .规范化 D .程序化正确答案：<span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">24.第一次鸦片战争是在（ ）年爆发。A <span class="hljs-string">.1840</span> B <span class="hljs-string">.1841</span> C <span class="hljs-string">.1842</span> D <span class="hljs-string">.1843</span>正确答案：A</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">25</span>.联盟型国防可分为两种：一是一元体系联盟，一是（ ）联盟。<span class="hljs-selector-tag">A</span> .多元体系 <span class="hljs-selector-tag">B</span> .二元体系 C .三元体系 D .四元体系正确答案：<span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">26.《兵役法》规定，平时应征公民拒绝、逃避征集拒不改正的，在（）年内不得被录取为国家公务员、国有企业职员，不得出国或者升学。A <span class="hljs-string">.1</span> B <span class="hljs-string">.2</span> C <span class="hljs-string">.3</span> D <span class="hljs-string">.4</span>正确答案：B</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">27</span>.《孙子兵法》的作者是（ ）。<span class="hljs-selector-tag">A</span> .孙武 <span class="hljs-selector-tag">B</span> .孙膑 C .孔子 D .孟子正确答案：<span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">28</span>.秦朝的主要武装力量体制包括京师兵、郡县兵和（ ）。<span class="hljs-selector-tag">A</span> .骑兵 <span class="hljs-selector-tag">B</span> .边兵 C .单兵 D .步兵正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">29</span>.长城的有著名的“九镇”、“三关”，其中三关包括嘉峪关、山海关和（）。<span class="hljs-selector-tag">A</span> .玉门关 <span class="hljs-selector-tag">B</span> .居庸关 C .井陉关 D .雁门关正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">30</span>.中国人民解放军的现役部队包括陆军、空军、海军和（ ）。<span class="hljs-selector-tag">A</span> .民兵 <span class="hljs-selector-tag">B</span> .火箭军 C .通信兵 D .特种兵正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">31.</span>国防的基本特征包括（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>国防安全的整体性<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>国防实力的综合性<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>国防手段的多元性<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>国防建设的系统协调性<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>国防事业的社会性正确答案：<span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">32</span>.中国古代的国防工程包括（ ）<span class="hljs-selector-tag">A</span> .城池<span class="hljs-selector-tag">B</span> .京杭大运河C .长城D .海防工程正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">33.</span>以下属于国防的地位和作用的是（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>国家安全的重要保障<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>国家经济发展的重要基础<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>国家独立自主的前提<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>国家繁荣发展的重要条件正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">34</span>.国防的类型有扩张型、中立型和( )<span class="hljs-selector-tag">A</span> .同盟型<span class="hljs-selector-tag">B</span> .联盟型C .侵略型D .自卫型正确答案：<span class="hljs-selector-tag">B</span>,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">35.</span>国家作为一个政治概念，应包括哪几个基本要素（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>领土<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>政府<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>主权<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>人民 <span class="hljs-built_in">E</span><span class="hljs-operator">.</span>国防正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">36.</span>国家利益按利益的内容可分为（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>政治利益 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>文化利益 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>安全利益 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>军事利益 <span class="hljs-built_in">E</span><span class="hljs-operator">.</span>经济利益正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">37.</span>下列哪些属于非传统安全领域（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>能源危机<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>环境问题<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>人权问题<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>军事冲突<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>网络安全正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">38.</span>以下属于联盟型国防类型的国家是（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>日本<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>瑞典<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>中国<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>美国<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>瑞士正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">39</span>.下列属于国防要素内容的是( )<span class="hljs-selector-tag">A</span> .政治要素<span class="hljs-selector-tag">B</span> .经济要素C .文化要素D .历史要素正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">40</span>.中国古代国防思想的局限性主要表现在（ ）<span class="hljs-selector-tag">A</span> .重防非攻<span class="hljs-selector-tag">B</span> .寓兵于农C .重陆轻海D .以仁为本正确答案： <span class="hljs-selector-tag">A</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">41.1958</span>年<span class="hljs-number">7</span>月，中央军委扩大会议通过的决议规定，中央军委是全军统帅，下设()；国防部是军委对外的名义。军委决定的事项，凡须经国务院批准，或须用行政名义下达的，由国防部签署对外发布。<span class="hljs-selector-tag">A</span> .总参谋部<span class="hljs-selector-tag">B</span> .总政治部C .总后勤部D .总装备部正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">42</span>.我国维护国家安全的基本目标和任务是( )。<span class="hljs-selector-tag">A</span>.制止分裂，促进统一，防备和抵抗侵略，捍卫国家主权、领土完整和海洋权益<span class="hljs-selector-tag">B</span>.维护国家发展利益，促进经济社会全面、协调、可持续发展C.保障人民群众的政治、经济、文化权益D .保持 正常社会秩序和社会稳定正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">43.2015</span>年<span class="hljs-number">12</span>月<span class="hljs-number">31</span>日，成立了<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>。这是党中央和中央军委着眼实现中国梦、强军梦作出的重大决策，是构建中国特色现代军事力量体系的战略举措，必将成为我军现代化建设的一个重要里程碑，载入人民军队史册。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>陆军领导机构<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>海军领导机构<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>火箭军<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>战略支援部队正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">44</span>.目前我国海军共有三大舰队分别是( )<span class="hljs-selector-tag">A</span> .北海舰队<span class="hljs-selector-tag">B</span> .东海舰队C .渤海舰队D .南海舰队正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">45</span>.中央军委勤保障部队于<span class="hljs-number">2016</span>年<span class="hljs-number">9</span>月<span class="hljs-number">13</span>日成立，部队组成主要包括( )。<span class="hljs-selector-tag">A</span> .武汉联勤保障基地<span class="hljs-selector-tag">B</span> .郑州联勤保障基地C.无锡、桂林、西宁、沈阳、武汉五个联勤保障重心D.无锡、桂林、西宁、沈阳、郑州五个联勤保障重心正确答案： <span class="hljs-selector-tag">A</span>,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">46</span>.人民防空动员，是国家为了保障人民群众的生命和财产安全而组织进行的防备敌人空袭、消除空袭后果的一系列活动。人民防空动员，在部分国家也称为民防动员。在我国，人民防空与()一起构成三位一体的国土防空体系。<span class="hljs-selector-tag">A</span> .工农业防空<span class="hljs-selector-tag">B</span> .要地防空C .野战防空D .海陆防空正确答案：<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">47</span>.交通运输动员的目的，主要是为动员输送、军队机动、物资供应、居民疏散、工厂和机关的转移搬迁等提供交通运输保障。交通运输动员的内容，主要包括()。<span class="hljs-selector-tag">A</span> .交通运输工具动员<span class="hljs-selector-tag">B</span> .交通运输设施、设备和物资动员C .交通运输铁路D.交通运输人员动员正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">48</span>.国防动员令是国家发布的关于动员实施的命令，具有很强的( )。<span class="hljs-selector-tag">A</span> .政治性<span class="hljs-selector-tag">B</span> .权威性C .严肃性D .时效性正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">49</span>.搞好人民防空动员，对于普及和加强人民防空知识，推进防空基础设施建设，组织人员和物资疏散隐蔽，加强重要军事、政治和经济目标防护，消除空袭后果，减少国家及人民群众生命财产的损失，保存战争潜力，增强国家的防御能力，具有重要意义。人民防空动员的内容，主要包括()等几个方面。<span class="hljs-selector-tag">A</span> .群众防护动员<span class="hljs-selector-tag">B</span> .人防专业队伍动员C .人防工程物资技术保障动员D.人防预警保障动员正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">50</span>.武装力量是国家或政治集团所拥有的各种武装组织的总称。我国的武装力量主要包括()。<span class="hljs-selector-tag">A</span> .中国人民解放军<span class="hljs-selector-tag">B</span> .中国人民武装警察部队C .中国民兵D .中国自卫军正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">51.2016</span>年<span class="hljs-number">2</span>月，成立中国人民解放军<span class="hljs-number">5</span>大战区，撤销原来的<span class="hljs-number">7</span>大军区。五大战区分别是：东部战区、西部战区、南部战区，北部战区和中部战区，真正形成( )的格局。<span class="hljs-selector-tag">A</span> .军委管总<span class="hljs-selector-tag">B</span> .战区主战C .军种主建D .多兵种配合正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">52</span>.中国人民解放军是中国共产党缔造和领导的人民军队，是中国武装力量的主体。人民解放军由()和( )组成。<span class="hljs-selector-tag">A</span> .现役部队<span class="hljs-selector-tag">B</span> .预备役部队C .民兵D .工程兵正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">53</span>.国防领导体制，是国家（）国防建设和军事斗争的组织体系及相应制度，包括国防领导机构的设置、职权划分和相互关系等，是国家体制和军事组织体制的重要组成部分。<span class="hljs-selector-tag">A</span> .谋划<span class="hljs-selector-tag">B</span> .决策C .指挥D .协调正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">54</span>.中国人民共和国武装力量，由（ ）组成。<span class="hljs-selector-tag">A</span> .中国人民解放军现役部队<span class="hljs-selector-tag">B</span> .预备役部队C .中国人民武装警察部队D.民兵正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">55</span>.军民融合是指把国防和军队现代化建设深深融入经济社会发展体系之中，全面推进军民在（）等各个领域的融合。<span class="hljs-selector-tag">A</span> .经济<span class="hljs-selector-tag">B</span> .科技C .教育D .人才正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">56</span>.国防法规包含（ ）等法律。<span class="hljs-selector-tag">A</span> .《国防法》<span class="hljs-selector-tag">B</span> .《兵役法》C .《国防教育法》D .《国防动员法》正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">57</span>.公民履行兵役义务的主要形式有（ ）<span class="hljs-selector-tag">A</span> .服现役<span class="hljs-selector-tag">B</span> .服预备役C .参加学生军事训练D .学习军事理论知识正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">58</span>.公民的国防权利包括（ ）<span class="hljs-selector-tag">A</span> .提出建议权<span class="hljs-selector-tag">B</span> .制止和检举权C .获得补偿权D .服兵役权正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">59</span>.国防动员体制包括（ ）<span class="hljs-selector-tag">A</span> .决策体制<span class="hljs-selector-tag">B</span> .协调体制C .执行体制D .激励体制正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">60</span>.国防动员的内容十分丰富，通常包括（ ）以及政治动员等几个主要方面。<span class="hljs-selector-tag">A</span> .武装力量动员<span class="hljs-selector-tag">B</span> .国民经济动员C .人民防空动员D .交通运输动员正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><h2 id="第二章-第一二节答案"><a href="#第二章-第一二节答案" class="headerlink" title="第二章 第一二节答案"></a>第二章 第一二节答案</h2><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">1.</span>增强忧患意识，做到居安思危，是我们治党治国必须始终坚持的一个重大原则。我们党要巩固执政地位，要团结带领人民坚持和发展中国特色社会主义，保证（）是头等大事。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>改革开放 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>军事强大<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>国家安全 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>经济发展正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">2</span>.国家安全工作应当坚持（ ）。<span class="hljs-selector-tag">A</span> .总体安全观 <span class="hljs-selector-tag">B</span> .总体国家安全观 C .国家安全观 D .传统安全观正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">3.</span>国家安全工作应当坚持以（ ）为宗旨。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>政治安全 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>经济安全 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>人民安全 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>社会安全正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">4</span>.国家安全工作应当坚持以( )为根本。<span class="hljs-selector-tag">A</span> .政治安全 <span class="hljs-selector-tag">B</span> .经济安全 C .人民安全 D .社会安全正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">5</span>.国家安全工作应当坚持以( )为基础。<span class="hljs-selector-tag">A</span> .政治安全 <span class="hljs-selector-tag">B</span> .经济安全 C .人民安全 D .社会安全正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">6.</span>坚持（）对国家安全工作的领导，建立集中统一、高效权威的国家安全领导体制。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>人民代表大会 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>国家安全局 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>公安机关 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>中国共产党正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">7</span>.维护国家安全，应当遵守宪法和法律，坚持社会主义法治原则，尊重和保障人权，依法保护公民的（）。<span class="hljs-selector-tag">A</span> .权利和自由 <span class="hljs-selector-tag">B</span> .权利和义务 C .自由和平等 D .义务和权益正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">8.</span>维护国家安全，应当与（ ）相协调。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>经济发展 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>社会发展 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>社会文化发展 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>经济社会发展正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">9.</span>维护国家安全，应当坚持（），专门工作与群众路线相结合，充分发挥专门机关和其他有关机关维护国家安全的职能作用，广泛动员公民和组织，防范、制止和依法惩治危害国家安全的行为。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>惩治为主、预防为辅 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>标本兼治、惩治为主 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>预防为主、标本兼治 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>预防为主、处罚结合正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">10.根据《中华人民共和国国家安全法》规定，每年（）为全民国家安全教育日。A <span class="hljs-string">.4</span>月15日 B <span class="hljs-string">.7</span> 月7日 C <span class="hljs-string">.9</span>月18日 D <span class="hljs-string">.10</span>月25日正确答案： A</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">11</span>.根据《中华人民共和国国家安全法》规定，公民和组织因支持、协助国家安全工作导致财产损失的，按照国家有关规定给予（）。<span class="hljs-selector-tag">A</span> .奖励 <span class="hljs-selector-tag">B</span> .补偿 C .补助 D .赔偿正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">12.</span>（）是指人类社会与自然地理环境的相互关系，是长期影响国家安全的基本因素。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>周缘 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>政缘 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>地缘 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>人缘正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">13.中国有（）个邻国，是世界上邻国最多的国家，这些邻国在政治、经济、文化等方面都表现出差异很大的多样性，使中国成为世界上周边环境最复杂的国家。A <span class="hljs-string">.8</span> B <span class="hljs-string">.14</span> C <span class="hljs-string">.18</span> D <span class="hljs-string">.20</span>正确答案：D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">14</span>.中美贸易摩擦不断升级，美国对中国商品额外征收高额关税，集中在（）中主要发展的高科技产业。<span class="hljs-selector-tag">A</span> .中国制造<span class="hljs-number">2020</span> <span class="hljs-selector-tag">B</span> .中国制造<span class="hljs-number">2025</span> C .中国制造<span class="hljs-number">2030</span> D .中国制造<span class="hljs-number">2035</span>正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">15</span>.（ ）实现香港回归祖国、（）实现澳门回归祖国，现在继续为解决台湾问题、实现祖国完全统一而奋斗。<span class="hljs-keyword">A</span>.<span class="hljs-number">1997年1月1</span>日、<span class="hljs-number">1999年7月1</span>日 B.<span class="hljs-number">1997年7月1</span>日、<span class="hljs-number">1999年7月1</span>日 C.<span class="hljs-number">1997年7月1</span>日、<span class="hljs-number">1999年12月20</span>日 D.<span class="hljs-number">1997年1月1</span>日、<span class="hljs-number">1999年12月20</span>日正确答案：C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">16.</span>根据宪法，制定《中华人民共和国国家安全法》的意义（）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>维护国家安全<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>保卫人民民主专政的政权和中国特色社会主义制度<span class="hljs-built_in">C</span><span class="hljs-operator">.</span>保护人民的根本利益<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>保障改革开放和社会主义现代化建设的顺利进行<span class="hljs-operator">.</span>实现中华民族伟大复兴正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">17</span>.国家安全是指（）和国家其他重大利益相对处于没有危险和不受内外威胁的状态，以及保障持续安全状态的能力。<span class="hljs-selector-tag">A</span> .国家政权、主权、统一<span class="hljs-selector-tag">B</span> .领土完整C .人民福祉D.经济社会可持续发展.个人正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">18.</span>国家安全工作应当统筹（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>生命安全和财产安全<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>内部安全和外部安全<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>国土安全和国民安全<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>传统安全和非传统安全<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>自身安全和共同安全正确答案：<span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">19.</span>维护国家安全，应当坚持（），积极同外国政府和国际组织开展安全交流合作，履行国际安全义务，促进共同安全，维护世界和平。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>互信<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>互利<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>互惠<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>平等 <span class="hljs-built_in">E</span><span class="hljs-operator">.</span>协作正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">20.</span>根据《中华人民共和国国家安全法》规定，中国的主权和领土完整不容侵犯和分割。维护（）是包括港澳同胞和台湾同胞在内的全中国人民的共同义务。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>国家主权<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>国家利益<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>统一<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>领土完整<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>个人权益正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">21.</span>国家防范、制止和依法惩治（ ）行为。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>叛国<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>分裂国家、煽动叛乱<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>颠覆或者煽动颠覆人民民主专政政权<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>窃取、泄露国家秘密<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>境外势力的渗透、破坏、颠覆、分裂活动正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">22.</span>国家加强边防、海防和空防建设，采取一切必要的防卫和管控措施，保卫（）安全，维护国家领土主权和海洋权益。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>领陆<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>内水<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>领水<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>领海<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>领空正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">23.</span>国家加强武装力量（）建设，建设与保卫国家安全和发展利益需要相适应的武装力量；<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>革命化<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>军事化<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>现代化<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span> 正规化<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>战略化正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">24.</span>国家在维护能源安全方面的措施（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>合理利用和保护资源能源<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>有效管控战略资源能源的开发<span class="hljs-built_in">C</span><span class="hljs-operator">.</span>加强战略资源能源储备，完善资源能源运输战略通道建设和安全保护措施<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>加强国际资源能源合作<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>全面提升应急保障能力，保障经济社会发展所需的资源能源持续、可靠和有效供给正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">25.</span>国家在维护文化安全方面的措施（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>坚持社会主义先进文化前进方向<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>继承和弘扬中华民族优秀传统文化<span class="hljs-built_in">C</span><span class="hljs-operator">.</span>培育和践行社会主义核心价值观<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>防范和抵制不良文化的影响<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>掌握意识形态领域主导权正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">26.</span>总体国家安全观的核心要义的关系包括（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>既重视发展问题，又重视安全问题<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>既重视外部安全，又重视内部安全<span class="hljs-built_in">C</span><span class="hljs-operator">.</span>既重视国土安全，又重视国民安全<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>既重视传统安全，又重视非传统安全<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>既重视自身安全，又重视共同安全正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">27.</span>我国地缘环境的基本特征（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>国土面积大<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>人口众多<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>地理环境差异大<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>自然资源禀赋充足<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>自然资源禀赋不足正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">28</span>.当前我国所面临的政治安全风险十分复杂，“三股势力”（）活动带来巨大危害。<span class="hljs-selector-tag">A</span> .暴力恐怖势力<span class="hljs-selector-tag">B</span> .民族分裂势力C .港独台独势力D.宗教分裂势力E.宗教极端势力正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,E</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">29.</span>中国是世界上第一个提出<span class="hljs-string">&quot;核安全观&quot;</span>概念的国家，中国核安全观是（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>发展和安全并重<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>权利和义务并重<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>改革和开放并重<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>自主和协作并重<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>治标和治本并重正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">30.</span>新兴领域的国家安全是指（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>维护海洋安全<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>维护陆地安全<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>维护太空安全<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>维护网络安全<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>维护科技安全正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><h2 id="第二章-第三节答案"><a href="#第二章-第三节答案" class="headerlink" title="第二章 第三节答案"></a>第二章 第三节答案</h2><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">1</span>.国际战略形势是判断国家安全所处的国际战略环境，分析国家安全形势，（）与进行国家安全战略指导的重要依据。<span class="hljs-selector-tag">A</span> .制定国家安全战略 <span class="hljs-selector-tag">B</span> .寻求国家安全措施 C .确定国际战略格局 D.分析国际战略趋势正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">2.</span>以下关于国际战略格局和国际战略形势的关系描述错误的是（ ）：<span class="hljs-variable">A</span><span class="hljs-operator">.</span>国际战略格局是国际战略环境的框架结构<span class="hljs-operator">,</span>国际战略形势是国际战略环境的动态表现<span class="hljs-variable">B</span><span class="hljs-operator">.</span>国际战略格局制约国际战略形势变化，而国际战略形势变化又推动国际战略格局的发展<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>国际战略格局是国际战略环境的基础<span class="hljs-operator">,</span>国际战略形势是国际战略环境的静态表现<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>国际战略形势与国际战略格局之间是一种互动发展的关系正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">3.</span>当今世界 正面临百年未有之大变局。<span class="hljs-number">2018</span>年以来的世界异常复杂<span class="hljs-operator">,</span>偶然与必然、苗头与趋势、乱局与变局交织。几大全局性、系统性、结构性矛盾集中显现<span class="hljs-operator">,</span> 其影响几乎无处不在并贯穿始终<span class="hljs-operator">,</span>给“当今世界 正在发生数百年未有大变局”之说下了注脚<span class="hljs-operator">,</span>也给世界未来发展走向带来很大的不确定性和嬗变性。总体呈现出的特点中不包括（）：<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>霸权国家与崛起大国的对立 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>单边主义与多边主义的碰撞 <span class="hljs-built_in">C</span><span class="hljs-operator">.</span>全球化与反全球化激荡 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>和平与发展并存正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">4</span>.习近平同志指出：“只要把握住历史发展大势，抓住历史变革时机，奋发有为，锐意进取，人类社会就能更好前进。”国际社会日益成为“你中有我、我中有你”的命运共同体，和平、发展、（）、共赢成为不可阻挡的时代潮流。<span class="hljs-selector-tag">A</span> .合作 <span class="hljs-selector-tag">B</span> .共享 C .协作 D .互助正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">5</span>.以下哪一项不是国际战略形势的趋势（ ）：<span class="hljs-selector-tag">A</span> .多极化趋势不断深入发展 <span class="hljs-selector-tag">B</span> .社会信息化、文化多样化持续推进 C.全球化深入发展，但存在负面影响 D .国际反恐斗争影响国际战略格局演变正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">6</span>.随着中国综合国力快速增强，作为未来多极格局中的一极，中国对世界影响是多方面的，其主要作用体现在三个方面，其中不包括（）：<span class="hljs-selector-tag">A</span> .中国是世界经济发展的中坚力量 <span class="hljs-selector-tag">B</span>.中国是全球发展的推动者，是世界经济增长的重要引擎 C.中国是国际秩序的维护者 D .中国是世界和平的建设者正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">7.</span>科学认识当前世界主要国家军事力量及战略动向，对维护我国国家安全具有重要意义。对我国安全构成重大影响的世界主要军事强国，是美国及周边的俄罗斯、（）和印度。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>加拿大 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>英国 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>德国 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>日本正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">8.</span>俄军的战略动向是（ ）：<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>确保霸权地位 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>走向政治军事大国 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>力保大国地位 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>大国崛起正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">9</span>.以下哪一项不是美国保持其在世界的霸权地位、在全球化中的主导地位的措施？（）<span class="hljs-selector-tag">A</span> .重提大国竞争激化军备竞赛 <span class="hljs-selector-tag">B</span> .走精兵之路，加快改革步伐 C.积极调整太空战略形成太空霸权 D .大力加强和扩充核武器确保绝对核优势正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">10</span>.以下哪一项不是印度实现其军事战略动向的措施？（ ）<span class="hljs-selector-tag">A</span> .不断加大军费投入提升自卫队现代化水平 <span class="hljs-selector-tag">B</span>.军事战略由重实战转向为重威慑 C .提升军费升级军备 D.对华军事战略从“劝阻威慑”转向“积极威慑”正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">11</span>.“当今世界正面临百年未有之大变局”，这句话是国家主席习近平在什么时候时间和场合说的？（）<span class="hljs-keyword">A</span>.<span class="hljs-number">2018年11月8</span>日，国家主席习近平在人民大会堂会见美国前国务卿基辛格博士时指出B.<span class="hljs-number">2019年5月15</span>日，国家主席习近平在亚洲文明对话开幕式上的讲话指出 C.<span class="hljs-number">2018年5月2</span>日，国家主席习近平在北京大学师生座谈会上的讲话指出 D.<span class="hljs-number">2018年9月15</span>日，国家主席习近平在全国教育大会上的讲话正确答案： <span class="hljs-keyword">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">12.</span>全球化是要素的流动，主要涉及三个要素：（）、物流（器物与货币），以及信息流，包括思想的传播。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>资本 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>消费 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>人流 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>商品正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">13</span>.当前，全球范围的社会信息化进入了全面渗透、跨界融合、引领创新的新阶段，以“信息”为主要特征的技术融合和产业变革已经成为推动人类生产生活方式变革和社会进步的重要力量。当今世界的三元不包括（）：<span class="hljs-selector-tag">A</span> .自然社会 <span class="hljs-selector-tag">B</span> .人类社会 C .物理世界 D .信息空间正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">14.</span>日本现役自卫队的组成不包括（ ）：<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>陆上自卫队 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>海上自卫队 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>航空自卫队 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>海岸警卫队正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">15.</span>以下哪一项不是日本实现其军事战略动向的措施？（ ）<span class="hljs-variable">A</span><span class="hljs-operator">.</span>以持续构建更高层级安全防卫体制谋求军事大国 <span class="hljs-variable">B</span><span class="hljs-operator">.</span>不断加大军费投入提升自卫队现代化水平 <span class="hljs-built_in">C</span><span class="hljs-operator">.</span>积极调整太空战略形成太空霸权 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>广泛开展各种军事演习促进军事合作、加强军事同盟正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">16</span>.影响世界格局变化最为重要的国家间关系有（ ）<span class="hljs-selector-tag">A</span> .中美<span class="hljs-selector-tag">B</span> .中俄C .美俄D .中日正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">17</span>.美国面对世界的变化, 认为自己在多边体系和国际机制中透支了、受损了,让其他国家搭了便车, 需要有选择地“破旧立新”。美国所采取的措施有：（）<span class="hljs-selector-tag">A</span> .宣布退出“伊核协议”<span class="hljs-selector-tag">B</span> .宣布启动退出《中导条约》C .公开威胁退出WTOD .公开宣扬反对全球主义正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">18</span>.从<span class="hljs-number">2017</span>年以来，发达国家反 （ ）势头继续看涨，发达国家之间在许多问题上的矛盾加剧，离心倾向加剧，加之在世界格局中对主动权和有利地位的角逐，传统发达国家不希望继续依附在美国的霸权之下，成为加剧发达国家之间矛盾的主要原因。<span class="hljs-selector-tag">A</span> .民粹主义<span class="hljs-selector-tag">B</span> .民族主义C .保护主义D .资本主义正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">19</span>.国际社会日益成为“你中有我、我中有你”的命运共同体，（ ），成为不可阻挡的时代潮流。<span class="hljs-selector-tag">A</span> .和平<span class="hljs-selector-tag">B</span> .发展C .合作D .共赢正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">20</span>. （ ）、（ ） 、（）的相对衰落和发展中国家群体崛起，推动全球战略格局向有利于多极化的方向演变。<span class="hljs-selector-tag">A</span> .美<span class="hljs-selector-tag">B</span> .日C .欧D .英正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">21</span>.全球化也存在负能量的传播。全球化是要素的流动，主要涉及三个要素：（ ）、（ ） 、（ ） ，包括思想的传播。<span class="hljs-selector-tag">A</span> .人流<span class="hljs-selector-tag">B</span> .物流C .信息流D .能源流正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">22</span>.“信息”带来的开放合作将使不同国家相互受益、共同繁荣，更加有力有效地促进人才、信息、技术等生产要素在全球范围自由流动，推动经济全球化朝着更加（） 、共赢的方向发展，使经济全球化的红利为世界各国人民所共享。<span class="hljs-selector-tag">A</span> .开放<span class="hljs-selector-tag">B</span> .包容C .普惠D .平衡正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">23</span>.美军武装力量分为 （ ） 、（ ） 、（）、美国海军陆战队和美国海岸警卫队等五大军种。<span class="hljs-selector-tag">A</span> .美国陆军<span class="hljs-selector-tag">B</span> .美国海军C .美国空军D .美国自卫队正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">24</span>.美国战略核力量有（ ）<span class="hljs-selector-tag">A</span> .洲际弹道导弹<span class="hljs-selector-tag">B</span> .弹道导弹潜艇C .潜射弹道导弹D .战略轰炸机正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">25</span>.印度海岸警卫队分（ ） 三个大队。<span class="hljs-selector-tag">A</span> .西岸<span class="hljs-selector-tag">B</span> .东岸C .南岸D .安达曼和尼科巴正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">26</span>.俄罗斯联邦武装力量被划分为哪些军种（ ）<span class="hljs-selector-tag">A</span> .陆军<span class="hljs-selector-tag">B</span> .海军C .空军D .火箭军正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">27</span>.鉴于俄、中、朝、伊(朗)等对手的核能力及目标，美国强调必须发展“（ ）、（ ） 、（ ）”的核力量，针对对手特点分别实施量身定做的核威慑战略。<span class="hljs-selector-tag">A</span> .现代<span class="hljs-selector-tag">B</span> .灵活C .科技D .弹性正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">28</span>.日本现役自卫队由 （ ） 队组成。<span class="hljs-selector-tag">A</span> .陆上自卫队<span class="hljs-selector-tag">B</span> .海上自卫队C .航空自卫队D .特种军自卫队正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">29</span>.印度自<span class="hljs-number">2014</span>年正式提出“东向政策”以来，莫迪政府不断渲染中国的军事威胁，加强与（ ）的战略关系，致力于建设一个“自由、开放、繁荣和包容”的印度洋，以提升印度在亚太地缘角逐中的制衡力度,应对中国在该地区日益上升的影响力。<span class="hljs-selector-tag">A</span> .美国<span class="hljs-selector-tag">B</span> .日本C .澳大利亚D .中国正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">30.</span>当前，以（）为代表的新一代信息技术日新月异，新一轮科技革命和产业变革孕育兴起，人类生产生活的智能化水平大幅提升。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>物联网<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>大数据<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>互联网<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>人工智能正确答案：<span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><h2 id="第三章答案"><a href="#第三章答案" class="headerlink" title="第三章答案"></a>第三章答案</h2><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">1.</span>我国《军事大百科全书》对军事思想的定义是<span class="hljs-operator">:</span>军事思想是关于战争、军队和国防的基本问题的（ ） <span class="hljs-operator">,</span>是人们长期从事军事实践的经验总结和理论概括。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>观察思考 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>总结提炼 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>理性认识 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>感性认识正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">2.</span>军事思想是军事实践的行动指南，军事思想对军事实践的指导作用体现在 （ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>为认识军事问题提供基本观点<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>为军事预测提供思想方法 <span class="hljs-built_in">C</span><span class="hljs-operator">.</span>为从事各项军事实践活动提供全局性指导 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>以上全是正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">3</span>.现代军事科学包括军事理论科学和军事技术科学两大部分,其中军事理论科学由军事思想和（） 组成,可见军事思想在军事科学体系中占有极其重要的地位.<span class="hljs-selector-tag">A</span> .军事谋略 <span class="hljs-selector-tag">B</span> .军事学术 C .军事格局 D .军事哲学正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">4.</span>军事思想的内容大体可分为两个层次<span class="hljs-operator">,</span>一个是（ ）层次上的问题<span class="hljs-operator">,</span>一个是军事活动实践的基本指导原则层次上的问题<span class="hljs-operator">.</span><span class="hljs-variable">A</span> <span class="hljs-operator">.</span>军事理论 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>军事学术 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>实战经验 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>军事哲学正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">5</span>.１５和１６世纪之交，欧洲军事思想领域出现了近代化的萌芽，主要代表著作是意大利马基雅维利的（ ） 等。<span class="hljs-selector-tag">A</span> .《军事教训》 <span class="hljs-selector-tag">B</span> .《战争艺术》 C .《战争指导》 D .《军事战略》正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">6</span>.拿破仑一世凭借 （ ）所造成的新的社会条件,创立了使用广大民众力量进行战争的崭新作战体系。<span class="hljs-selector-tag">A</span> .法国大革命 <span class="hljs-selector-tag">B</span> .雾月政变 C .拿破仑战争 D .土伦战役正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">7</span>.马克思和恩格斯在研究哲学、政治经济学的基础上,对军事问题进行论述,共同创立了（） 主义军事理论.<span class="hljs-selector-tag">A</span> .马克思 <span class="hljs-selector-tag">B</span> .恩格斯 C .共产 D .无产阶级正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">8</span>.苏联的（ ）认为,高新技术的不断发展完善,将引起军事上的深革命,对军队组织结构、指挥体制、武器系统和作战方法等产生根本性影响.他被誉为世界新军事革命的首倡者。<span class="hljs-selector-tag">A</span> .奥尔加科夫 <span class="hljs-selector-tag">B</span> .沙波什尼科夫 C .戈尔什科夫 D .克雷诺夫正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">9</span>.“（ ）”的实质是利用计算机信息网络对处于各地的部队或士兵实施一体化指挥和控制,其核心是利用网络让所有作战力量实现信息共享,实时掌握战场态势,缩短决策时间,提高打击速度与精度。<span class="hljs-selector-tag">A</span> .计算机网络 <span class="hljs-selector-tag">B</span> .网络中心战 C .信息战 D .电子对抗正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">10.</span>中国古代军事思想萌芽于（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>春秋战国 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>西汉 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>魏晋南北朝 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>夏商正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">11</span>.中国古代军事思想成熟于（ ）时期<span class="hljs-selector-tag">A</span> .春秋战国 <span class="hljs-selector-tag">B</span> .西汉 C .魏晋南北朝 D .隋唐正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">12.</span>宋元时期军事思想的发展，最重要的体现在（ ）的发展<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>战争观 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>战略思想 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>战术思想 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>军事技术正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">13.</span>中国古代军事思想的产生、形成及发展大致可分为三个阶段，其中不包括（）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>西周 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>春秋 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>秦汉 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>清末民初正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">14</span>.中国古代兵法中占首要位置的地位的是（ ）<span class="hljs-selector-tag">A</span> .战争观 <span class="hljs-selector-tag">B</span> .战略 C .战术 D .军事技术正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">15</span>.中国古代第一形成战略思想的伟大人物是（ ）<span class="hljs-selector-tag">A</span> .孙武 <span class="hljs-selector-tag">B</span> .孙膑 C .李世民 D .成吉思汗正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">16</span>.孙武是春秋末期（ ）国人<span class="hljs-selector-tag">A</span> .秦 <span class="hljs-selector-tag">B</span> .齐 C .魏 D .赵正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">17.《孙子兵法》现存（）篇A <span class="hljs-string">.11</span> B <span class="hljs-string">.12</span> C <span class="hljs-string">.13</span> D <span class="hljs-string">.14</span>正确答案：C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">18.</span>中古古代哪本兵书被誉为古代第一兵书（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>《六韬》 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>《左传》 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>《孙子兵法》 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>《孙膑兵法》正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">19</span>.下列那句话体现了《孙子兵法》重战的思想（ ）<span class="hljs-selector-tag">A</span> .“兵者，国之大事” <span class="hljs-selector-tag">B</span> .“知兵知将,民之司命,国家安危之主” C .“兵无常势”D .“争天下者,必先争人”正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">20</span>.、自中国共产党成立到（ ）前,是毛泽东军事思想的产生和形成时期<span class="hljs-selector-tag">A</span> .古田会议 <span class="hljs-selector-tag">B</span> .遵义会议 C .八七会议 D .瓦窑堡会议正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">21.</span>抗日战争爆发后<span class="hljs-operator">,</span>毛泽东发表了 （）一书<span class="hljs-operator">,</span>精辟地分析了抗日战争的形势<span class="hljs-operator">,</span>科学地论证了战争发展的规律<span class="hljs-operator">,</span>指明了坚持抗战的 正确道路<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>《矛盾论》 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>《井冈山的斗争》 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>《论持久战》 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>《星星之火<span class="hljs-operator">,</span>可以燎原》正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">22.</span>毛泽东把（ ）作为坚持武装斗争的首要问题<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>打持久战 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>保持优良传统 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>狠抓纪律 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>建立人民军队正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">23</span>.（ ）是毛泽东军事思想的核心,是我党进行革命战争的根本指导路线。<span class="hljs-selector-tag">A</span> .军队建设的思想 <span class="hljs-selector-tag">B</span> .人民战争思想 C .战争与和平的思想 D.持久战的思想正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">24</span>.毛泽东的人民战争的战略战术中指出我军的基本作战方针是 （）<span class="hljs-selector-tag">A</span> .歼灭战 <span class="hljs-selector-tag">B</span> .运动战 C .速决战 D .游击战正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">25.</span>邓小平科学分析和正确判断了国际形势和我国的安全环境，提出了战争与和平的理论、建设有中国特色的现代化国防理论和现代条件下<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>战略的理论。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>国家战争 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>局部战争 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>人民战争 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>侵略战争正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">26</span>.江泽民指出，中国人民解放军是（）的坚强柱石，是捍卫社会主义祖国的钢铁长城、建设中国特色社会主义的重要力量。<span class="hljs-selector-tag">A</span> .改革开放 <span class="hljs-selector-tag">B</span> .人民民主专政 C .可持续发展 D .祖国统一正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">27</span>.胡锦涛指出，全面履行党和人民赋予的新世纪新阶段军队历史使命，必须坚持以毛泽东军事思想、邓小平新时期军队建设思想、江泽民国防和军队建设思想为指导，把（）作为国防和军队建设的重要指导方针。<span class="hljs-selector-tag">A</span> .科学发展观 <span class="hljs-selector-tag">B</span> .三个代表 C .现代化建设 D .改革开放正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">28.</span>习近平总书记深刻指出，军事手段是实现伟大梦想的保底手段，军事斗争是进行伟大斗争的重要方面<span class="hljs-operator">,</span>（ ）能力是维护国家安全的战略能力<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>保障 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>创新 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>打赢 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>改革正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">29.习近平强军思想明确党在新时代的强军目标是,力争到（）年基本实现国防和军队现代化,到本世纪中叶把人民军队全面建成世界一流军队A <span class="hljs-string">.2020</span> B <span class="hljs-string">.2025</span> C <span class="hljs-string">.2030</span> D <span class="hljs-string">.2035</span>正确答案：D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">30</span>.习近平指出，（ ）是灵魂,决定军队建设的政治方向。<span class="hljs-selector-tag">A</span> .听党指挥 <span class="hljs-selector-tag">B</span> .作风优良 C .能打胜仗 D .严明纪律正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">31.</span>习近平指出，坚持（）是中国特色社会主义的本质特征<span class="hljs-operator">,</span>是党和国家的重要政治优势。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>军民融合发展 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>发展和安全兼顾 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>党对军队绝对领导 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>富国和强军统一正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">32</span>.军事思想通常包括（ ） 、（ ）、（ ） 、（ ） 等。<span class="hljs-selector-tag">A</span> .战争观<span class="hljs-selector-tag">B</span> .军事问题认识论和方法论C .战争指导思想D.军事发展史.国防和军队建设思想正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,E</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">33</span>.军事思想具备以下的基本特征 （ ） 、（ ） 、（ ） 、（ ）。<span class="hljs-selector-tag">A</span> .阶级性<span class="hljs-selector-tag">B</span> .时代性C .继承性D .借鉴性.通用性正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">34</span>.像希罗多德的 （ ） 、修昔底德的（ ） 、色诺芬的（ ） 、凯撒的（ ）等书中,都可反映出古代欧洲一些国家的军事思想。<span class="hljs-selector-tag">A</span> .历史<span class="hljs-selector-tag">B</span> .伯罗奔尼撒战争史C .远征记D .高卢战记和内战记正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">35.</span>英国斯宾塞的“ （ ） ”“（ ） ”和德国拉采尔的“（ ）”认为<span class="hljs-operator">,</span>“强存弱汰”是国际生活的“自然法则”<span class="hljs-operator">,</span>一个“健全的国家有机体”有权通过战争扩展自己的“生存空间”<span class="hljs-operator">.</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-variable">A</span> <span class="hljs-operator">.</span>社会达尔文主义<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>地缘政治论<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>社会有机论<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>地理环境决定论正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">36</span>.美国首先提出“（ ） ”理论和“（ ）”的战略理论.苏联提出未来战争是一场全面的火箭核大战.但是,在美苏核武器数量越来越多,英国、法国和中国都拥有核武器以后,核力量由比较悬殊到相对均势的发展变化,世界形成“（） ”、许多国家都认识到谁也不能轻易发动核战争,转而研究“ （）”等理论,将目光重新转向常规战争。<span class="hljs-selector-tag">A</span> .核武器制胜<span class="hljs-selector-tag">B</span> .大规模报复C .恐怖的核平衡D .有限核威僵正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">37</span>.书中提出,（ ）是历史发展的一个决定性因素,海军战略的目标是保证国家获得平时和战时的海权.马汉认为,海上作战最重要的任务是（） ，而掌握制海权有赖于强大的 （ ）。<span class="hljs-selector-tag">A</span> .海权<span class="hljs-selector-tag">B</span> .掌握制海权C .国家D .海军正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">38.</span>战争论是普鲁士资产阶级著名的军事理论家卡尔<span class="hljs-operator">.</span>冯<span class="hljs-operator">.</span>克劳塞维茨<span class="hljs-punctuation">(</span>１７８０－１８３１<span class="hljs-punctuation">)</span><span class="hljs-operator">,</span>在总结以往战争特别是拿破仑战争的基础上写成的<span class="hljs-operator">,</span>全书共３卷８篇１２４章<span class="hljs-operator">,</span>第一篇“（） ”<span class="hljs-operator">,</span>第二篇“（ ）”<span class="hljs-operator">,</span>第三篇“ （ ）”<span class="hljs-operator">,</span>第四篇“战斗”<span class="hljs-operator">,</span>第五篇“军队”<span class="hljs-operator">,</span>第六篇“防御”<span class="hljs-operator">,</span>第七篇“进度”<span class="hljs-operator">,</span>第八篇“战争计划”。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>战争的起源<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>论战争的性质<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>论战争理论<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>战略概论<span class="hljs-operator">.</span>战争要素正确答案：<span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">39.</span>《战争论》其基本的思想观点是<span class="hljs-operator">:</span>战争是政治的继续；战争的目的就是消灭敌人；人民战争是战争整个发酵过程的扩大和加强；战略包括（ ）、（ ）、（ ）、（ ）、（）五大要素；战略上最重要而又最简单的准则是集中兵力；战争中的攻防。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>精神<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>物质<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>数学<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>地理<span class="hljs-operator">.</span>历史<span class="hljs-operator">.</span>统计正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">40</span>.下列哪些是战国时期出世的兵书（ ）<span class="hljs-selector-tag">A</span> .《孙子兵法》<span class="hljs-selector-tag">B</span> .《孙膑兵法》C .《司马法》D .《六韬》正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">41</span>.中国古代军事思想涉及下列那些方面的内容（ ）<span class="hljs-selector-tag">A</span> .战争观<span class="hljs-selector-tag">B</span> .战略观C .治军思想D .作战方法与谋略正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">42</span>.中国古代军事思想认为，战争与（ ）相关<span class="hljs-selector-tag">A</span> .政治<span class="hljs-selector-tag">B</span> .经济C .文化D .环境正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">43</span>.中国古代军事思想的主要特点包括（ ）<span class="hljs-selector-tag">A</span> .重视军事与政治、经济的关系<span class="hljs-selector-tag">B</span> .重视发挥谋略的作用C.重视发挥主观指导作用D .重视将帅的地位和作用正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">44.</span>孙武认为将必有五德，五德包括（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>智<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>信<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>仁<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>勇<span class="hljs-operator">.</span>严正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">45</span>.《孙子兵法》第一部分的内容有（ ）<span class="hljs-selector-tag">A</span> .《计》<span class="hljs-selector-tag">B</span> .《作战》C .《谋攻》D .《九变》正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">46</span>.《孙子兵法》第二部分的内容有（ ）<span class="hljs-selector-tag">A</span> .《军争》<span class="hljs-selector-tag">B</span> .《九变》C .《行军》D .《地形》正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">47</span>.《孙子兵法》第二部分的内容有（ ）<span class="hljs-selector-tag">A</span> .《火攻》<span class="hljs-selector-tag">B</span> .《九地》C .《用间》D .《虚实》正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">48</span>.下列哪些属于《孙子兵法》的思想（ ）<span class="hljs-selector-tag">A</span> .重战、慎战、备战思想<span class="hljs-selector-tag">B</span> .“知彼知己,百战不殆”的战争指导思想C.以谋略制胜为核心的用兵思想D .“文武兼施,恩威并用”的治军思想正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">49</span>.《孙子兵法》的局限性主要表现在（ ）<span class="hljs-selector-tag">A</span> .战争观方面未能区分战争的性质<span class="hljs-selector-tag">B</span> .治军方面的愚兵政策C.军队补给方面的抢掠政策D .作战原则方面存有某些片面性正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">50</span>.毛泽东军事思想的内容体系包括（ ）<span class="hljs-selector-tag">A</span> .无产阶级的战争观和方法论<span class="hljs-selector-tag">B</span> .人民军队建设理论C .人民战争思想；D.人民战争的战略战术正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">51</span>.经过（）,毛泽东人民军队的建军思想开始确立,并在以后的斗争实践中逐步完善,形成一整套的人民军队的建军原则<span class="hljs-selector-tag">A</span> .遵义会议<span class="hljs-selector-tag">B</span> .三湾改编C .古田会议D .瓦窑堡会议正确答案：<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">52</span>.毛泽东关于开展人民战争的战略战术方针是()<span class="hljs-selector-tag">A</span> .战略上藐视敌人<span class="hljs-selector-tag">B</span> .战术上重视敌人C .政治上瓦解敌人D.战场上消灭敌人正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">53.</span>毛泽东军事思想的产生和形成时期<span class="hljs-operator">,</span>毛泽东撰写了（）等重要军事著作<span class="hljs-operator">,</span>这标志着毛泽东军事思想的形成。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>《中国的红色政权为什么能够存在》<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>《井冈山的斗争》<span class="hljs-built_in">C</span><span class="hljs-operator">.</span>《星星之火<span class="hljs-operator">,</span>可以燎原》<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>《论持久战》<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>《关于纠 正党内错误思想》正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">54.</span>邓小平科学分析和 正确判断了国际形势和我国的安全环境<span class="hljs-operator">,</span>提出了（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>建立人民军队<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>战争与和平的理论<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>建设有中国特色的现代化国防理论<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>现代条件下人民战争战略正确答案：<span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">55</span>.江泽民认为，和平时期进一步加强国防和军队建设，对（）具有深远的战略意义，号召全党和全国人民要积极关心和支持国防和军队建设。<span class="hljs-selector-tag">A</span> .改革开放<span class="hljs-selector-tag">B</span> .维护国家的长治久安C .保证社会主义现代化建设的顺利进行D.祖国统一正确答案：<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">56</span>.胡锦涛国防和军队建设思想的科学含义包括（ ）<span class="hljs-selector-tag">A</span> .是巩固党执政地位重要的力量保证<span class="hljs-selector-tag">B</span>.是国家发展战略机遇期坚强的安全保障C .是维护国家利益有力的战略支撑D.人民民主专政的基本保障正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">57</span>.党在新时代的强军目标是建设一支（ ）的人民军队<span class="hljs-selector-tag">A</span> .听党指挥<span class="hljs-selector-tag">B</span> .能打胜仗C .作风优良D .保障有力正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">58.</span>习近平指出，明确军民融合发展是兴国之举、强军之策<span class="hljs-operator">,</span>必须形成（）军民融合深度发展格局<span class="hljs-operator">,</span>构建一体化的国家战略体系和能力<span class="hljs-operator">.</span> <span class="hljs-variable">A</span> <span class="hljs-operator">.</span>新技术<span class="hljs-variable">B</span><span class="hljs-operator">.</span>全要素<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>多领域<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>高效益正确答案：<span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">59</span>.习近平强军思想的重要意义（ ）<span class="hljs-selector-tag">A</span> .是确保军队建设 正确方向的迫切需求<span class="hljs-selector-tag">B</span>.是实现党在新形势下的强军目标的迫切需求C.是深化国防和军队改革的迫切需求D .是汇聚强军兴军强大能量的迫切需求正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">60</span>.党的十八大以来，以习近平同志为总书记的党中央和中央军委着眼于坚持和发展中国特色的社会主义、实现中华民族伟大复兴中国梦，围绕强军兴军提出了一系列重大战略思想、理论观点、决策部署，深刻阐述了国防和军队建设的（）的重大问题。<span class="hljs-selector-tag">A</span> .根本性<span class="hljs-selector-tag">B</span> .全局性C .方向性D .整体性正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><h2 id="第四章答案"><a href="#第四章答案" class="headerlink" title="第四章答案"></a>第四章答案</h2><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">1.</span>战争是阶级间、民族间、国家间、政治集团间矛盾斗争的<span class="hljs-punctuation">(</span> <span class="hljs-punctuation">)</span>形式<span class="hljs-operator">,</span>以（）反映政治实质，经济是战争的物质基础<span class="hljs-operator">,</span>（ ）决定战争的方式<span class="hljs-operator">,</span>（）是战争的基本原则。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>最低 武装斗争 武器装备 消灭敌人 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>最高 暴力手段科学技术的发展水平 消灭敌人 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>最高 暴力手段 科学技术的发展水平保存自己和消灭敌人 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>最低 武装斗争 科学技术的发展水平保存自己和消灭敌人正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">2.全世界从奴隶社会早期到２０世纪８０年代,在有文字记载的３５００多年的时间里,共发生过（ ）次战争. A <span class="hljs-string">.140</span>余 B.1400余 C <span class="hljs-string">.14000</span>余 D <span class="hljs-string">.140000</span>余正确答案：C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">3.</span>以下哪种说法反映了历史唯物主义者对战争的看法？（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>战争是自然和永恒的现象<span class="hljs-operator">,</span>战争的根源在于自然环境和人类的生物本性。 <span class="hljs-variable">B</span><span class="hljs-operator">.</span>为战争是上帝对人的惩罚<span class="hljs-operator">,</span>并用超自然力量解释战争起因。 <span class="hljs-built_in">C</span><span class="hljs-operator">.</span>战争是由优劣民族之间差别引起的。 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>战争是社会生产力和生产关系发展到一定阶段的产物<span class="hljs-operator">,</span>是私有制产生以后<span class="hljs-operator">,</span>随着阶级和国家的出现<span class="hljs-operator">,</span>有了压迫和反压迫时才出现的。正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">4.</span>总结各种战争的具体起因<span class="hljs-operator">,</span>可以得出战争的一般起因是（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>争夺权力 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>争夺物资 <span class="hljs-built_in">C</span><span class="hljs-operator">.</span>人类社会的生产关系不适应生产力而导致的利益对抗 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>自然灾难正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">5</span>.（ ）是现代战争的根源。<span class="hljs-selector-tag">A</span> .领土争端 <span class="hljs-selector-tag">B</span> .帝国主义、霸权主义 C .意识形态冲突 D .宗教冲突正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">6</span>.( )决定战争的性质,( )是战争的物质基础,()是直接决定战争胜负的因素。<span class="hljs-selector-tag">A</span> .政治 经济 军事 <span class="hljs-selector-tag">B</span> .政治 经济 自然环境 C .军事 经济 政治 D .经济 军事 政治正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">7</span>.任何战争说到底,都受人和物这两个因素的制约，但战争胜负的决定因素是（）。<span class="hljs-selector-tag">A</span> .人 <span class="hljs-selector-tag">B</span> .物正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">8</span>.传统战争体现着鲜明的（ ）的特点。<span class="hljs-selector-tag">A</span> .暴力主导 <span class="hljs-selector-tag">B</span> .信息主导 C .舆论主导 D .贸易主导正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">9</span>.与以往那种通过彻底摧毁对方抵抗力量或意志赢得战争胜利的零和观念不同，现代战争更加体现（）性,通过（ ）的打击行动,达成营造态势和有效控局的目的。<span class="hljs-selector-tag">A</span> .有限，有限 <span class="hljs-selector-tag">B</span> .局部，局部 C .快速，快速 D .有效，有效正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">10</span>.现代战争绝非单纯的（ ）,而是在（ ）的基础上，以（）为主,在政治、经济、科技、外交、文化等多种手段配合下进行的整体较量。<span class="hljs-selector-tag">A</span> .武力较量，综合国力，军事手段 <span class="hljs-selector-tag">B</span> .武力较量，军事实力，军事手段 C.暴力较量，科技实力，政治斗争 D .暴力较量，科技实力，军事手段正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">11</span>.战争的（）性,在作战中的主要表现是以小博大、撬动全局,力争用战术行动达成战略战役目的。<span class="hljs-selector-tag">A</span> .目的有限 <span class="hljs-selector-tag">B</span> .规模可控 C .空间有限 D .行动联合正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">12</span>.“兵无常势，水无常形。”说的是（ ）<span class="hljs-selector-tag">A</span> .作战样式的多样性 <span class="hljs-selector-tag">B</span> .作战环境的多变性 C .作战因素的多元性 D.作战目的的有限性正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">13.</span>拿破仑指出<span class="hljs-operator">,</span>运动是战争的灵魂<span class="hljs-operator">.</span>美国前国防部长科恩也指出<span class="hljs-operator">,</span>以往的作战哲学是大吃小<span class="hljs-operator">,</span>今天是快吃慢<span class="hljs-operator">.</span>这些都精辟阐述了（）在战争制胜中的重要性。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>力量 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>科技 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>速度 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>人数正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">14</span>.战争活动在不同的历史时期有着不同的表现，从战争实践活动可分为（ ）<span class="hljs-selector-tag">A</span> .冷兵器时代战争、热兵器时代战争、机械化时代战争和信息化时代战争 <span class="hljs-selector-tag">B</span>.中国古代战争和西方现代战争 C .局部战争和世界大战 D.侵略战争和自卫战争正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">15</span>.马克思、恩格斯的军事著作,运用辩证唯物主义和历史唯物主义的观点分析战争,揭示战争的普遍规律,认为“到目前为止的一切社会的历史都是（）的历史,战争的本质不是别的,而是（）的经济、政治制度的直接产物,是阶级斗争的最高形式,即（）尖锐到一定程度而进行的暴力斗争;一切历史冲突都根源于生产力和生产关系之间的矛盾”<span class="hljs-selector-tag">A</span>.阶段斗争，阶级社会，阶级斗争，阶级矛盾 <span class="hljs-selector-tag">B</span>.阶级斗争，人类社会，阶级斗争，民族矛盾 C.阶级斗争，人类社会，阶级斗争，阶级矛盾 D.阶级斗争，人类社会，阶级斗争，社会矛盾正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">16</span>.战争是在（ ）社会后期出现的.<span class="hljs-selector-tag">A</span> .奴隶 <span class="hljs-selector-tag">B</span> .原始 C .封建 D .资本主义正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">17.</span>自（ ）以来<span class="hljs-operator">,</span>世界军事领域兴起了一场新的深刻革命<span class="hljs-operator">,</span>被称 之为“新军事革命”<span class="hljs-operator">.</span><span class="hljs-variable">A</span> <span class="hljs-operator">.</span>２０世纪<span class="hljs-number">60</span>年代末<span class="hljs-number">70</span>年代初 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>２０世纪<span class="hljs-number">70</span>年代末<span class="hljs-number">80</span>年代初 <span class="hljs-built_in">C</span><span class="hljs-operator">.</span>２０世纪<span class="hljs-number">80</span>年代末<span class="hljs-number">90</span>年代初 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>２０世纪<span class="hljs-number">90</span>年代末２１世纪初正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs tap">18.2003年的伊拉克战争中，美军运用了（ ）颗侦察卫星,（）多架各型侦察机,能够（）小时不间断地获取实时的战场态势图像和情报,实现了战场情况的单向透明。A .9 ，<span class="hljs-number"> 7 </span>，<span class="hljs-number"> 12 </span>B .9 ， 7，<span class="hljs-number"> 24 </span>C .90，<span class="hljs-number"> 70 </span>，<span class="hljs-number"> 12 </span>D .90， 70， 24正确答案：D</code></pre></div><div class="code-wrapper"><pre><code class="hljs erlang"><span class="hljs-number">19</span>.伊拉克战争中,美军共发射巡航导弹约（ ）枚,总投弹量约（）多枚,其中精确制导弹药约占总弹药量的（）,除大量使用战斧式巡航导弹、联合直接攻击弹药外,还使用了高能微波炸弹等精确制导武器,起到了事半功倍的效果.A .<span class="hljs-number">80</span> ， <span class="hljs-number">200</span>，  <span class="hljs-number">50</span><span class="hljs-comment">% </span>B .<span class="hljs-number">800</span>， <span class="hljs-number">2000</span>， <span class="hljs-number">50</span><span class="hljs-comment">% </span>C .<span class="hljs-number">800</span>， <span class="hljs-number">2000</span>， <span class="hljs-number">70</span><span class="hljs-comment">% </span>D .<span class="hljs-number">800</span>， <span class="hljs-number">20000</span>，<span class="hljs-number">70</span><span class="hljs-comment">%</span>正确答案：D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">20</span>.在军队信息化装备方面，哪个国家现在走在最前面（ ）<span class="hljs-selector-tag">A</span> .美国 <span class="hljs-selector-tag">B</span> .俄国 C .中国 D .德国正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">21</span>.新军事技术的崛起经历了四个阶段，第一个阶段是（ ）<span class="hljs-selector-tag">A</span> .从<span class="hljs-number">20</span>世纪<span class="hljs-number">60</span>年代初到<span class="hljs-number">70</span>年代末 <span class="hljs-selector-tag">B</span> .从第二次世界大战到<span class="hljs-number">20</span>世纪<span class="hljs-number">50</span>年代末 C.从<span class="hljs-number">20</span>世纪<span class="hljs-number">90</span>年代初至今 D .从<span class="hljs-number">20</span>世纪<span class="hljs-number">80</span>年代初到<span class="hljs-number">80</span>年代末正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">22.机械化战争以物质力量为主导要素。二战期间，军用飞机的生产多达（）余万架，航空母舰多达（ ）余艘，潜艇多达（ ）余艘。A <span class="hljs-string">.80</span>， 140， 1500 B <span class="hljs-string">.70</span>， 140， 1500 C <span class="hljs-string">.70</span>， 240， 1500 D <span class="hljs-string">.70</span>， 140， 2500正确答案：B</code></pre></div><div class="code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">23</span>.在信息时代，战争可以用公式（ ）来认知。<span class="hljs-keyword">A</span> .战争=综合强制+流血的强制+不流血的强制 B .战争=暴力=流血的交战 C.战争=暴力=综合强制 D .战争=综合强制+流血的强制正确答案： <span class="hljs-keyword">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">24</span>.伊拉克战争历史<span class="hljs-number">43</span>天，大致可分为三个阶段。第一个阶段是（ ）<span class="hljs-selector-tag">A</span> .“斩首行动” <span class="hljs-selector-tag">B</span> .“震慑行动” C .“围剿行动” D .“和平计划”正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs gcode"><span class="hljs-number">25.</span>在整个科索沃战争期间，北约军队电子战飞机使用量占比（ ）以上。A <span class="hljs-number">.30</span><span class="hljs-meta">%</span> B <span class="hljs-number">.40</span><span class="hljs-meta">%</span> C <span class="hljs-number">.50</span><span class="hljs-meta">%</span> D <span class="hljs-number">.60</span><span class="hljs-meta">%</span>正确答案：B</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">26</span>.碳纤维石墨炸弹被首次应用于哪次战争中（ ）<span class="hljs-selector-tag">A</span> .科索沃战争 <span class="hljs-selector-tag">B</span> .阿富汗战争 C .利比亚战争 D .伊拉克战争正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">27.1990年8月2日凌晨，伊拉克军队动用（ ）个师，总兵力（）余万人，在空、海军的配合下，突然大举入侵科威特，仅用（）余个小时就吞并了号称“海湾明珠”的科威特。A <span class="hljs-string">.24</span>， 10， 10 B <span class="hljs-string">.14</span>， 10， 10 C <span class="hljs-string">.14</span>， 10， 20 D <span class="hljs-string">.14</span>， 20， 10正确答案：B</code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">28.计算机控制信息系统，将陆、海、空、天、电多维空间的行动凝聚为一体，在“沙漠风暴”行动中，多国部队每天出动飞机（）多架次，从不同的基地起飞、袭击不同的目标，这些都需要强大的战场自动化控制系统。A <span class="hljs-string">.20</span> B <span class="hljs-string">.200</span> C <span class="hljs-string">.2000</span> D <span class="hljs-string">.20000</span>正确答案：C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">29</span>.什么时候开始出现就地征用与基地保障相结合的部队补给方式（ ）<span class="hljs-selector-tag">A</span> .<span class="hljs-number">16</span>至<span class="hljs-number">17</span>世纪 <span class="hljs-selector-tag">B</span> .<span class="hljs-number">18</span>世纪后期至<span class="hljs-number">19</span>世纪初期 C .<span class="hljs-number">19</span>世纪后半期至<span class="hljs-number">20</span>世纪初 D.<span class="hljs-number">20</span>世纪初至<span class="hljs-number">20</span>世纪中叶正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">30.从冷兵器战争演进到机械化战争的军事革命进程持续了近（ ）余年A <span class="hljs-string">.200</span> B <span class="hljs-string">.300</span> C <span class="hljs-string">.400</span> D <span class="hljs-string">.500</span>正确答案：B</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">31</span>.以下哪些战争属于 正义战争（ ）<span class="hljs-selector-tag">A</span> .自卫战争<span class="hljs-selector-tag">B</span> .为保卫祖国和平而进行的战争C .保卫国家主权和领土完整D.为了自由和尊严而进行的战争正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">32</span>.以下哪些是非 正义战争（ ）、<span class="hljs-selector-tag">A</span> .侵略战争<span class="hljs-selector-tag">B</span> .征服战争C .为了压迫和掠夺而进行的战争正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">33</span>.任何战争都是为了达到既定目的而进行的,具体表现为（ ）<span class="hljs-selector-tag">A</span> .战争的军事目的<span class="hljs-selector-tag">B</span> .战争的政治目C .战争的经济目的. 正确答案：<span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">34.</span>战争的本质特点有哪些（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>战争的政治性<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>战争的目的有限性<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>战场空间的全域性<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>战争实施的整体性<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>战争规模的可控性、作战方式的多样性<span class="hljs-variable">F</span><span class="hljs-operator">.</span>作战行动的联合性、战争制胜的速决性正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">35</span>.现代战争中作战力量联合的深度和广度也得到了新的发展，表现在以下那些方面（）<span class="hljs-selector-tag">A</span> .联合一体化加强<span class="hljs-selector-tag">B</span> .诸军种联合向跨领域联合发展C.由战略战役层次联合向战术层次联合发展正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">36</span>.以下哪些描述阐述了速度在战争制胜中的重要性（ ）<span class="hljs-selector-tag">A</span> .“兵贵神速”<span class="hljs-selector-tag">B</span> .运动是战争的灵魂C .快鱼吃慢鱼D .大鱼吃小鱼正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">37</span>.新军事变革包含哪些要素（ ）<span class="hljs-selector-tag">A</span> .新军事技术<span class="hljs-selector-tag">B</span> .新组织体制C .新军事理论D .新军事管理. 正确答案：<span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">38.</span>新军事革命主要呈现出以下哪些特点（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>武器装备高科技化<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>编制体制精干化<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>指挥控制自动化<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>作战空间多维化<span class="hljs-operator">.</span>作战样式体系化正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">39.</span>新军事变革的只要内容是（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>创新军事技术<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>创新军队的体制编制<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>创新作战理论<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>创新军事管理<span class="hljs-operator">.</span>战争形态从机械化向信息化转变正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">40.</span>军事高技术建立在高技术的基础之上<span class="hljs-operator">,</span>与一般技术相比<span class="hljs-operator">,</span>有八哪些特点（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>高智力<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>高投资<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>高竞争<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>高风险<span class="hljs-operator">.</span>高效益、高速度<span class="hljs-operator">.</span>高渗透、高保密正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">41.</span>随着军事高技术的发展及其在军事领域的广泛应用<span class="hljs-operator">,</span>已经对作战行动产生了巨大影响<span class="hljs-operator">.</span>这种影响概括起来就是（）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>侦察立体化<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>打击精确化<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>反应高速化<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>防护综合化<span class="hljs-operator">.</span>控制智能化正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">42.</span>当前，世界各主要国家都在努力推进新一轮军事改革，世界新军事革命深入发展，其基本内涵是<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-variable">A</span> <span class="hljs-operator">.</span>体制编制的联合化、小型化、自主化趋势更加明显<span class="hljs-operator">;</span><span class="hljs-variable">B</span><span class="hljs-operator">.</span>武器装备呈现出向数字化、精确化、隐形化、无人化的发展趋势<span class="hljs-operator">;</span><span class="hljs-built_in">C</span><span class="hljs-operator">.</span>联合作战形态向 “四非”<span class="hljs-punctuation">(</span>非接触、非线性、非对称和非 正规<span class="hljs-punctuation">)</span>和 “三无”<span class="hljs-punctuation">(</span>无形、无声、无人<span class="hljs-punctuation">)</span>作战方向发展<span class="hljs-operator">;</span><span class="hljs-built_in">D</span><span class="hljs-operator">.</span>军队指挥形态更加扁平化、自动化、网络化、无缝化<span class="hljs-operator">,</span>一体化联合作战指挥体系逐步形成<span class="hljs-operator">;</span><span class="hljs-built_in">E</span><span class="hljs-operator">.</span>现代国防管理体制不断完善正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">43</span>.新军事变革对于一个国家、一个民族既是机遇，又是挑战。党的十九大报告明确提出，要“适应世界新军事革命发展趋势和国家安全需求，提高建设质量和效益，确保到<span class="hljs-number">2020</span>年基本实现机械化，信息化建设取得重大进展，战略能力有大的提升。同国家现代化进程相一致，全面推进（），力争到<span class="hljs-number">2035</span>年基本实现国防和军队现代化，到本世纪中叶把人民军队全面建成世界一流军队。”<span class="hljs-selector-tag">A</span> .军事理论现代化<span class="hljs-selector-tag">B</span> .军队组织形态现代化C .军事人员现代化D.武器装备现代化正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">44</span>.机械化战争的基本特征包括（ ）<span class="hljs-selector-tag">A</span> .机械化战争以物质力量为主导要素<span class="hljs-selector-tag">B</span>.机械化战争的作战指挥控制是金字塔式C.机械化战争的作战效能是武器系统之间的对抗D.机械化战争的作战目的在于消灭对方的有生力量正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">45.</span>美军“太空篱笆”建成后，可探测和跟踪<span class="hljs-number">20</span>万个直径大于<span class="hljs-number">2</span>厘米的空间目标。其主要做法包括：（）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>推动高超音速武器进入作战体系<span class="hljs-variable">B</span><span class="hljs-operator">.</span>加快信息“网伞”建设，打造全维一体态势感知体系<span class="hljs-built_in">C</span><span class="hljs-operator">.</span>抢占新型作战空间，拓展态势感知的范围与精度<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>提高导弹预警探测能力，提升态势感知威慑能力正确答案：<span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">46.</span>在未来信息化战争时代，战争的表现形式有了许多拓展，主要包括（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>战争暴力性减弱<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>作战指挥控制更加扁平<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>战争层次更加模糊<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>战争主体多元化正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">47</span>.今后军事力量合成的基本趋势是战斗单元的（ ）<span class="hljs-selector-tag">A</span> .多能化<span class="hljs-selector-tag">B</span> .复合化C .一体化D .精干化正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">48</span>.世界各主要国家十分重视国防改革，积极转变国防管理方式，具体表现包括（）<span class="hljs-selector-tag">A</span> .提高战略规划水平<span class="hljs-selector-tag">B</span> .提高国防投入效益C .提高科技创新能力D.提高军队职业化水平正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">49</span>.作战空间是传统的战场概念的眼神。美军将三域，包括（ ）<span class="hljs-selector-tag">A</span> .物理域<span class="hljs-selector-tag">B</span> .信息域C .认知域D .心理域正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">50.</span>以下哪些战争属于信息化战争的经典战例（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>海湾战争<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>科索沃战争<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>阿富汗战争<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>伊拉克战争<span class="hljs-operator">.</span>利比亚战争<span class="hljs-operator">.</span>第二次世界大战正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">51</span>.在未来信息化战争中，伴随着新军事革命的步伐，军队的发展趋势是（ ）<span class="hljs-selector-tag">A</span> .军队规模将加速小型化<span class="hljs-selector-tag">B</span> .军队信息系统构成将高度一体化C.军队指挥与作战手段将高度智能化D .军队装备将加速机械化正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">52.</span>从高技术向军事领域自然延伸的角度，新军事技术可分为哪些领域（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>军用信息技术<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>军事航天技术<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>军事海洋开发技术<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>军用生物技术<span class="hljs-operator">.</span>军用新材料技术<span class="hljs-operator">.</span>军用新能源技术、军用先进防御技术正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">53.</span>以下哪些是我国依靠自己力量在新军事领域取得的重大成就（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>核武器和战略导弹试验成功<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>人造地球卫星上天<span class="hljs-built_in">C</span><span class="hljs-operator">.</span>核潜艇下水和航空母舰建成<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>牛膜岛素人工合成<span class="hljs-operator">.</span>嫦娥奔月<span class="hljs-operator">.</span>空间站建设正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">54</span>.新军事变革使战争形态从机械化向信息化转变，主要体现为（ ）<span class="hljs-selector-tag">A</span> .战场空间日益扩展<span class="hljs-selector-tag">B</span> .战争节奏加快、持续时间缩短C.战略、战役、战术行动融为一体D .制信息权成为战场主动权的焦点正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">55</span>.世界新军事变革深入发展具有全面性。世界主要国家军事改革和军事转型不仅涉及信息化军事技术形态、联合化组织形态和高效化管理形态，而且还包括（）等领域。<span class="hljs-selector-tag">A</span> .军事理论形态<span class="hljs-selector-tag">B</span> .作战形态C .保障形态D .教育形态正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">56</span>.世界新军事变革深入发展，军队指挥形态将更加（），一体化联合作战指挥体系逐步形成。<span class="hljs-selector-tag">A</span> .扁平化<span class="hljs-selector-tag">B</span> .自动化C .网络化D .无缝化正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">57</span>.世界新军事变革深入发展，武器装备呈现出向（ ）的发展趋势。<span class="hljs-selector-tag">A</span> .数字化<span class="hljs-selector-tag">B</span> .精确化C .隐形化D .无人化正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">58</span>.世界新军事变革已进入深入发展的阶段。俄军“新面貌”改革进入调整完善阶段，力求实现（）的建军方针。<span class="hljs-selector-tag">A</span> .精干高效<span class="hljs-selector-tag">B</span> .机动灵活C .装备精良D .训练有素正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">59</span>.机械化战争时期，由于工业革命带来的新军事革命，出现了新的机械化战争理论。下列哪些属于典型的机械化战争理论（）<span class="hljs-selector-tag">A</span> .杜黑的“空军制胜论”<span class="hljs-selector-tag">B</span> .马汉的“海军制胜论”C.英国军事家富勒、德国的将军古德里安提出的 “坦克制胜论”D.戴高乐提出的“职业化军队&quot;理论.德国军事家鲁登道夫提出“总体战”理论正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D,E</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">60</span>.以下哪些特征属于联合作战形态的“四非”（ ）<span class="hljs-selector-tag">A</span> .非接触<span class="hljs-selector-tag">B</span> .非线性C .非对称D .非 正规正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><h2 id="第五章习题答案"><a href="#第五章习题答案" class="headerlink" title="第五章习题答案"></a>第五章习题答案</h2><div class="code-wrapper"><pre><code class="hljs jboss-cli">1.信息化弹药也称精确制导弹药，是指依靠自身动力装置推进，能够获取和利用目标所提供的位置信息，并由制导系统控制飞行路线和弹道，以准确攻击目标直接命中概率通常大于<span class="hljs-params">()</span>的弹药。A <span class="hljs-string">.0.3</span> B <span class="hljs-string">.0.4</span> C <span class="hljs-string">.0.5</span> D <span class="hljs-string">.0.6</span>正确答案：C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">2.</span>新概念武器是指在工作原理、破坏机理和作战运用方式上与传统武器有明显区别，能够大幅度（）或形成新型军事能力的高技术武器载体。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>提高作战效能 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>提高作战效费比 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>提高作战能力 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>减少战争消耗正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">3.据日本长崎大学“核武器废除研究中心”的研究报告称，截至2018年6月，世界9个国家持有约（）枚核弹头。A <span class="hljs-string">.12350</span> B <span class="hljs-string">.14450</span> C <span class="hljs-string">.16600</span> D <span class="hljs-string">.20000</span>正确答案：B</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">4</span>.新概念武器是指在工作原理、破坏机理和作战运用方式上与传统武器有明显区别，能够大幅度（）或形成新型军事能力的高技术武器载体。<span class="hljs-selector-tag">A</span> .提高作战效费比 <span class="hljs-selector-tag">B</span> .提高作战效率 C .增强杀伤效果 D .增强杀伤机理正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">5</span>.陆军信息化作战平台，是指陆军在遂行以陆上为主的作战和保障任务时，使用的信息化武器装备体系中具有运载功能并可作为（）的载体部分，如各类军用车辆、坦克、步兵战车等除火器之外的部分。<span class="hljs-selector-tag">A</span> .机械依托 <span class="hljs-selector-tag">B</span> .火器依托 C .动力依托 D .信息依托正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">6.海军是遂行海上作战任务的战略军种，海军作战平台在占地球表面积（）的海洋上独具制海的战略优势。A <span class="hljs-string">.0.53</span> B <span class="hljs-string">.0.6</span> C <span class="hljs-string">.0.71</span> D <span class="hljs-string">.0.82</span>正确答案：C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">7</span>.海军信息化作战平台，是海军在遂行以海上为主的作战和保障任务时，使用的信息化武器装备体系中具有运载功能，并可作为（）地载体部分。<span class="hljs-selector-tag">A</span> .机械依托 <span class="hljs-selector-tag">B</span> .火器依托 C .动力依托 D .信息依托正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">8</span>.空军信息化作战平台，是空军在遂行以空中为主的作战和保障任务时，使用的信息化武器装备体系中具有运载功能，并可作为（）地载体部分。<span class="hljs-selector-tag">A</span> .机械依托 <span class="hljs-selector-tag">B</span> .火器依托 C .动力依托 D .信息依托正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">9.</span>预警探测系统是指利用各种探测和监视手段，对各种军事威胁目标进行发现、识别、跟踪或监视，为防卫或反击作战提供（）的专用信息系统。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>情报侦察 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>情报探测 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>情报收集 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>情报保障正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">10.</span>我国北斗卫星导航系统，截止<span class="hljs-number">2019</span>年<span class="hljs-number">11</span>月<span class="hljs-number">6</span>日，共成功发射了（）北斗导航卫星<span class="hljs-operator">,</span>标志着北斗三号系统<span class="hljs-number">3</span>颗倾斜地球同步轨道卫星全部发射完毕。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>第<span class="hljs-number">41</span>颗 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>第<span class="hljs-number">43</span>颗 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>第<span class="hljs-number">49</span>颗 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>第<span class="hljs-number">50</span>颗正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">11.精确制导武器，是指采用精确制导技术，直接命中概率在（）以上的武器，精确制导技术是在复杂的战场环境中，利用目标的特征、信号、发现、识别和跟踪目标，并将武器直接导引至实施有效打击的武器技术。A <span class="hljs-string">.0.4</span> B <span class="hljs-string">.0.5</span> C <span class="hljs-string">.0.8</span> D <span class="hljs-string">.1</span>正确答案：B</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">12</span>.核武器是利用核反应瞬间（ ）起杀伤破坏作用的武器。<span class="hljs-selector-tag">A</span> .释放出的巨大能量 <span class="hljs-selector-tag">B</span> .释放出的巨大辐射 C .产生的巨大爆炸 D.产生的强烈闪光正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">13.光辐射（又称热辐射）是爆炸后（）时间内的闪光及几千万摄氏度以上的高温火球辐射出来的强光和热，其杀伤破坏因素包括“烧”、“爆“，光辐射直接照射无隐蔽的人员会造成烧伤。A <span class="hljs-string">.1</span>秒至10秒 B <span class="hljs-string">.10</span>秒至20秒 C <span class="hljs-string">.1</span>分钟至10分钟 D <span class="hljs-string">.10</span>分钟至20分钟正确答案： A</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">14</span>.冲击波是核爆炸时（），高温高压火球猛烈膨胀压缩周围空气而形成的高速高温高压气浪，它对人员、物体能够造成挤压、抛掷作用，挤压作用造成严重内伤，抛掷作用造成外伤，冲击波可造成建筑物倒塌，砖瓦抛掷造成人员间接伤害及堵塞交通。<span class="hljs-selector-tag">A</span> .几秒种内 <span class="hljs-selector-tag">B</span> .几十秒种内 C .几分钟种内 D .几十分钟种内正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">15.</span>核电磁脉冲是核爆炸瞬间产生的一种（），其作用半径可达几千千米，对人员没有直接的杀伤力作用，但能消除计算机上存储的信息，使自动控制系统失灵，家用电器受到干扰和破坏。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>强电流 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>强脉冲 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>强电磁波 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>强闪光正确答案：<span class="hljs-built_in">C</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">16.</span>生物武器，是以（）杀伤敌方有生力量、毁坏动植物的各种武器和器材的总称。由生物战剂、生物弹药及运载系统等组成，生物战是使用生物武器伤害对方人员、动植物以至造成大面积杀伤的一种战争手段。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>生物毒性 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>生物弹药 <span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>运载系统 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>生物战剂正确答案：<span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">17.次声波武器是一种能发射<span class="hljs-params">( )</span>以下低频声波即次声波的大功率武器装置。A <span class="hljs-string">.10</span>赫兹 B <span class="hljs-string">.20</span>赫兹 C <span class="hljs-string">.25</span>赫兹 D <span class="hljs-string">.30</span>赫兹正确答案：C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">18</span>.基因武器，也被称作遗传工程武器或DN<span class="hljs-selector-tag">A</span>武器，它运用遗传工程技术，用类似工程的办法，按需要重组基因，在一些致病细菌或病毒中()能抵抗普通疫苗或药物的基因，或者在一些本来不会致病的微生物体内接入致病基因而制造成生物武器。<span class="hljs-selector-tag">A</span> .产生 <span class="hljs-selector-tag">B</span> .“植入” C .转化 D .接入正确答案：<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">19</span>.失能性毒剂是一类暂时使人的思维和运动机能发生障碍从而（）的化学毒剂。<span class="hljs-selector-tag">A</span> .丧失战斗力 <span class="hljs-selector-tag">B</span> .丧失意志 C .丧失思维 D .机能坏死正确答案： <span class="hljs-selector-tag">A</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs jboss-cli">20.动能武器是指利用发射高超速弹头的动能直接撞毁目标的武器。所谓高超速，通常指具备（）以上的音速（331.36米/秒）的速度。A <span class="hljs-string">.2</span>倍 B <span class="hljs-string">.5</span>倍 C <span class="hljs-string">.6</span>倍 D <span class="hljs-string">.10</span>倍正确答案：B</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">21</span>.信息化武器装备的特点是（ ）。<span class="hljs-selector-tag">A</span> .智能化 <span class="hljs-selector-tag">B</span> .网络化C .一体化D .数字化正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">22</span>.战争历来会造成巨大的破坏和消耗，现代战争更是如此。造成未来战争破坏和消耗巨大的主要原因是（）。<span class="hljs-selector-tag">A</span> .高技术杀伤破坏力大<span class="hljs-selector-tag">B</span> .高精度武器命中率极高C .信息化武器造价昂贵D.作战物资消耗巨大正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">23</span>.一些发达国家信息化装备科技含量与装备性能不断提高，趋于（），代表了信息化装备的发展方向。<span class="hljs-selector-tag">A</span> .隐形化 <span class="hljs-selector-tag">B</span> .通用化C .无人化D .系统化正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">24.</span>信息化装备按照使用性能划分（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>信息化装备<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>信息化弹药<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>信息化作战平台<span class="hljs-built_in">D</span><span class="hljs-operator">.</span><span class="hljs-variable">C4ISR</span><span class="hljs-operator">.</span>单兵数字化装备正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">25</span>.军信息化作战平台有多种分类。按照功能用途，可分为（ ）。<span class="hljs-selector-tag">A</span> .信息作战平台<span class="hljs-selector-tag">B</span> .信息保障平台C .指挥控制平台D .自动化平台正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">26.</span>陆军信息化作战平台的发展趋势（ ）<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>增强打击能力 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>提高机动能力<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>提高生存能力<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>加强信息能力<span class="hljs-built_in">E</span>．完善自主能力正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">27</span>.海战信息化作战平台的分类（ ）<span class="hljs-selector-tag">A</span> .水面舰艇 <span class="hljs-selector-tag">B</span> .潜艇C .舰载机 D .航空母舰. 正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">28.</span>海军信息化作战平台的发展趋势（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>提高网络化程度和联合作战平台<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>增强对地精确打击和常规威慑能力<span class="hljs-built_in">C</span><span class="hljs-operator">.</span>增强经济可承受性和多功能化<span class="hljs-built_in">D</span><span class="hljs-operator">.</span>自动化、智能化和无人化<span class="hljs-operator">.</span>隐身化和高防护能力正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">29.</span>空军信息化作战平台，按照不同标准有不同分类。按照载体结构分为（）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>飞行<span class="hljs-variable">B</span> <span class="hljs-operator">.</span>飞艇和气球<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>高超音速飞行器<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>军用飞机正确答案：<span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">30</span>.空军信息化作战平台的发展趋势（ ）。<span class="hljs-selector-tag">A</span> .隐身化、高机动、多用途 <span class="hljs-selector-tag">B</span> .智能化、无人化C .电子对抗能力D.高超声速军用飞机正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">31</span>.指挥控制系统的分类通常分为（ ）。<span class="hljs-selector-tag">A</span> .战略指挥信息系统 <span class="hljs-selector-tag">B</span> .战役指挥信息系统C .战术指挥信息系统D.作战平台单兵信息系统正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">32</span>.预警探测系统按照战场空间分类，可以分为 ( )。<span class="hljs-selector-tag">A</span> .天基预警系统 <span class="hljs-selector-tag">B</span> .空中预警系统C .海上预警系统D .陆基预警系统正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">33</span>.预警探测系统的发展趋势有（ ）。<span class="hljs-selector-tag">A</span> .发展机载与太空监视、多功能相控阵雷达预警探测系统<span class="hljs-selector-tag">B</span>.对抗隐身目标的预警探测系统C .电子信息系统D .向多功能综合化发展正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">34</span>.综合电子信息系统的发展趋势有（ ）<span class="hljs-selector-tag">A</span> .加快网络一体化建设步伐<span class="hljs-selector-tag">B</span> .重视提高侦察预警能力C.加快与作战系统相融合D .增强系统攻防作战能力正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">35.</span>精确制导武器的制导方式按照所采用的物理量特性分类，其制导方式有（）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>无线电制导 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>红外制导<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>激光制导<span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>雷达制导<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>电视制导正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">36</span>.精确制导武器的制导方式按照制导系统的控制导引技术的差异，其制导方式有（）。<span class="hljs-selector-tag">A</span> .自主式制导 <span class="hljs-selector-tag">B</span> .遥控制导C .寻的制导D .复合制导正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">37</span>.寻的制导的制导方式有（ ）。<span class="hljs-selector-tag">A</span> .主动寻的制导 <span class="hljs-selector-tag">B</span> .半主动寻的制导C .被动寻的制导D .复合制导正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">38</span>.精确制导武器按导弹射程，可分为（ ）。<span class="hljs-selector-tag">A</span> .近程导弹（射程在<span class="hljs-number">1000</span>公里以内）<span class="hljs-selector-tag">B</span>.中程导弹（射程在<span class="hljs-number">1000</span>-<span class="hljs-number">3000</span>公里以内）C.远程导弹（射程在<span class="hljs-number">3000</span>-<span class="hljs-number">8000</span>公里以内）D.洲际导弹（射程在<span class="hljs-number">8000</span>公里以上）正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">39</span>.精确制导弹药也称灵巧弹药，根据不同的作用原理可分为（ ）。<span class="hljs-selector-tag">A</span> .末制导弹药 <span class="hljs-selector-tag">B</span> .末敏弹药C .炸弹类D .地雷正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">40.</span>核武器爆炸后，能产生五种杀伤因素（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>光辐射榜 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>冲击波<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>早期核辐射 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>核电磁脉冲<span class="hljs-operator">.</span>放射性沾染正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">41</span>.生物武器的特点（ ）。<span class="hljs-selector-tag">A</span> .致病力强 <span class="hljs-selector-tag">B</span> .传染性大C .污染面积大 D .有潜伏期正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">42</span>.生物武器的新种类有哪些（ ）。<span class="hljs-selector-tag">A</span> .基因武器 <span class="hljs-selector-tag">B</span> .纳米生物武器C .机器人 D .生物机器正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">43.</span>生物战剂的种类有（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>细菌类 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>病毒类<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>立克次体类 <span class="hljs-built_in">D</span> <span class="hljs-operator">.</span>牛膜岛素人工合成<span class="hljs-operator">.</span>依原体类正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">44</span>.化学武器按分散方式可分为（ ）基本类型。<span class="hljs-selector-tag">A</span> .布洒型<span class="hljs-selector-tag">B</span> .热分散型C .爆炸分散型 D .燃烧型正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">45.</span>毒剂的种类有（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>神经性毒剂 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>烂性毒剂<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>全身中毒性毒剂 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>失能性毒剂<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>刺激性毒剂<span class="hljs-variable">F</span><span class="hljs-operator">.</span>皇息性毒剂正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">46</span>.化学武器与常用武器比较，毒剂的特点有（ ）。<span class="hljs-selector-tag">A</span> .毒性作用强 <span class="hljs-selector-tag">B</span> .中毒途径多C .持续时间长 D .杀伤范围广正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,D</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">47</span>.新概念武器的基本特征通常表现为（ ）。<span class="hljs-selector-tag">A</span> .创新性 <span class="hljs-selector-tag">B</span> .高效性C .探索性 D .竞争性正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-number">48.</span>新概念武器的种类有（ ）。<span class="hljs-variable">A</span> <span class="hljs-operator">.</span>定能武器、动能武器 <span class="hljs-variable">B</span> <span class="hljs-operator">.</span>军用机器人<span class="hljs-built_in">C</span> <span class="hljs-operator">.</span>网络战武器 <span class="hljs-built_in">D</span><span class="hljs-operator">.</span>基因武器<span class="hljs-built_in">E</span><span class="hljs-operator">.</span>次声波武器 <span class="hljs-variable">F</span><span class="hljs-operator">.</span>幻觉武器正确答案： <span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">49</span>.动能武器主要包括（ ）。<span class="hljs-selector-tag">A</span> .电磁炮 <span class="hljs-selector-tag">B</span> .反卫星、反导弹动能拦截弹C .群射火箭与反卫星卫星 D.激光器正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-number">50</span>.电磁炮，是一种利用电磁力沿导轨发射炮弹的武器，电磁炮与普通火炮或其他常规动能武器相比，具有很多独特的优势（）。<span class="hljs-selector-tag">A</span> .射速快，动能大，射击精度高，射程远<span class="hljs-selector-tag">B</span> .射击隐蔽性好C .射程可调D.威力大正确答案： <span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C</code></pre></div><p class='note note-success'>本文综合自互联网</p>]]></content>
    
    
    <categories>
      
      <category>HUST</category>
      
      <category>Answer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HUST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo写作的基本语法</title>
    <link href="/2023-07-03/Hexo%E5%86%99%E4%BD%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023-07-03/Hexo%E5%86%99%E4%BD%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最最最开始，当然是建立一个<code>.md</code>文档啦，使用以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">$ hexo n [layout] &lt;title&gt;</code></pre></div><p>如果添加环境变量总是失败，则使用以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">$ npx hexo n [layout] &lt;title&gt;<span class="hljs-comment"># 作为一个程序猿，你该懂得[]里的是可选参数（我一开始也不懂），layout详见<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Hexo](https://hexo.io/zh-cn/docs/writing)">[1]</span></a></sup>的Hexo官方注解</span></code></pre></div><p>现在，你已经拥有第一篇博客文章（的毛坯）了！</p><h1 id="Hexo本身支持的特色语法-1"><a href="#Hexo本身支持的特色语法-1" class="headerlink" title="Hexo本身支持的特色语法[1]"></a>Hexo本身支持的特色语法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Hexo](https://hexo.io/zh-cn/docs/writing)">[1]</span></a></sup></h1><h2 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h2><p class="note note-success">Hexo 默认安装了 hexo-renderer-marked 和 hexo-renderer-ejs ，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 hexo-renderer-pug ，你甚至可以用 Pug 模板语言书写文章。只需要将文章的扩展名从  md  改成  ejs ，Hexo 就会使用 hexo-renderer-ejs 渲染这个文件，其他格式同理。</p><p><code>以上使用了Fluid主题的便签特性。</code></p><p>使用 HTML 形式：</p><p><code>&lt;p class=&quot;note note-primary&quot;&gt;标签&lt;/p&gt;</code></p><p><img src="https://blog-pic-storage.oss-cn-shanghai.aliyuncs.com/img/202307031816602.png" alt="便签种类"></p><h2 id="引用块Quote"><a href="#引用块Quote" class="headerlink" title="引用块Quote:"></a>引用块Quote:</h2><p>基于Markdown的区块引用：</p><div class="code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">cite</span></code></pre></div><blockquote><p>cite</p></blockquote><p>在文章中插入引言，可包含作者、来源和标题。</p><div class="code-wrapper"><pre><code class="hljs css">&#123;% <span class="hljs-selector-tag">blockquote</span> <span class="hljs-selector-attr">[author[, source]</span>] <span class="hljs-selector-attr">[link]</span> <span class="hljs-selector-attr">[source_link_title]</span> %&#125;<span class="hljs-attribute">content</span>&#123;% endblockquote %&#125;</code></pre></div><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>普通的 blockquote</p><div class="code-wrapper"><pre><code class="hljs css">&#123;% <span class="hljs-selector-tag">blockquote</span> %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125;</code></pre></div><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p><strong>引用书上的句子</strong></p><div class="code-wrapper"><pre><code class="hljs css">&#123;% <span class="hljs-selector-tag">blockquote</span> David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for <span class="hljs-attribute">all</span>. Through kindness. Through mercy.&#123;% endblockquote %&#125;</code></pre></div><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><p><strong>引用 Twitter</strong></p><div class="code-wrapper"><pre><code class="hljs css">&#123;% <span class="hljs-selector-tag">blockquote</span> <span class="hljs-keyword">@DevDocs</span> <span class="hljs-attribute">https</span>://twitter.com/devdocs/status/<span class="hljs-number">356095192085962752</span> %&#125;<span class="hljs-attribute">NEW</span>: DevDocs now comes with syntax highlighting. <span class="hljs-attribute">http</span>://devdocs.io&#123;% endblockquote %&#125;</code></pre></div><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><p><strong>引用网络上的文章</strong></p><div class="code-wrapper"><pre><code class="hljs css">&#123;% <span class="hljs-selector-tag">blockquote</span> Seth Godin http://sethgodin.typepad.com/seths_blog/<span class="hljs-number">2009</span>/<span class="hljs-number">07</span>/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity <span class="hljs-selector-tag">to</span> delight.&#123;% endblockquote %&#125;</code></pre></div><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><p class='note note-success'>语法相对来说繁杂，不是很建议使用</p><h2 id="代码块Code："><a href="#代码块Code：" class="headerlink" title="代码块Code："></a>代码块Code：</h2><p>最常用的是Markdown方法插入代码：</p><p class='note note-primary'>`code`</p><p><code>code</code></p><p class='note note-secondary'>```code```</p><div class="code-wrapper"><pre><code class="hljs c">code</code></pre></div><h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><p>在文章中嵌入 Gist。</p><div class="code-wrapper"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;https://gist.github.com/MegaSuite/aaa482f9062bc94ec61f1eecef329d1d.js<span class="hljs-string">&quot;&gt;&lt;/script&gt;</span></code></pre></div><script src="https://gist.github.com/MegaSuite/aaa482f9062bc94ec61f1eecef329d1d.js"></script><p class='note note-success'>部分网络环境下，Gist无法正常加载</p><h2 id="iframe-2"><a href="#iframe-2" class="headerlink" title="iframe[2]"></a>iframe<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Hexo Theme Fluid](https://fluid-dev.com/posts/fluid-write/)">[2]</span></a></sup></h2><p>在文章中插入 iframe。</p><div class="code-wrapper"><pre><code class="hljs text">&lt;iframe src=&quot;https://hexo.fluid-dev.com/&quot; width=&quot;100%&quot; height=&quot;500&quot; name=&quot;topFrame&quot; scrolling=&quot;yes&quot;  noresize=&quot;noresize&quot; frameborder=&quot;0&quot; id=&quot;topFrame&quot;&gt;&lt;/iframe&gt;</code></pre></div><iframe src="https://hexo.fluid-dev.com/" width="100%" height="500" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame" ></iframe><p class='note note-primary'>Fluid开发者官方博客，部分网络环境可能加载失败</p><h2 id="Bilibili"><a href="#Bilibili" class="headerlink" title="Bilibili"></a>Bilibili</h2><p>以B站为例，去相应播放页面复制代码即可</p><div class="code-wrapper"><pre><code class="hljs abnf">&lt;iframe src<span class="hljs-operator">=</span><span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=53851218&amp;bvid=BV1j4411W7F7&amp;cid=94198756&amp;page=1&amp;autoplay=0&quot;</span> scrolling<span class="hljs-operator">=</span><span class="hljs-string">&quot;no&quot;</span> border<span class="hljs-operator">=</span><span class="hljs-string">&quot;0&quot;</span> frameborder<span class="hljs-operator">=</span><span class="hljs-string">&quot;no&quot;</span> framespacing<span class="hljs-operator">=</span><span class="hljs-string">&quot;0&quot;</span> allowfullscreen<span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span>&gt; &lt;/iframe&gt;</code></pre></div><iframe src="//player.bilibili.com/player.html?aid=53851218&bvid=BV1j4411W7F7&cid=94198756&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" align="center"> </iframe><h2 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h2><p>在文章中使用 <code>&lt;!-- more --&gt;</code>，那么 <code>&lt;!-- more --&gt;</code> 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。</p><p class="note note-success">注意，摘要会被 Front Matter 中的 excerpt 覆盖。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p class="note note-success">Hexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。</p><hr><h3 id="分类方法的分歧"><a href="#分类方法的分歧" class="headerlink" title="分类方法的分歧"></a>分类方法的分歧</h3><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><div class="code-wrapper"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span></code></pre></div><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><div class="code-wrapper"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<span class="hljs-literal">-</span> [Diary, PlayStation]<span class="hljs-literal">-</span> [Diary, Games]<span class="hljs-literal">-</span> [Life]</code></pre></div><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p><hr><p>以上仅陈述个人认为比较常用或者比较有用的部分语法，具体细致解释参见Hexo和Hexo-Fluid作者博客。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/writing">Hexo</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://fluid-dev.com/posts/fluid-write/">Hexo Theme Fluid</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Major</category>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从hexo开启第一篇博客</title>
    <link href="/2023-07-03/%E4%BB%8Ehexo%E5%BC%80%E5%90%AF%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023-07-03/%E4%BB%8Ehexo%E5%BC%80%E5%90%AF%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Major</category>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
